;-----------------------------------------------------------------------------;
; Captain Comic                                                               ;
;-----------------------------------------------------------------------------;
; Copyright 1989 Color Dreams Inc.                                            ;
; Copyright 1989 Michael Denio and Anthony Henderson                          ;
;-----------------------------------------------------------------------------;

;
;  DAN :: LOOK AT LINE #2830
;  Don't remove any of the 'lda H'FFFF' lines from the code, it will mess up
;  the timing.
;

.EQU LOGO0       ,H'FF
.EQU LOGO01      ,H'11
.EQU LOGO02      ,H'16
.EQU LOGO03      ,H'30
.EQU LOGO11      ,H'00
.EQU LOGO12      ,H'10
.EQU LOGO13      ,H'20
.EQU LOGO21      ,H'03
.EQU LOGO22      ,H'1B
.EQU LOGO23      ,H'13
.EQU LOGO31      ,H'27
.EQU LOGO32      ,H'16
.EQU LOGO33      ,H'2C

.EQU CINV0       ,H'FF
.EQU CINV01      ,H'10
.EQU CINV02      ,H'00
.EQU CINV03      ,H'17
.EQU CINV11      ,H'30
.EQU CINV12      ,H'22
.EQU CINV13      ,H'12
.EQU CINV21      ,H'37
.EQU CINV22      ,H'27
.EQU CINV23      ,H'17
.EQU CINV31      ,H'2B
.EQU CINV32      ,H'1B
.EQU CINV33      ,H'16

.EQU    CCS0     ,H'FF ;Captain
.EQU    CCS01    ,H'36
.EQU    CCS02    ,H'16
.EQU    CCS03    ,H'06

.EQU    T1,   H'30 ; H'3C ;Transporter
.EQU    T2,   H'22 ; H'2C
.EQU    T3,   H'12 ; H'1C

.EQU    CAN1,     H'30 ; Can / Shield
.EQU    CAN2,     H'22
.EQU    CAN3,     H'12

; 00 = Gray         01 = Blue           02 = Medium Blue    03 = PurpleBlue?
; 04 = BluePurple?  05 = Purple         06 = Red            07 = Brown
; 08 = Avocado      09 = YellowGreen    0A = Dark Green     0B = GreenBlue
; 0C = Dark Aqua    0D = Black          0E = Always Black   0F = Always Black

.EQU    CC0     ,world_data + 0
.EQU    CC01    ,world_data + 1
.EQU    CC02    ,world_data + 2
.EQU    CC03    ,world_data + 3
.EQU    CC11    ,world_data + 4
.EQU    CC12    ,world_data + 5
.EQU    CC13    ,world_data + 6
.EQU    CC21    ,world_data + 7
.EQU    CC22    ,world_data + 8
.EQU    CC23    ,world_data + 9
.EQU    CC31    ,world_data + 10
.EQU    CC32    ,world_data + 11
.EQU    CC33    ,world_data + 12

.EQU    CCS11   ,world_data + 13
.EQU    CCS12   ,world_data + 14
.EQU    CCS13   ,world_data + 15
.EQU    CCS21   ,world_data + 16
.EQU    CCS22   ,world_data + 17
.EQU    CCS23   ,world_data + 18

.EQU    ED_SIZE ,10
.EQU    ED_POWER,world_data + 19
.EQU    ED_PAL  ,world_data + 20
.EQU    ED_ATIME,world_data + 21
.EQU    ED_IXV  ,world_data + 22
.EQU    ED_IYV  ,world_data + 23
.EQU    ED_MTYPE,world_data + 24
.EQU    ED_STG0 ,world_data + 25
.EQU    ED_STG1 ,world_data + 26
.EQU    ED_STG2 ,world_data + 27
.EQU    ED_STG3 ,world_data + 28

.EQU    items, world_data + 59
.EQU    doors, world_data + 86

.EQU    DC1,   world_data + 150
.EQU    DC2,   world_data + 151
.EQU    DC3,   world_data + 152
.EQU    FT_TILE, world_data + 153

.EQU J1FLAGS, H'200             ;JOYSTICK 1 FLAGS AS MAINTAINED BY NMI
.EQU J1CHANGE,H'201             ;BITS THAT CHANGED IN J1 FROM LAST TIME
.EQU J2FLAGS, H'202             ;JOYSTICK 2 FLAGS AS MAINTAINED BY NMI
.EQU J2CHANGE,H'203             ;BIT POSITIONS REPRESENT BUTTONS:
.EQU A_BUTTON,H'80              ;80H = A button
.EQU B_BUTTON,H'40		;40H = B button
.EQU SELECT,H'20		;20H = Select
.EQU START,H'10			;10H = Start
.EQU UP,8			;08H = Up
.EQU DOWN,4			;04H = Down
.EQU LEFT,2			;02H = Left
.EQU RIGHT,1			;01H = Right

;THE FOLLOWING EQUATES ARE USED TO MAKE MUSIC STRINGS.
.EQU    LC,    0
.EQU    LCs,   1
.EQU    LDb,   1
.EQU    LD,    2
.EQU    LDs,   3
.EQU    LEb,   3
.EQU    LE,    4
.EQU    LF,    5
.EQU    LFs,   6
.EQU    LGb,   6
.EQU    LG,    7
.EQU    LGs,   8
.EQU    LAb,   8
.EQU    LA,    9
.EQU    LAs,   10
.EQU    LBb,   10
.EQU    LB,    11
.EQU    MC,    12
.EQU    MCs,   13
.EQU    MDb,   13
.EQU    MD,    14
.EQU    MDs,   15
.EQU    MEb,   15
.EQU    ME,    16
.EQU    MF,    17
.EQU    MFs,   18
.EQU    MGb,   18
.EQU    MG,    19         ;NOTES (CENTER AROUND INSTRUMENT RANGE)
.EQU    MGs,   20
.EQU    MAb,   20
.EQU    MA,    21
.EQU    MAs,   22
.EQU    MBb,   22
.EQU    MB,    23
.EQU    HC,    24
.EQU    HCs,   25
.EQU    HDb,   25
.EQU    HD,    26
.EQU    HDs,   27
.EQU    HEb,   27
.EQU    HE,    28
.EQU    HF,    29
.EQU    HFs,   30
.EQU    HGb,   30
.EQU    REST,  31
.EQU    STOP,  -2
.EQU    REWIND,-1

.EQU    N16,0<<5         ;NOTE DURATIONS
.EQU    N8, 1<<5
.EQU    N4, 2<<5
.EQU    N2, 3<<5
.EQU    N1, 4<<5

; *** INSTRUMENTS ***
;       H'C0,H'00                       ;HARPSI
;       H'80,H'00                       ;STRING
;       H'00,H'00                       ;ELECPIANO
;       H'80,H'FF                       ;SLIDER
;       H'00,H'D6                       ;BEE
;       H'40,H'00                       ;PIANO
;       H'80,H'C9                       ;ARCADE

.EQU base_ptr,  0
.EQU next_ptr,  2
.EQU    mtrk1l,    H'04
.EQU    mtrk1h,    H'05
.EQU    mtrk2l,    H'06
.EQU    mtrk2h,    H'07
.EQU    sf_trkl,   H'08
.EQU    sf_trkh,   H'09

.EQU tiles,     H'280
.EQU pals,      H'28C

.EQU temp,      H'300
.EQU num_lines, H'301
.EQU scroll_x,  H'302
.EQU take_turn, H'303
.EQU turn_count,H'304
.EQU world_x,   H'305
.EQU draw_x,    H'306
.EQU draw_slot, H'307
.EQU draw_busy, H'308
.EQU draw_tlow, H'309
.EQU draw_thgh, H'30A
.EQU draw_plow, H'30B
.EQU draw_phgh, H'30C
.EQU scroll_p,  H'30D
.EQU world_p,   H'30E
.EQU lc1,       H'30F
.EQU lc2,       H'310
.EQU move_flag, H'311
.EQU on_ground, H'312
.EQU jip,       H'313
.EQU c_face,    H'314
.EQU sht_cycle, H'315
.EQU fireballs, H'316
.EQU spower,    H'317
.EQU bpower,    H'318
.EQU high_copy, H'319
.EQU created,   H'31A
.EQU world_adj, H'31B
.EQU dead_flag, H'31C
.EQU save_px,   H'31D
.EQU save_py,   H'31E
.EQU save_pf,   H'31F
.EQU save_wx,   H'320
.EQU save_wp,   H'321
.EQU save_sx,   H'322
.EQU rest_px,   H'323
.EQU rest_py,   H'324
.EQU rest_pf,   H'325
.EQU rest_wx,   H'326
.EQU rest_wp,   H'327
.EQU rest_sx,   H'328
.EQU up_cnt,    H'329
.EQU life,      H'32A
.EQU scr_status,H'32B
.EQU play_count,H'32C
.EQU aux_c1,    H'32D
.EQU aux_c2,    H'32E
.EQU aux_c3,    H'32F
.EQU tempx,     H'330
.EQU tempy,     H'331
.EQU tempc,     H'332
.EQU item_id,   H'333
.EQU item_type, H'334
.EQU item_shp,  H'335
.EQU item_x,    H'336
.EQU item_y,    H'337
.EQU world_no,  H'338
.EQU page_val,  H'339
.EQU start_val, H'33A
.EQU title_val, H'33B
.EQU saux_c1,   H'33C
.EQU saux_c2,   H'33D
.EQU saux_c3,   H'33E
.EQU port_dir,  H'33F
.EQU port_count,H'340
.EQU port_tx,   H'341
.EQU port_ty,   H'342
.EQU dec_life,  H'343
.EQU mtrk1_i,   H'344
.EQU mtrk1_cnt, H'345
.EQU mtrk2_i,   H'346
.EQU mtrk2_cnt, H'347
.EQU sef_mode,  H'348
.EQU sef_i,     H'349
.EQU sef_cnt,   H'34A
.EQU sef_priority,H'34B
.EQU play_on,   H'34C
.EQU win_count, H'34D
.EQU win_state, H'34E
.EQU move_crown,H'34F
.EQU super1,    H'350
.EQU super2,    H'351
.EQU ehit_quota,H'352
.EQU dist_quota,H'353
.EQU next_type, H'354
.EQU superc,    H'355

.EQU bpowerg,   H'380
.EQU spowerg,   H'388
.EQU score,     H'390
.EQU hscore,    H'397

.EQU world_data,H'400

.EQU captain,   H'500
.EQU shots,     H'50C
.EQU dorks,     H'548
.EQU item_flags,H'594
;next -- 5AC

.EQU    spY,    H'700
.EQU    spC,    H'701
.EQU    spP,    H'702
.EQU    spX,    H'703

.EQU SHP_X,   H'0        ; X position
.EQU SHP_Y,   H'1        ; Y position
.EQU SHP_NST, H'2        ; No. of stages
.EQU SHP_CST, H'3        ; Current Stage
.EQU SHP_NT,  H'4        ; Number of tiles
.EQU SHP_FT,  H'5        ; First Tile
.EQU SHP_AT,  H'6        ; Animation Time
.EQU SHP_AC,  H'7        ; Animation Count
.EQU SHP_XV,  H'8        ; X velosity
.EQU SHP_YV,  H'9        ; Y velosity
.EQU SHP_MC,  H'A        ; Horz. move count
.EQU SHP_JC,  H'B        ; Vert. move count
.EQU SHP_YL,  H'A
.EQU SHP_YH,  H'B
.EQU SHT_SIZE,H'C

.EQU ITM_SIZE,H'9
.EQU ITM_ID,  H'0
.EQU ITM_TYPE,H'1
.EQU ITM_SHP, H'2
.EQU ITM_C1,  H'3
.EQU ITM_C2,  H'4
.EQU ITM_C3,  H'5
.EQU ITM_PAGE,H'6
.EQU ITM_X,   H'7
.EQU ITM_Y,   H'8

.EQU T_CAN,    H'1
.EQU T_SHIELD, H'6
.EQU T_KEY,    H'17
.EQU T_CORK,   H'18
.EQU T_BOOTS,  H'19
.EQU T_WAND,   H'20
.EQU T_LANTERN,H'21
.EQU T_GEMS,   H'22
.EQU T_GOLD,   H'23
.EQU T_CROWN,  H'24
.EQU has_key, item_flags+T_KEY-1
.EQU corker,  item_flags+T_CORK-1
.EQU has_boots,item_flags+T_BOOTS-1
.EQU has_lantern,item_flags+T_LANTERN-1
.EQU has_wand,item_flags+T_WAND-1
.EQU has_gems,item_flags+T_GEMS-1
.EQU has_gold,item_flags+T_GOLD-1
.EQU has_crown,item_flags+T_CROWN-1

.EQU DOOR_SIZE,  H'8
.EQU DOOR_PAGE,  H'0
.EQU DOOR_X,     H'1
.EQU DOOR_Y,     H'2
.EQU DOOR_TWORLD,H'3
.EQU DOOR_TPAGE, H'4
.EQU DOOR_TX,    H'5
.EQU DOOR_TY,    H'6
.EQU DOOR_TDOOR, H'7

.EQU E_SIZE,  H'13
.EQU E_STATUS,H'0        ; Enemy Status
.EQU E_POWER, H'1        ; Enemy Status
.EQU E_X,     H'2        ; X position
.EQU E_Y,     H'3        ; Y position
.EQU E_XV,    H'4        ; X velosity
.EQU E_YV,    H'5        ; Y velosity
.EQU E_IXV,   H'6        ; Initial X velosity
.EQU E_IYV,   H'7        ; Initial Y velosity
.EQU E_NSTAGE,H'8        ; No. of stages
.EQU E_CSTAGE,H'9        ; Current Stage
.EQU E_ATIME, H'A        ; Animation Time
.EQU E_ACOUNT,H'B        ; Animation Count
.EQU E_FACE,  H'C        ; Face Direction
.EQU E_TC,    H'D        ; Number of tiles
.EQU E_MTYPE, H'E        ; Movement type
.EQU E_STAGES,H'F        ; Start of Stages (4)

.EQU JUMP_POWER,5
.EQU JUMP_IV,  -3

.EQU F_BEAM,   132
.EQU F_DIE,    164
.EQU S_CAN,    236
.EQU S_SHIELD, 240
.EQU S_KEY,    120
.EQU S_LDOOR,  29*4
.EQU S_RDOOR,  30*4
.EQU MTHRESH,  48
.EQU CFULL,    13
.EQU CEMPTY,   11
.EQU F_LEFT,   H'40
.EQU F_RIGHT,  H'0
.EQU SHP_OFF,  H'F8      ; Shape 'off' flag
.EQU POWER_UP, 40

.EQU    BOUNCE   ,H'01
.EQU    HOP      ,H'02
.EQU    CRAWL    ,H'03
.EQU    HOVER    ,H'04
.EQU    DBOMB    ,H'05
.EQU    CRAWL2   ,H'06

.ORG    H'8000
shed_data:
.DB     H'FF    ; CC0
.DB     H'20    ; CC01
.DB     H'10    ; CC02
.DB     H'00    ; CC03
.DB     H'00    ; CC11
.DB     H'14    ; CC12
.DB     H'24    ; CC13
.DB     H'13    ; CC21
.DB     H'37    ; CC22
.DB     H'16    ; CC23
.DB     H'23    ; CC31
.DB     H'3D    ; CC32
.DB     H'19    ; CC33

.DB     H'38    ; CCS11              ;enemy 1  (bird)
.DB     H'25    ; CCS12
.DB     H'15    ; CCS13
.DB     H'3A    ; CCS21              ;enemy 2
.DB     H'2A    ; CCS22
.DB     H'1A    ; CCS23

.DB     H'02    ; E_POWER
.DB     H'00    ; E_PAL
.DB     H'04    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'01    ; E_IYV
.DB     HOVER   ; E_MTYPE
.DB     212     ; E_STAGE0
.DB     216     ; E_STAGE1
.DB     220     ; E_STAGE2
.DB     224     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'01    ; E_PAL
.DB     H'06    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'01    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     240     ; E_STAGE0
.DB     244     ; E_STAGE1
.DB     248     ; E_STAGE2
.DB     244     ; E_STAGE3

.DB     H'00    ; E_POWER
.DB     H'02    ; E_PAL
.DB     H'06    ; E_ATIME
.DB     H'02    ; E_IXV
.DB     H'02    ; E_IYV
.DB     HOP     ; E_MTYPE
.DB     228     ; E_STAGE0
.DB     232     ; E_STAGE1
.DB     236     ; E_STAGE2
.DB     232     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'02    ; E_PAL
.DB     H'06    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'01    ; E_IYV
.DB     HOP     ; E_MTYPE
.DB     228     ; E_STAGE0
.DB     232     ; E_STAGE1
.DB     236     ; E_STAGE2
.DB     232     ; E_STAGE3

.DB     T_CAN+4 ; ITM_ID
.DB     T_CAN   ; ITM_TYPE
.DB     252     ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     1       ; ITM_PAGE
.DB     H'60    ; ITM_X
.DB     2       ; ITM_Y

.DB     T_SHIELD+5; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     112     ; ITM_X
.DB     7       ; ITM_Y

.DB     T_SHIELD+6; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     1       ; ITM_PAGE
.DB     H'F9    ; ITM_X
.DB     6       ; ITM_Y

.DB     0       ; DOOR_PAGE
.DB     3       ; DOOR_X
.DB     7*16+16 ; DOOR_Y
.DB     2       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     250     ; DOOR_TX
.DB     9*16+16 ; DOOR_TY
.DB     4*DOOR_SIZE ; DOOR_TDOOR

.DB     1       ; DOOR_PAGE
.DB     H'5C    ; DOOR_X
.DB     4*16+16 ; DOOR_Y
.DB     6       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     H'6C    ; DOOR_TX
.DB     8*16+16 ; DOOR_TY
.DB     2*DOOR_SIZE ; DOOR_TDOOR

.DB     1       ; DOOR_PAGE
.DB     H'6C    ; DOOR_X
.DB     8*16+16 ; DOOR_Y
.DB     6       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     H'5C    ; DOOR_TX
.DB     4*16+16 ; DOOR_TY
.DB     1*DOOR_SIZE ; DOOR_TDOOR

.DB     1       ; DOOR_PAGE
.DB     H'F6    ; DOOR_X
.DB     6*16+16 ; DOOR_Y
.DB     7       ; DOOR_TWORLD
.DB     0       ; DOOR_TPAGE
.DB     H'09    ; DOOR_TX
.DB     3*16+16 ; DOOR_TY
.DB     0*DOOR_SIZE ; DOOR_TDOOR

.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0

.DB     H'00    ; DC1
.DB     H'14    ; DC2
.DB     H'24    ; DC3
.DB     25      ; FT_TILE

.ORG    H'80A0
shed_map:
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2, 31, 34, 31, 34, 31, 31, 34, 31, 31, 34, 34, 31, 31
  .DB  31, 34, 31, 31, 31, 31, 33, 34, 31, 31, 34, 34, 31, 31, 31, 34
  .DB  32, 31, 31, 31, 31, 31, 31, 33, 33,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31, 32, 31, 31, 31
  .DB  31, 31, 32, 31,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  1,  1,  0, 31, 31, 33, 31,  0,  1,  1,  0, 31, 31, 31
  .DB  31,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0
  .DB   0,  1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0
  .DB   0,  1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0
  .DB   1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0
  .DB   1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2, 31, 34, 34, 34, 31, 34, 31, 34, 31, 34, 31, 34, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 33, 34, 31, 31, 34
  .DB  31, 31, 33, 31, 31, 31, 31, 33, 31,  2,  2, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 31
  .DB  31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 35, 35, 35, 35
  .DB  35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 31, 31
  .DB  31, 31, 31, 31, 31, 34,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 31, 31, 34, 31, 31, 34
  .DB  31, 31, 31,  2,  2, 31, 32, 31, 31, 35, 35, 35, 35, 35, 35, 35
  .DB  31, 31, 31, 31,  2,  2, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 34, 34, 31, 31, 31
  .DB  31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0, 31, 31, 31, 34, 31
  .DB  31, 31, 31,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 31, 33, 31
  .DB  31,  0,  1,  1,  0, 34, 31, 31, 31,  0,  1,  1,  0, 31, 31, 31
  .DB  31,  0,  1,  1,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31,  0,  0,  0,  0, 31, 31, 31, 31
  .DB   0,  0,  0,  0, 31, 31, 31, 31,  0,  0,  0,  0, 31, 31, 31, 31
  .DB   0,  0,  0,  0, 34, 31, 31, 31,  0,  0,  0,  0, 31, 31, 34,  0
  .DB   0,  0,  0, 31, 31, 31, 31,  0,  0,  0,  0, 31, 31, 31, 31,  0
  .DB   0,  0,  0, 31, 31, 31, 31, 31, 34, 31, 31, 31, 34, 34, 31,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31
  .DB  31, 34, 34, 31, 34, 31, 34, 31, 34, 34, 34, 31, 34, 31, 34, 31
  .DB  34, 31, 31, 34, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 34
  .DB  31, 31, 31, 31, 33, 31, 31, 33, 31,  2,  2, 31, 31, 34, 34, 31
  .DB  31, 31, 31, 31, 33, 31, 31,  2,  2,  2,  2, 31, 31, 31, 35, 35
  .DB  35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 31, 31, 31,  2,  2, 34
  .DB  31, 31, 31, 31, 34, 31, 34, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31, 34, 31, 31, 31, 31, 34, 31, 31, 31, 31, 37,240,236,246,246
  .DB 235,236,246,246,246,232,246,246,246,244,245,246,235,240, 38, 31
  .DB  31, 31, 34, 31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2, 34, 34, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31,  2,  2, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 34, 31, 31, 31
  .DB  34, 31, 31,  2,  2, 31, 31, 31, 37,240,236,246,244,245,246,235
  .DB  38, 31, 31, 31,  2,  2, 31, 34, 31, 31, 31, 31, 31, 31, 31, 34
  .DB  33, 31,  2,  2, 31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 34, 31
  .DB  31, 31, 31, 31, 31, 31, 33, 31, 34, 34, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 34, 34, 31, 31
  .DB  34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  1,  0, 31, 35, 35, 31, 33
  .DB  31, 31, 31,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 31, 31, 31, 31, 34
  .DB  31,  0,  1,  1,  0, 31, 31, 31, 31,  0,  1,  1,  0, 31, 31, 34
  .DB  31,  0,  1,  1,  0, 31, 31, 31, 31, 31, 34, 34, 31, 31, 31, 31
  .DB  31, 31, 33, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31
  .DB  31, 31, 31, 31, 31, 34, 31, 31, 31, 32, 33, 34, 31, 31, 32, 31
  .DB  31, 31, 31, 31, 31, 34, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 31, 31, 33, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 32, 31, 31,  0,  1
  .DB   2, 31, 31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31
  .DB  31, 34, 31, 31, 34, 31, 34, 31, 34, 31, 34, 31, 34, 31, 34, 31
  .DB  34, 31, 31, 31, 31, 31, 31, 34, 31, 31, 32, 31, 31, 31, 31, 32
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31
  .DB  31,  0, 31, 31, 31, 31, 31, 31, 31,  2,  2, 33, 33, 37,246,235
  .DB 240,236,231,232,235,239,240,236,232,235, 38, 31, 31,  2,  2, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34
  .DB  31, 31, 31, 31, 32, 31, 31, 31, 31, 34, 32, 37, 63,241,234,235
  .DB 239,240,236,232,235,240,236,235,236,231,232,235,239,241, 38, 31
  .DB  31, 34, 34, 33, 31, 31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2, 31, 31, 31, 31, 31, 34, 31, 31, 32, 31, 34
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 31, 31
  .DB  31, 31, 34, 32,  2,  2, 31, 31, 31, 31, 31, 31, 31,152, 31, 31
  .DB  31,152, 31, 31, 31,152, 31, 31, 31,152, 31, 31, 34, 31, 34, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 37,241,240,236,232,231,235,239
  .DB  38, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33
  .DB  33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 34, 33
  .DB  31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 34, 34, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 34, 31, 33, 31, 34, 31, 31, 31, 33, 31, 31, 34, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  1,  0, 37,122,123, 38,152
  .DB 152,152, 31,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  1,  1,  1,  1,  1,  1,  0,  0, 31, 31, 31, 31, 31, 34
  .DB  34,  0,  1,  1,  0, 31, 31, 31, 34,  0,  1,  1,  0, 31, 31, 31
  .DB  31,  0,  1,  1,  0, 31, 31, 31, 31, 31, 31, 33, 34, 31, 32, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 34, 33, 33, 31, 31, 31, 31, 31
  .DB  31, 34, 31, 31, 31, 34, 34, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 34, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 34, 31,  0,  1
  .DB   2, 31, 31, 34, 31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31
  .DB  31, 31, 31, 31, 34, 31, 34, 31, 34, 31, 34, 31, 34, 34, 31, 31
  .DB  34, 31, 31, 31,211, 31, 31, 33, 31, 32, 34, 31, 31,214, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 31, 31, 31, 32,  0
  .DB  31, 31, 31,  0, 31, 31, 34, 31, 31,  2,  2, 31, 33, 37,235,239
  .DB 241,240,238,237,239,241,239,240,238,239, 38, 31, 31,  2,  2, 34
  .DB  31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 34, 31, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 34, 37, 63, 63, 63,241
  .DB 241, 63,241,239,241,241,240,238,241,241,237,241, 63, 63, 38, 34
  .DB  31, 31, 31, 31, 34, 32, 31, 34, 34, 31, 31, 31,  2,  2,  2,  2
  .DB   2,  2,  2, 31, 31, 31, 32, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 32, 31, 31, 31, 31, 31, 34, 31, 35, 35, 35, 35, 35
  .DB  35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 31, 31, 34, 31
  .DB  31, 31, 34, 31, 31, 31, 31, 31, 37, 63,241,240,238,237,239,241
  .DB  38, 31, 32, 34, 32, 31, 31, 31, 34, 31,119,120,120,121, 31, 33
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,119,120,121
  .DB  31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 34, 34, 31, 31, 31
  .DB  31, 31, 31, 34, 33, 31, 31, 31, 33, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  1,  0, 37,122,123, 38, 31
  .DB  31, 31, 31,  0,  1,  1,  1,  1,  1,  1,  0, 31, 31, 33, 31, 31
  .DB  31,  0,  0,  1,  1,  1,  1,  0,  0, 31, 33, 31, 31, 31, 31, 31
  .DB  34,  0,  0,  0,  0, 31, 31, 31, 31,  0,  1,  1,  0, 31, 31, 31
  .DB  31,  0,  0,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31, 31, 31, 31,214, 31, 31, 31, 32, 31, 31, 31, 31, 31,214, 31
  .DB  31, 31, 31, 31, 31, 31, 34,152,152,152, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,151,151,151, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31,151,151,151, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31, 31, 32,  0,  1
  .DB   2, 31, 31, 35, 35, 31, 31, 33, 31, 31, 31,  2,  2,  2,  2,  2
  .DB   2,  2, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 33, 33, 31, 31
  .DB  31, 33, 31, 34, 31, 31, 31, 31, 31, 31, 31,151, 31, 31, 31, 34
  .DB  31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 32, 31, 31, 31, 31, 31
  .DB 211, 31, 31,151, 31, 31,152, 31, 31, 31, 31, 31, 31,  0, 32, 31
  .DB  31, 31, 31, 34, 31,  0, 31, 31, 31, 31, 34, 33, 33, 37,241,241
  .DB  63, 63,241,241, 63, 63, 63, 63,241, 63, 38, 34, 31,  2,  2, 31
  .DB  31, 31, 31, 31, 31,214, 31, 31, 31, 31, 31,214, 31, 34, 31, 31
  .DB  31, 31, 31, 34, 31, 31, 34,214, 31, 31, 31, 37, 63, 63, 63, 63
  .DB  63, 63, 63, 63, 63, 63, 63,241, 63, 63,241, 63, 63, 63, 38, 32
  .DB  31, 31, 31, 31, 31, 34, 31, 31, 33, 31, 31, 31, 31, 34, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 34, 31, 34, 31, 31, 31, 31, 31, 31
  .DB  31, 31,211,211,211,211, 31, 31,211,211,211,211, 31, 31,211,211
  .DB 211,211, 31, 31, 32, 31, 31, 31, 34, 31, 37,245,246,246,246,235
  .DB 239,240,236,246,246,244,245,246,246,235,239,240, 38, 31, 31, 31
  .DB  31, 31, 31,  2,  2, 31, 31, 31, 37, 63, 63,241,240,239,239, 63
  .DB  38, 31, 31, 31,  2,  0, 31, 31, 34, 31,  2,  2,  2,  2, 31, 31
  .DB  31, 31,  0,  2,  2, 31, 31,  2,  2,  2, 31, 31,  2,  2,  2, 33
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31, 31, 31,  2,  2,  2
  .DB  31, 31,119,120,121, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31,119,120,120,120,121, 31, 31
  .DB 119,120,120,120,121, 31, 31,  0,  1,  1,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0, 31, 31, 31, 31, 31
  .DB  34, 31,  0,  0,  1,  1,  0,  0, 31, 34, 33, 31, 31, 31, 31, 31
  .DB  34, 31, 31, 31, 31, 31, 31, 31, 31,  0,  0,  0,  0, 31, 31, 31
  .DB  34, 34, 31, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31,151,151,151, 33, 31,152,152,152, 31, 31, 31,152, 31, 31, 34
  .DB  33, 31, 31, 31,152, 31, 31, 32,152, 31,152, 31, 31, 31,152, 31
  .DB 152, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31
  .DB  31,214,214,214, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  0, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 33, 31, 31, 37,122,123, 38, 31,  0, 31, 31, 31,  0,  1
  .DB   2, 31, 37,122,123, 38, 31, 32, 31, 31, 31, 31, 31,  2,  2,  2
  .DB   2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 34
  .DB  31, 31, 31, 31, 31, 31, 34, 31, 31, 31,152, 31, 34, 31, 31, 34
  .DB  34, 31, 31, 34, 31, 34, 31,214, 31, 31, 31,  0, 31, 32, 32, 31
  .DB  31, 31, 34, 34, 31, 31, 31,  0, 31, 31, 33, 33, 31, 37,242,242
  .DB 242,242,242,242,242,242,242,242,242,242, 38, 34, 31,  2,  2, 31
  .DB  31, 31, 31, 34, 34,214, 31, 31, 31, 34, 31,214, 31, 34, 31, 31
  .DB  34,214, 31, 34, 31, 31, 34,214, 31, 34, 31, 37,242,242,242,242
  .DB 242,242,242,242,242,242,242,242,242,242,242,242,242,242, 38, 31
  .DB  31, 34, 31, 34, 31, 34, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 31, 31, 34, 33, 33, 31, 34, 31, 31, 31, 31, 31, 31, 31, 32
  .DB  31, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 37,246,235,236,235,241
  .DB  63,241,240,236,231,232,235,236,235,239,241,239, 38, 31, 34, 34
  .DB  31, 31,  2,  2,  2, 32, 31, 31,151,151,151, 63, 63,241,151,151
  .DB 151, 31, 31, 31,  2,  0,  0, 31, 31, 34, 31, 31, 31, 31, 31, 31
  .DB  31,  0,  0,  2,  2, 31, 31,  2,  2,  2, 31, 31,  2,  2,  2, 33
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31, 31, 31,  2,  2,  2
  .DB  31, 31,  2,  2,  2, 31, 31, 31,119,120,121, 31, 34, 31, 31, 34
  .DB  31, 31,119,120,120,120,121, 31, 31,  2,  2,  2,  2,  2, 31, 31
  .DB   2,  2,  2,  2,  2, 31, 31,  0,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 31, 35, 35, 31, 31
  .DB  33, 31, 31,  0,  0,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  33, 34, 32, 31, 34, 31, 31,214,214,214, 31, 33, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 33, 31, 31, 31, 31, 31, 31, 31,151, 31,151, 31
  .DB  33, 33,151, 31,151, 31, 31, 31,151, 31,151, 31,151, 31,151, 31
  .DB 151, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,211
  .DB 211,211, 31, 31, 31, 31, 31,  0,  1,  0, 31, 31, 31, 31, 31, 32
  .DB  32, 31, 31, 31, 31, 37,122,123, 38, 31,  0, 31, 31,  0,  0,  1
  .DB   2, 31, 37,122,123, 38, 34, 31, 31, 32, 31, 31, 31, 31, 31, 31
  .DB  31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31
  .DB  31, 31, 31, 31, 33, 31, 33, 31,211, 31, 33, 31, 31, 34, 31, 31
  .DB  31,214, 31, 31, 31, 31, 31, 31, 31, 32, 31, 34, 31, 34, 31, 34
  .DB  31, 34, 31, 34, 31, 34, 31, 31, 33, 33, 31, 31, 31, 32, 31, 31
  .DB  31, 34, 31, 33, 31, 34, 31, 31, 31, 33, 33, 34, 31, 37,179,179
  .DB 179,179,179,179,179,179,179,179,179,179, 38, 31, 31,  2,  2, 31
  .DB  31, 31, 34, 31, 31,214, 31,214, 31, 31, 31,214, 31, 31, 31, 34
  .DB  31,214, 31, 31, 31,214, 34,214, 31, 31, 31, 37,179,179,179,179
  .DB 179,179,179,179,179,179,179,179,179,179,179,179,179,179, 38, 34
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31,119,120
  .DB 121, 31, 31, 31, 31, 33, 31, 31, 31, 31, 34, 31, 31, 31, 31, 32
  .DB  32, 32, 31, 31, 31, 31, 32, 31, 31, 31, 32, 34, 32, 31, 31, 32
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 37,233,239,240,238, 63
  .DB  63, 63, 63,241,241,239,241,240,238,241, 63, 63, 38, 34, 31, 34
  .DB  31,  2,  2,  2,  2, 31, 31, 31, 37,242,242,242,242,242,242,242
  .DB  38, 31, 34, 31,  2,  0,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31
  .DB   0,  0,  0,  2,  2, 31, 31,  2,  2,  2, 31, 31,  2,  2,  2, 31
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31, 31, 31,  2,  2,  2
  .DB  31, 31,  2,  2,  2, 31, 31, 31,  2,  2,  2, 31, 34,119,120,121
  .DB  31, 31,  2,  2,  2,  2,  2, 31, 31,  2,  2,  2,  2,  2, 31, 31
  .DB   2,  2,  2,  2,  2, 31, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0, 37,122,123, 38, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  0,  0,  0,  0, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 33, 31, 31, 34, 34, 31, 31,211, 31,211, 31,211, 31
  .DB  34, 33,211, 31,211, 31,211, 31,211, 31,211, 31,211, 31,211,211
  .DB 211, 31, 31,214,214,214, 31, 31, 31, 31, 34, 34, 31, 31, 31, 32
  .DB  31, 31, 31, 31, 31, 34, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  0, 31, 31,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31, 31,  0,  1,  1
  .DB   2,  2,  2,  2,  2,  2,  2, 31, 31, 32, 33, 32, 31, 31, 33, 31
  .DB  31, 31, 31, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2, 31, 31, 31, 33, 31, 31, 31, 33, 31, 31, 31, 34, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 32, 31, 34, 34, 34, 31, 34
  .DB  34, 31, 31, 34, 34, 34, 31, 31, 33, 31, 31, 33, 33, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 36, 36
  .DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 34, 31, 31,  2,  2,  0
  .DB   0,  0, 31,214, 31,214, 31,214, 31,214, 31,214, 31,214, 31, 31
  .DB  31,214, 31,214, 31,214, 34,214, 31,214, 31, 31, 36, 36, 36, 36
  .DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 31, 34
  .DB  34, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31,  0,  0
  .DB   0, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 32, 32,  2,  2,  2,  2, 31, 34, 31, 37,242,242,242,242,242
  .DB 242,242,242,242,242,242,242,242,242,242,242,242, 38, 31, 31, 31
  .DB   2,  2,  2,  2,  2,  2,  2, 31, 37,179,179,179,179,179,179,179
  .DB  38, 31,  2,  2,  2,  0,  0,  0,  0, 31, 31, 31, 34, 31, 31,  0
  .DB   0,  0,  0,  2,  2, 31, 31,  2,  2,  2, 31, 34,  2,  2,  2, 31
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31, 31, 31,  2,  2,  2
  .DB  31, 31,  2,  2,  2, 31, 31, 31,  2,  2,  2, 31, 31,  2,  2,  2
  .DB  31, 31,  2,  2,  2,  2,  2, 31, 34,  2,  2,  2,  2,  2, 31, 31
  .DB   2,  2,  2,  2,  2, 31, 34, 37,232,231, 38, 37,231,232, 38, 37
  .DB 232,232, 38,  0,  1,  1,  1,  1,  1,  1,  0, 37,122,123, 38, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  0,  0,  0,  1,  0, 31
  .DB  31,119,120,120,121, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33
  .DB  31,119,120,120,121, 31, 31, 31, 31, 31, 31, 31,211,211,211, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31,214, 34,214,214,214, 31
  .DB 214, 31,214,214,214, 34,214, 31,214,214,214, 32,214, 31,214,214
  .DB 214, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  32, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31, 31, 31, 34, 31, 31, 31,  0,  1,  0, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 31, 34,  0,  0,  1
  .DB   2,  0,  0,  0,  0,  0,  2,  2,  2, 31, 31, 31, 31, 32, 31, 31
  .DB  31, 31, 31, 31,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  2,  2, 31, 31,214, 31, 31, 31, 33, 33, 31, 31, 31, 31, 31
  .DB  31, 31, 33, 31, 31, 31, 31,151, 31, 31, 31, 34, 31, 34, 31, 34
  .DB  31, 34, 31, 34, 31, 34, 31, 31, 33,  2,  2, 32,  2, 31,  2, 31
  .DB   2, 31,  2, 31,  2, 31,  2, 31,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2
  .DB   2,  0, 31,214, 31,214, 31,214, 31,214, 31,214, 31,214, 31,214
  .DB  31,214, 34,214, 31,214, 31,214, 31,214, 31, 34,119,120,120,120
  .DB 120,120,120,121, 31, 31,119,120,120,120,120,120,120,121, 31, 31
  .DB  31, 34, 31, 31, 31, 31, 34, 31, 31,119,120,120,121, 31, 31, 31
  .DB  31, 31,119,120,120,121, 31, 31, 31, 34, 31, 31,  2,  2,  2,  2
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31,  2
  .DB  31,  2, 32,  2,  2,  2,  2,  2, 31, 31, 31, 36, 36, 36, 36, 36
  .DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 31, 31, 31,  2
  .DB   2,  2,  2,  2,  2,  2,  2, 34, 31, 36, 36, 36, 36, 36, 36, 36
  .DB  31, 31,  2,  2,  2,  0,  0,  0,  0,  0, 31, 31, 31, 31,  0,  0
  .DB   0,  0,  0,  2,  2, 34, 31,  2,  2,  2, 31, 31,  2,  2,  2, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  33, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31
  .DB  31, 31, 31, 33, 31, 31, 31, 37,242,242, 38, 37,242,242, 38, 37
  .DB 242,242, 38,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0
  .DB   0, 31, 31, 34, 31, 31, 34, 31, 31,  0,  0,  1,  1,  1,  0, 31
  .DB  31,  2,  2,  2,  2, 33, 31, 31,119,120,120,120,120,121, 31, 31
  .DB  31,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31
  .DB  31,  0,  0,  0, 31, 31,  0,  0,  0, 31,152, 31,152,152,152, 31
  .DB 152, 34,152,152,152, 31,152,152,152,152,152, 34,152,152,152,152
  .DB 152, 31, 34, 34, 31, 31, 31, 31, 31, 31, 31,211,211,211, 31, 32
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31,152,152,152, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  1,  0, 31, 31, 31, 34, 33, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31,  0,  1
  .DB   2,  0, 31, 31, 31,  0,  0,  0,  2,  2,  2, 34, 31, 31, 31, 31
  .DB  31, 31, 31,  2,  2,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB   0,  2,  2, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 31,152, 31
  .DB  31, 31, 31, 31, 34, 31, 31, 32, 32, 31, 31, 34, 31, 34, 31, 34
  .DB  31, 34, 31, 34, 31, 34, 31, 34, 31,  2,  2, 32,  2, 31,  2, 31
  .DB   2, 31,  2, 31,  2, 31,  2, 31,  0,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  0, 34,214, 31,214, 31,214, 31,214, 34,214, 31,214, 31,214
  .DB  31,214, 31,214, 31,214, 31,214, 31,214, 31,  0,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2
  .DB   2,  2,  2,  2,  2,  2,  2, 31, 31,  0,  0,  0,  0, 31, 31, 34
  .DB  31, 31,  0,  0,  0,  0, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2
  .DB  31,  2, 31,  2, 31,  2, 32,  2, 31,  2, 31,  2, 31,  2, 31,  2
  .DB  31,  2, 31,  2,  2,  2,  2,  2,  2, 31,151,151,151, 31,151,151
  .DB 151, 31,151,151,151, 31,151,151,151, 31,151,151,151, 31,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2, 31,119,120,120,120,120,120,120,120
  .DB 121, 32,  2,  2,  2,  0,  0,  0,  0,  0,  0, 31, 31,  0,  0,  0
  .DB   0,  0,  0,  2,  2, 31, 31,  2,  2,  2, 31, 31,  2,  2,  2, 31
  .DB  34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 34, 31, 31, 31, 31
  .DB  31, 34, 31, 31, 31, 34, 31, 31, 34, 31, 31, 31, 34, 31, 31, 31
  .DB  33, 33, 33, 31, 31, 31, 31, 31, 36, 36, 31, 31, 36, 36, 31, 31
  .DB  36, 36, 31,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   0,  0, 31, 31, 31, 31, 31, 31,  0,  0,  1,  1,  1,  1,  0, 31
  .DB  31, 31, 31, 31, 31, 31, 33, 31,  2,  2,  2,  2,  2,  2, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31,  0,  0,  0, 31, 33, 34, 31, 31, 31
  .DB  31,  0,  1,  0, 34, 31,  0,  1,  0, 31,151,151,151,151,151, 34
  .DB 151,151,151,151,151, 31,151,151,151,151,151, 31,151,151,151,151
  .DB 151, 31, 31, 34, 34,151,151,151, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31,  0,  0,  0,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31,214,214,214, 31, 31, 31,  0,  1,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1
  .DB   2,  0, 31, 31, 31, 31, 31,  0,  0,  0,  2,  2,  2, 31,  0,  0
  .DB   0, 31,  2,  2,  0,  0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB   0,  2,  2, 31, 34, 31, 31, 31, 33, 31, 31, 31, 34, 34, 31, 31
  .DB  31, 32, 31, 31, 34, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31,  2,  2, 31,  2, 31,  2, 31
  .DB   2, 31,  2, 31,  2, 31,  2, 31,  0,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB   2,  0, 31,  0,  0,  0, 31,  0,  0,  0, 34,  0,  0,  0, 31,  0
  .DB   0,  0, 31,  0,  0,  0, 31,  0,  0,  0, 31,  0,  0, 31, 34, 31
  .DB  31, 31, 31,  0,  0,  0,  0, 31, 31, 31, 31, 31, 31,  0,  0,  2
  .DB   2,  2,  2,  2,  2,  2,  2,  2, 34, 31, 31, 31, 34, 34, 31, 31
  .DB  31, 31, 31, 31, 34, 31, 31,  2,  2,  2,  2,  2,  2,  2,  2,  2
  .DB  31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 31,  2, 32,  2, 31,  2
  .DB  31,  2, 31,  2,  2,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31,  2,  2
  .DB   2,  2,  2,  2,  2,  2,  2, 31,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0, 31,  2,  2,  2,  0,  0,  0,  0,  0,  0, 34, 31,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31
  .DB  33, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0, 34
  .DB  31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31
  .DB  31, 31, 31, 31, 34, 31, 31,  0,  1,  0, 33, 33, 33, 33, 31, 33
  .DB  31,  0,  1,  0, 31, 31,  0,  1,  0, 31,214,214,214,214,214, 31
  .DB 214,214,214,214,214, 31,214,214,214,214,214, 31,214,214,214,214
  .DB 214, 34, 31, 34, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 31
  .DB  31,  0,  2,  2,  2,  0, 31, 34, 34, 31, 31, 31, 34, 31, 31, 31
  .DB  31, 31, 31, 31, 31, 31, 34,  0,  1,  1,  1,  1,  1,  1,  1,  1
  .DB   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1

;-----------------------------
.ORG    H'98A0
castle_data:
.DB     H'FF    ; CC0
.DB     H'17    ; CC01
.DB     H'00    ; CC02
.DB     H'10    ; CC03
.DB     H'17    ; CC11
.DB     H'11    ; CC12
.DB     H'1B    ; CC13
.DB     H'17    ; CC21
.DB     H'37    ; CC22
.DB     H'16    ; CC23
.DB     H'17    ; CC31
.DB     H'1A    ; CC32
.DB     H'00    ; CC33

.DB     H'32    ; CCS11              ;enemy 1
.DB     H'24    ; CCS12
.DB     H'14    ; CCS13
.DB     H'33    ; CCS21              ;enemy 2
.DB     H'22    ; CCS22
.DB     H'12    ; CCS23


.DB     H'01    ; E_POWER
.DB     H'01    ; E_PAL
.DB     H'06    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'02    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     212     ; E_STAGE0
.DB     216     ; E_STAGE1
.DB     220     ; E_STAGE2
.DB     224     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'01    ; E_PAL
.DB     H'06    ; E_ATIME
.DB     H'02    ; E_IXV
.DB     H'01    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     212     ; E_STAGE0
.DB     216     ; E_STAGE1
.DB     220     ; E_STAGE2
.DB     224     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'02    ; E_PAL
.DB     H'08    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'02    ; E_IYV
.DB     DBOMB   ; E_MTYPE
.DB     6*4     ; E_STAGE0
.DB     7*4     ; E_STAGE1
.DB     8*4     ; E_STAGE2
.DB     7*4     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'02    ; E_PAL
.DB     H'02    ; E_ATIME
.DB     H'02    ; E_IXV
.DB     H'02    ; E_IYV
.DB     HOP     ; E_MTYPE
.DB     228     ; E_STAGE0
.DB     232     ; E_STAGE1
.DB     236     ; E_STAGE2
.DB     240     ; E_STAGE3

.DB     T_SHIELD+7; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     230     ; ITM_X
.DB     10      ; ITM_Y

.DB     T_SHIELD+8; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     1       ; ITM_PAGE
.DB     202     ; ITM_X
.DB     9       ; ITM_Y

.DB     T_CROWN ; ITM_ID
.DB     T_CROWN ; ITM_TYPE
.DB     11*4    ; ITM_SHP
.DB     H'37    ; ITM_C1
.DB     H'27    ; ITM_C2
.DB     H'17    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     H'9D    ; ITM_X
.DB     2       ; ITM_Y
;.DB     H'BB    ; ITM_X
;.DB     4       ; ITM_Y

.DB     0       ; DOOR_PAGE
.DB     9       ; DOOR_X
.DB     6*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD              ; Left of C0
.DB     0       ; DOOR_TPAGE
.DB     H'D4    ; DOOR_TX
.DB     9*16+16 ; DOOR_TY
.DB     4*DOOR_SIZE ; DOOR_TDOOR

.DB     0       ; DOOR_PAGE
.DB     H'93    ; DOOR_X
.DB     4*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     H'FB    ; DOOR_TX
.DB     7*16+16 ; DOOR_TY
.DB     6*DOOR_SIZE ; DOOR_TDOOR

.DB     0       ; DOOR_PAGE
.DB     H'98    ; DOOR_X
.DB     9*16+16 ; DOOR_Y
.DB     1       ; DOOR_TWORLD
.DB     0       ; DOOR_TPAGE
.DB     6       ; DOOR_TX
.DB     9*16+16 ; DOOR_TY
.DB     0*DOOR_SIZE ; DOOR_TDOOR

.DB     0       ; DOOR_PAGE
.DB     H'CE    ; DOOR_X
.DB     4*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     H'85    ; DOOR_TX
.DB     5*16+16 ; DOOR_TY
.DB     5*DOOR_SIZE ; DOOR_TDOOR

.DB     0       ; DOOR_PAGE
.DB     H'D4    ; DOOR_X
.DB     9*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD
.DB     0       ; DOOR_TPAGE
.DB     9       ; DOOR_TX
.DB     6*16+16 ; DOOR_TY
.DB     0*DOOR_SIZE ; DOOR_TDOOR

.DB     1       ; DOOR_PAGE
.DB     H'85    ; DOOR_X
.DB     5*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD
.DB     0       ; DOOR_TPAGE
.DB     H'CE    ; DOOR_TX
.DB     4*16+16 ; DOOR_TY
.DB     3*DOOR_SIZE ; DOOR_TDOOR

.DB     1       ; DOOR_PAGE
.DB     H'FB    ; DOOR_X
.DB     7*16+16 ; DOOR_Y
.DB     8       ; DOOR_TWORLD
.DB     0       ; DOOR_TPAGE
.DB     H'93    ; DOOR_TX
.DB     4*16+16 ; DOOR_TY
.DB     1*DOOR_SIZE ; DOOR_TDOOR

.DB     0,0,0,0,0,0,0,0

.DB     H'17    ; DC1
.DB     H'00    ; DC2
.DB     H'10    ; DC3
.DB     6       ; FT_TILE

.ORG    H'9940
castle_map:
  .DB   3,  4, 16, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  16, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 16,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  6,  7,  8
  .DB   9,  6,  7,  8,  9,  6,  7,  8,  9,  6,  7,  8,  9, 21, 16,  0
  .DB   0,  0, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  16,  1,  4,  1,  3,  1,  2,  4,  1,  4,  1,  2,  3,  1,  4,  1
  .DB   3,  1,  3,  1,  3, 21, 21,  6,  7,  8,  9, 21, 21,  6,  7,  8
  .DB   9, 21, 16,  1,  2,  3,  2,  3,  2,  2,  4,  3, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21,  6,  7,  8,  9, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 32
  .DB  32, 32, 32, 32, 29, 21, 28, 32, 32, 32, 32, 32, 29, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,245, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21,245, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 44, 21, 21, 21, 21
  .DB  44, 21, 21, 21, 21, 21, 44, 21, 21, 21, 21, 21, 44, 21, 21, 21
  .DB  21, 44, 21, 21, 21, 21, 21, 21, 21, 21,251,  6,  7,  8,  9, 21
  .DB  21,  6,  7,  8,  9,251, 21, 44, 21, 21, 21, 21, 44, 21, 21, 21
  .DB  21, 44, 21, 21, 16,  1,  3,  2,  3,  2,  3, 21, 21, 21, 16, 10
  .DB  11, 28, 32, 32, 29, 21, 21, 28, 32, 32, 16, 10, 11,  3,  4, 21
  .DB  28, 32, 32, 29, 21, 28, 32, 32, 29, 21, 28, 32, 32, 29, 21, 21
  .DB  21, 21,  6,  7,  8,  9, 21, 21, 21, 21, 21, 21,  6,  7,  8,  9
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21,  6,  7,  8,  9, 21, 21, 21, 21, 21,  6,  7,  8,  9
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  6,  7
  .DB   8,  9, 21,  6,  7,  8,  9,  6,  7,  8,  9, 21,  6,  7,  8,  9
  .DB  28, 32, 32, 29, 21, 28, 32, 32, 29, 21, 28, 32, 32, 29, 16,  0
  .DB   2,  3, 16, 10, 11, 21, 21, 21,245, 21, 21,245, 21, 21, 21, 21
  .DB  16, 10, 11, 21,  6,  7,  8,  9, 21,  6,  7,  8,  9, 21,  6,  7
  .DB   8,  9, 21,  6,  7,  8,  9, 21,  6,  7,  8,  9, 21, 21, 16,  0
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
  .DB  24, 24, 24, 63, 10, 11, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63
  .DB  10, 11, 24, 24, 24, 24, 24, 24, 24, 24, 22, 21, 21, 21, 21, 21
  .DB 251, 21, 21, 21, 21, 21,251, 21, 21, 21, 21, 21,251, 12, 14, 14
  .DB  15, 12, 14, 14, 15, 12, 14, 14, 15, 12, 14, 14, 15,251, 16,  0
  .DB   0,  0, 21, 21, 21, 21, 21, 21, 56, 58, 21, 21, 21, 21, 21, 21
  .DB  16, 61, 62, 61, 62, 61,  4,  1,  2,  4,  1,  4,  1,  3,  1,  3
  .DB   1,  4,  1,  3,  4, 21,251, 12, 14, 36, 15, 21, 21, 12, 36, 38
  .DB  15,251, 16,  1,  3,  2,  3,  2,  3,  1,  3,  4, 21, 21, 21, 21
  .DB  21, 44, 21, 21, 21, 21, 21, 21, 44, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21,251, 21, 21, 21, 12, 36, 14, 15, 21, 21, 21
  .DB 251, 21, 21, 21, 21, 21, 21, 21, 21,251, 21, 21, 21, 21, 30, 42
  .DB  42,105,171,171, 31,238, 30,104, 42,171,105,105, 31, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 45, 21, 21, 21, 21
  .DB  45, 21, 21, 21, 21, 21, 45, 21, 21, 21, 21, 21, 45, 21, 21, 21
  .DB  21, 45, 21, 21, 21, 21, 21, 21, 21, 21, 60, 12, 14, 38, 15, 21
  .DB  21, 12, 37, 14, 15, 60, 21, 45, 21, 21, 21, 21, 45, 21, 21, 21
  .DB  21, 45, 21, 21, 16,  3,  1,  3,  2,  3,  4,  5, 21, 21, 16, 10
  .DB  11, 21,240,241, 21, 21, 21, 21,240,241, 16, 10, 11,  4,  3, 21
  .DB  21,240,241, 21, 21, 21,240,241, 21, 21, 21,240,241, 21, 21, 21
  .DB 238, 21, 12, 36, 38, 15, 28, 32, 32, 32, 32, 29, 12, 37, 38, 15
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  6,  7
  .DB   8,  9, 21, 12, 36, 14, 15, 21,  6,  7,  8,  9, 12, 14, 38, 15
  .DB  28, 32, 32, 29, 21, 21, 21, 21, 21, 21, 28, 32, 32, 29, 12, 36
  .DB  14, 15, 21, 12, 14, 36, 15, 12, 37, 14, 15, 21, 12, 36, 38, 15
  .DB  21,240,241, 21, 21, 21,240,241, 21, 21, 21,240,241, 21, 16,  0
  .DB   1,  3, 16, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  16, 10, 11, 21, 12, 14, 37, 15, 21, 12, 14, 14, 15, 21, 12, 14
  .DB  14, 15, 21, 12, 37, 14, 15, 21, 12, 14, 38, 15, 21, 21, 16,  0
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 63, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63
  .DB  10, 11, 21, 21, 21, 56, 57, 57, 58, 21, 21, 21, 21, 21, 21, 21
  .DB  60, 21, 21, 21, 21, 21, 60, 21, 21, 21, 21, 21, 60, 12, 14, 14
  .DB  15, 12, 14, 38, 15, 12, 14, 14, 15, 12, 14, 14, 15, 60, 16,  0
  .DB   0,  0, 28, 32, 32, 29, 44, 21, 21, 21, 21, 44, 21,251, 21, 21
  .DB  16, 62, 61, 62, 61, 62, 61,  4,  3,  1,  4,  1,  4, 62, 61, 62
  .DB  61, 62, 61, 62, 62, 21, 60, 12, 38, 98, 15,245,245, 12, 99, 36
  .DB  15, 60, 16,  1,  2,  3,  4,  2,  2,  3,  1,  3, 21, 28, 32, 32
  .DB  29, 45, 21, 21, 56, 58, 21, 21, 45, 21, 21, 21,251, 21, 21,  6
  .DB   7,  8,  9, 21, 21, 60, 21, 21, 21, 12, 38, 37, 15, 21, 21, 21
  .DB  60, 21, 21,  6,  7,  8,  9, 21, 21, 60, 21, 21, 21,238, 30, 42
  .DB 171,105,105,105, 31,238, 30,171,105,105, 42,171, 31,238, 21, 23
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 21
  .DB  21, 23,  5,  5,  5, 21, 21, 21, 23,  5,  5,  5,  5,  5,  5,  5
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 36, 14, 15, 21
  .DB  21, 12, 36, 38, 15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 16,  1,  4,  2,  3,  2,  3,  0,  5, 21, 16, 10
  .DB  11, 21,242,243, 21, 56, 58, 21,242,243, 16, 10, 11,  3,  4, 21
  .DB  21,242,243, 21,251, 21,242,243, 21,251, 21,242,243, 21, 21, 21
  .DB 238, 21, 12, 37, 14, 15, 30,105,105,171,104, 31, 12, 36, 14, 15
  .DB  28, 32, 32, 29, 21, 28, 32, 32, 29, 21, 28, 32, 32, 29, 12, 14
  .DB  37, 15, 21, 12, 14, 37, 15, 21, 12, 14, 14, 15, 12, 38, 14, 15
  .DB  21,240,241, 21, 44, 28, 32, 32, 29, 44, 21,240,241, 21, 12, 37
  .DB  36, 15, 21, 12, 98, 99, 15, 12, 14, 36, 15, 21, 12, 38, 14, 15
  .DB  21,242,243, 21, 21, 21,242,243, 21, 21, 21,242,243, 21, 16,  0
  .DB   4,  3, 16, 10, 11, 21, 21, 21, 56, 57, 57, 58, 21, 21, 21, 21
  .DB  16, 10, 11, 21, 12, 38, 14, 15, 21, 12, 14, 36, 15, 21, 12, 99
  .DB  36, 15, 21, 12, 14, 14, 15, 21, 12, 38, 14, 15, 21, 21, 16,  0
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 23,  5,  5,  5
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 21
  .DB  21,251, 21, 63, 10, 11, 21, 21, 44, 21, 21, 21, 21, 44, 21, 63
  .DB  10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 38, 14
  .DB  15, 12, 36, 14, 15, 12, 36, 14, 15, 12, 14, 38, 15, 21, 16,  0
  .DB   0,  0, 30, 26, 27, 31, 45, 21, 21, 21, 21, 45, 21, 55, 21, 21
  .DB  16,  3,  4, 61, 62, 61, 62, 61,  4, 61, 62, 61, 62, 61, 62, 61
  .DB  62, 61, 62, 61, 62, 21, 21, 12, 98, 97, 15, 21, 21, 12, 97, 99
  .DB  15, 21, 16,  1,  3,  1,  4,  1,  3,  1,  3,  4, 21, 30, 26, 27
  .DB  31, 21, 21, 56, 57, 57, 58, 21, 21, 21, 21, 21, 60, 21, 21, 12
  .DB  36, 38, 15, 21, 21, 21, 21, 21, 21, 12, 36, 38, 15, 21, 21, 21
  .DB  21, 21, 21, 12, 36, 37, 15, 21, 21, 21, 21, 21, 21,238, 30,105
  .DB 105, 42,171,104, 31,238, 30,105,171, 42,105,171, 31,238, 21, 16
  .DB   0, 24, 24, 24, 24, 24, 24, 24, 63,  0, 24, 24, 24, 22, 21, 21
  .DB  23,  5,  0,  0,  0,  5, 21, 21, 17, 24, 24, 24, 63,  0, 24, 24
  .DB  24, 24, 63, 10, 11, 21, 21, 21, 21, 21, 23,  5,  5, 21, 23,  5
  .DB   5,  5, 21, 21, 23,  5,  5,  5, 21, 21, 23,  5,  5,  5, 21, 23
  .DB   5,  5, 21, 23,  5,  5, 21, 21, 21, 21, 21, 12, 38, 37, 15, 21
  .DB  21, 12, 14, 36, 15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 16,  4,  1,  3,  1,  3,  3,  0,  0,  5, 16, 10
  .DB  11, 21,244,239, 28, 32, 32, 29,244,239, 16, 10, 11,  4,  3, 21
  .DB  21,242,243, 21, 60, 21,242,243, 21, 60, 21,242,243, 21, 21, 21
  .DB 153, 21, 12, 38, 36, 15, 30,104,105,105, 42, 31, 12, 38, 36, 15
  .DB  21,240,241, 21, 21, 21,240,241, 21, 21, 21,240,241, 21, 12, 36
  .DB  14, 15, 21, 18, 19, 19, 20, 21, 12, 38, 14, 15, 12, 14, 37, 15
  .DB  21,242,243, 21, 45, 21,240,241, 21, 45, 21,242,243, 21, 12, 38
  .DB  98, 15, 21, 12, 97, 97, 15, 12, 99, 38, 15, 21, 12, 14, 36, 15
  .DB  21,242,243, 21, 21, 21,242,243, 21, 21, 21,242,243, 21, 16,  0
  .DB   1,  3, 16, 10, 11, 21,251, 21, 28, 32, 32, 29, 21,251, 21, 21
  .DB  16, 10, 11, 21, 12, 36, 14, 15, 21, 12, 38, 98, 15, 21, 12, 97
  .DB  99, 15, 21, 12, 14, 38, 15, 21, 12, 37, 36, 15, 21, 21, 17, 24
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 63,  0, 21, 17, 24, 24, 24
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63,  0,  5, 21
  .DB  21, 60, 21, 63, 10, 11, 21, 21, 45, 21, 21, 21, 21, 45, 21, 63
  .DB  10, 11, 23,  5,  5,  5,  5,  5,  5,  5,  5, 21, 21, 21, 21, 21
  .DB  23,  5,  5,  5, 21, 21, 21, 21, 23,  5,  5, 21, 21, 12, 14, 36
  .DB  15, 12, 14, 14, 15, 12, 14, 14, 15, 12, 14, 14, 15, 21, 16,  0
  .DB   0,  0, 30, 26, 27, 31, 21, 21, 21, 21, 21, 21, 21, 54, 21, 21
  .DB  16,  1,  3,  4, 61, 62, 61, 62, 61, 62, 61, 62, 61, 62, 61, 62
  .DB  61, 62, 61, 62, 62,  5, 21, 18, 19, 19, 20, 21, 21, 18, 19, 19
  .DB  20, 23,  5,  1,  2,  4,  1,  3,  2,  3,  1,  3, 21, 30, 26, 27
  .DB  31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12
  .DB  38, 37, 15, 23,  0,  0,  0,  0,  0, 12, 37, 98, 15, 23,  0,  0
  .DB   0,  0,  0, 12, 99, 36, 15, 23,  0,  0,  0, 21, 21,153, 30, 42
  .DB 171,171, 42,171, 31,153, 30, 42,171,104, 42,105, 31,153, 21, 16
  .DB   0, 21, 21, 21, 21, 21, 21, 21, 63,  0, 21, 21, 21, 21, 21, 23
  .DB   5,  0,  0,  0,  0,  0,  5, 21, 21, 21, 21, 21, 63,  0, 21, 21
  .DB  21, 21, 63, 10, 11, 21, 21, 21, 21, 21, 17, 24, 22, 21, 17, 24
  .DB  24, 22, 21, 21, 17, 24, 24, 22, 21, 21, 17, 24, 24, 22, 21, 17
  .DB  24, 22, 21, 17, 24, 22, 21, 23,  5,  5,  5, 18, 19, 19,238, 21
  .DB  21,238, 19, 19, 23,  5,  5,  5, 21, 23,  5,  5, 21, 23,  5,  5
  .DB  21, 21, 21, 21, 16,  1,  4,  1,  3,  1,  3,  3,  0,  0,  5, 10
  .DB  11, 21, 21, 21, 30, 26, 27, 31, 21, 21, 16, 10, 11,  3,  4, 21
  .DB  21,244,239, 21, 21, 21,242,243, 21, 21, 21,244,239, 21, 23,  5
  .DB   5,  5, 12, 14, 38, 15, 30,105,171, 42,171, 31, 12, 36, 14, 15
  .DB  21,242,243, 21, 21, 21,242,243, 21, 21, 21,242,243, 21, 18, 19
  .DB  19, 20, 21,245, 21, 21,245, 21, 18, 19, 19, 20, 12, 36, 14, 15
  .DB  21,242,243, 21, 21, 21,242,243, 21, 21, 21,242,243, 21, 12, 98
  .DB  97, 15, 21, 18, 19, 19, 20, 18, 19, 19, 20, 21, 12, 36, 38, 15
  .DB  21,244,239, 21, 21, 21,242,243, 21, 21, 21,244,239, 21, 16,  0
  .DB   1,  4, 16, 10, 11, 21, 60, 21, 30, 26, 27, 31, 21, 60, 21, 21
  .DB  16, 10, 11, 21, 12, 99, 38, 15, 21, 12, 98, 97, 15, 21, 12, 97
  .DB  97, 15, 21, 12, 36, 14, 15, 21, 12, 99, 38, 15, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 63,  0, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63,  0,  0,  5
  .DB  21, 21, 21, 63, 10, 11, 21, 21, 28, 32, 32, 32, 32, 29, 21, 63
  .DB  10, 11, 17, 24, 24, 24, 24, 24, 24, 24, 22, 21, 21, 21, 21, 21
  .DB  17, 24, 24, 22, 21, 21, 21, 21, 16,  0,  0, 21, 21, 12, 14, 38
  .DB  15, 12, 14, 14, 15, 12, 38, 14, 15, 12, 14, 14, 15, 21, 16,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  2,  3,  4, 61, 62, 61, 62, 61, 62, 61,  4,  1,  4,  1
  .DB   4, 61, 62, 62,  4,  0,  5, 21, 21, 21, 21, 55, 55, 21, 21, 21
  .DB  23,  5,  0,  1,  3,  1,  3,  1,  3,  1,  3,  3,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12
  .DB  37, 36, 15, 17, 24, 24, 24, 24, 22, 12, 98, 97, 15, 17, 24, 24
  .DB  24, 24, 22, 12, 97, 97, 15, 17, 24, 24, 22, 23,  5,  5,  5,  5
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  .DB   5,  5,  5,  5,  5, 21, 21, 23,  5,  5,  5,  5,  5,  5,  5,  5
  .DB   0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5,  5,  5,  5,  5
  .DB   5, 21, 63, 10, 11, 28, 32, 32, 32, 32, 29,  6,  7,  8,  9, 21
  .DB  21,  6,  7,  8,  9, 21, 21,  6,  7,  8,  9, 21, 21,  6,  7,  8
  .DB   9, 21, 28, 32, 32, 32, 29, 17, 63, 10, 11,  5, 21, 21,238, 21
  .DB  21,238, 21, 23,  5, 10, 11, 22, 21, 17, 24, 22, 21, 17, 24, 22
  .DB  21, 21, 23,  5,  5,  3,  1,  4,  1,  3,  1,  3,  3,  0,  0,  5
  .DB  11, 21, 21, 21, 30, 26, 27, 31, 21, 21, 16, 10, 11,  4,  3, 21
  .DB  21, 21, 21, 21, 21, 21,244,239, 21, 21, 21, 21, 21, 21, 17, 24
  .DB  24, 22, 18, 19, 19, 20, 30,171,104, 42,105, 31, 18, 19, 19, 20
  .DB  21,244,239, 21, 21, 21,242,243, 21, 21, 21,244,239, 21, 21, 21
  .DB  21, 21, 21, 56, 57, 57, 58, 21, 21, 21, 21, 21, 12, 38, 36, 15
  .DB  21,244,239, 21, 21, 21,242,243, 21, 21, 21,244,239, 21, 12, 97
  .DB  97, 15,251, 21, 21, 21, 21, 21, 21, 21, 21,251, 12, 37, 98, 15
  .DB  21, 21, 21, 21, 21, 21,244,239, 21, 21, 28, 32, 32, 29, 16,  0
  .DB   4,  3, 16, 10, 11, 21, 21, 21, 30, 26, 27, 31, 21, 21, 21, 21
  .DB  16, 10, 11, 21, 12, 97, 99, 15, 21, 12, 97, 97, 15, 21, 12, 97
  .DB  97, 15, 21, 12, 38, 98, 15, 21, 12, 97, 99, 15, 21, 21, 23,  5
  .DB   5, 21, 21, 21, 23,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  .DB   5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 21, 63,  0,  0,  0
  .DB   5, 21, 21, 63, 10, 11, 21, 21, 30,105, 42,105,171, 31, 21, 63
  .DB  10, 11, 21, 21, 28, 32, 32, 32, 32, 29, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 16,  0,  0,  5, 21, 12, 99, 14
  .DB  15, 12, 38, 14, 15, 12, 14, 14, 15, 12, 36, 14, 15, 21, 16, 63
  .DB  63, 10, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 10
  .DB  11,  1,  4,  1,  3,  4, 61, 62, 61, 62,  4,  4,  1,  4,  1,  4
  .DB   4, 62, 61, 62,  4,  0,  0,  5, 21, 21, 21, 54, 54, 21, 21, 23
  .DB   5,  0,  0,  4,  1,  2,  3,  4,  2,  3,  1,  3, 24, 63, 10, 11
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 63, 10, 11, 24, 24, 22, 12
  .DB  99, 36, 15, 21, 21, 21, 21, 21, 21, 12, 97, 97, 15, 21, 21, 21
  .DB  21, 21, 21, 12, 97, 97, 15, 28, 32, 32, 29, 16,  0,  0,  0,  0
  .DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0, 10, 11, 22, 21, 21, 17, 24, 24, 24, 24, 24, 24, 24, 24
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63
  .DB   0, 21, 63, 10, 11, 30,105,104,105, 42, 31, 12, 36, 98, 15,251
  .DB  21, 12, 38, 14, 15, 21, 21, 12, 36, 37, 15, 21,251, 12, 14, 36
  .DB  15, 21, 30,104,171,105, 31, 21, 63, 10, 11, 63,  5, 21,153, 21
  .DB  21,153, 23,  5, 63, 10, 11, 21, 21,245, 21, 21, 21,245, 21, 21
  .DB  21, 23,  5,  0,  0,  1,  4,  1,  3,  1,  3,  1,  3,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  2,  3,  1,  3,  1,  3,  1,  3,  3,  4, 21
  .DB  21, 56, 57, 58, 21, 21, 21, 21, 21, 21, 56, 57, 58, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 30, 42,105,105,171, 31, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21,244,239, 21, 21, 21, 21, 21, 21,238, 21
  .DB  56, 57, 58, 21, 21, 21, 21, 56, 57, 58, 21,238, 12, 37, 14, 15
  .DB  21, 21, 21, 21, 21, 21,244,239, 21, 21, 21, 21, 21, 21, 12, 97
  .DB  97, 15, 60, 21, 21, 56, 57, 57, 58, 21, 21, 60, 12, 98, 97, 15
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 26, 27, 31, 16,  0
  .DB   1,  2,  4,  1,  3,  1,  2,  3,  1,  3,  2,  3,  1,  3, 21, 21
  .DB  16, 10, 11, 21, 12, 97, 97, 15,238, 12, 97, 97, 15, 21, 12, 97
  .DB  97, 15, 21, 12, 98, 97, 15,238, 12, 97, 97, 15, 21, 23,  5,  0
  .DB   0,  5, 21, 21, 17, 24, 24, 24, 24, 24, 24, 24, 63, 10, 11, 24
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 63,  0,  5, 21, 24, 63, 10, 11
  .DB   0,  5, 21, 63, 10, 11, 21, 21, 30, 42,104,171, 42, 31, 21, 63
  .DB  10, 11, 21,251, 30,171, 42,105,105, 31, 21, 21, 21, 21, 23,  5
  .DB   5, 21, 21, 21, 56, 57, 58, 21, 16,  0,  0,  0, 21, 12, 97, 99
  .DB  15, 12, 14, 36, 15, 12, 14, 36, 15, 12, 14, 14, 15, 21, 21, 21
  .DB  63, 10, 11, 21, 21, 44, 21, 28, 32, 32, 29, 21, 44, 21, 63, 10
  .DB  11,  1,  2,  3,  1,  4,  4, 61, 62, 61, 62,  4,  4,  1,  4,  1
  .DB   4, 61, 62, 62,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   0,  0,  0,  3,  1,  3,  1,  2,  4,  2,  3,  4, 21, 63, 10, 11
  .DB  21, 44, 21, 28, 32, 32, 29, 21, 44, 63, 10, 11, 21, 21, 21, 12
  .DB  97, 99, 15, 21, 21, 21, 21, 21, 21, 12, 97, 97, 15, 21, 21, 21
  .DB  21, 21, 21, 12, 97, 97, 15, 30, 42,171, 31, 17, 24, 63, 10, 11
  .DB  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63, 10, 11, 24, 24, 24
  .DB  24, 63, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21,251, 21, 21, 21,251, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63
  .DB   0, 21, 63, 10, 11, 30,171, 42,171,105, 31, 12, 98, 97, 15, 60
  .DB  21, 12, 14, 37, 15, 21, 21, 12, 99, 38, 15, 21, 60, 12, 38, 98
  .DB  15, 21, 30,105, 42,171, 31, 21, 63, 10, 11, 21, 63,  5,  5,  5
  .DB   5,  5,  5, 22, 63, 10, 11, 21, 21, 21, 56, 57, 58, 21, 21, 21
  .DB  23,  5,  0,  0,  4,  1,  3,  4,  1,  3,  1,  3,  1,  3,  1,  3
  .DB   1,  4,  1,  3,  1,  3,  1,  3,  1,  3,  4,  1,  4,  4,  3, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 23,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,238, 21
  .DB  21, 21, 21, 21,245,245, 21, 21, 21, 21, 21,238, 12, 36, 37, 15
  .DB  56, 57, 57, 58, 21, 21, 21, 21, 21, 21, 56, 57, 57, 58, 12, 97
  .DB  97, 15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 97, 97, 15
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 26, 27, 31, 16,  0
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  3, 21
  .DB  16, 10, 11, 21, 18, 19, 19, 20,238, 18, 19, 19, 20,238, 18, 19
  .DB  19, 20,238, 18, 19, 19, 20,238, 18, 19, 19, 20, 23,  5,  0,  0
  .DB   0,  0,  5, 21, 21, 21, 44, 21, 21, 44, 21, 21, 63, 10, 11, 21
  .DB  21, 44, 21, 21, 44, 21, 21, 44, 24, 24, 22, 21, 21, 63, 10, 11
  .DB   0,  0,  5, 63, 10, 11, 21, 21, 30,171, 42,171,105, 31, 21, 63
  .DB  10, 11, 21, 55, 30,105, 42,105,171, 31, 21, 21, 21, 21, 17, 24
  .DB  22, 21, 21, 21, 21, 21, 21, 21, 16,  0,  0,  0,  5, 18, 19, 19
  .DB  20, 18, 19, 19, 20, 18, 19, 19, 20, 18, 19, 19, 20, 21, 21, 21
  .DB  63, 10, 11, 21, 21, 45, 21, 30, 26, 27, 31, 21, 45, 21, 63, 10
  .DB  11,  1,  3,  1,  3,  1,  3,  4, 61, 62, 61, 62, 21, 21, 21, 21
  .DB  62, 62, 61, 62,  4, 10, 11, 63, 63, 10, 11, 63, 63, 10, 11, 63
  .DB  63, 10, 11,  1,  4,  1,  2,  3,  1,  2,  3,  4, 21, 63, 10, 11
  .DB  21, 45,238, 30, 26, 27, 31,238, 45, 63, 10, 11, 21, 21, 21, 18
  .DB  19, 19, 20, 21, 21, 21, 21, 21,251, 18, 19, 19, 20,251, 21, 21
  .DB  21, 21, 21, 18, 19, 19, 20, 30,105, 42, 31, 21, 21, 63, 10, 11
  .DB  21, 56, 58, 21,245, 21,245, 21, 56, 58, 63, 10, 11, 21, 21, 21
  .DB  21, 63, 10,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21
  .DB  21, 60, 21, 21, 21, 60, 21, 23,  5,  5,  5,  5,  5,  5,  5,  5
  .DB   0, 21, 63, 10, 11, 30, 42,171,105,104, 31, 12, 97, 97, 15, 21
  .DB  21, 12, 99, 98, 15, 21, 21, 12, 97, 99, 15, 21, 21, 12, 98, 97
  .DB  15, 21, 30, 42,105,105, 31, 21, 63, 10, 11, 21, 17, 24, 24, 24
  .DB  24, 24, 22, 21, 63, 10, 11, 21, 56, 58, 21,245, 21, 56, 58, 23
  .DB   5,  0,  0,  4,  1,  3,  1,  3,  3,  1,  3,  2,  3,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  2,  3,  3,  1,  4,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  4, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 17, 63, 10, 11, 24, 24, 24, 24, 24, 63, 10, 11, 21, 21
  .DB  21, 21, 21, 21, 21,245, 21, 21,245, 21, 21, 21, 21, 21,238, 21
  .DB  21,238, 21, 21, 21, 21, 21, 21,238, 21, 21,238, 18, 19, 19, 20
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 19
  .DB  19, 20,238, 21, 56, 58, 21, 21, 56, 58, 21,238, 18, 19, 19, 20
  .DB  21, 21, 21,251, 21, 21, 21, 23,  5,  5,  5,  5,  5,  5,  5,  0
  .DB   1,  3,  1,  3,  1,  4,  1,  2,  3,  2,  2,  3,  1,  3,  2,  3
  .DB  16, 10, 11, 21, 21, 21, 21, 21,153, 21, 21, 21, 21,153, 21, 21
  .DB  21, 21,153, 21, 21, 21, 21,153, 21, 21, 21, 23,  5,  0,  0,  0
  .DB   0,  0,  0,  5, 21, 21, 45, 21, 21, 45, 21, 21, 63, 10, 11, 21
  .DB  21, 45, 21, 21, 45, 21, 21, 45, 21, 21, 21, 21, 21, 63, 10, 11
  .DB   0,  0,  0,  5, 10, 11, 21, 21, 30,105,105, 42,171, 31, 21, 63
  .DB  10, 11, 21, 54, 30,171,171, 42,105, 31, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 16,  0,  0,  0,  0, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  63, 10, 11, 21, 21, 21, 21, 30, 26, 27, 31, 21, 21, 21, 63, 10
  .DB  11,  1,  2,  3,  1,  3,  1,  3,  4, 61, 62, 62, 21, 21, 21, 21
  .DB  62, 61, 62, 62,  4, 10, 11, 21, 16, 10, 11, 21, 16, 10, 11, 21
  .DB  16, 10, 11,  1,  2,  4,  1,  2,  3,  1,  2,  3, 21, 63, 10, 11
  .DB  21, 21,153, 30, 26, 27, 31,153, 21, 63, 10, 11, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 60, 21, 21, 21, 21, 60, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 30, 42,104, 31, 21, 21, 63, 10, 11
  .DB  21, 21, 21, 21, 21,245, 21, 21, 21, 21, 63, 10, 11, 21, 21,238
  .DB  21, 63, 10, 11, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63,  0,  5
  .DB  21, 21, 21, 21, 21, 21, 21, 17, 24, 24, 24, 24, 24, 24, 24, 24
  .DB  22, 21, 63, 10, 11, 30,171,105, 42,171, 31, 12, 97, 97, 15, 21
  .DB  21, 12, 97, 97, 15, 21, 21, 12, 97, 97, 15, 21, 21, 12, 97, 97
  .DB  15, 21, 30,171,104, 42, 31, 21, 63, 10, 11, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 63, 10, 11, 21, 21, 21, 21, 21, 21, 21, 23,  5
  .DB   0,  0,  4,  1,  3,  1,  3,  1,  2,  3,  1,  3,  1,  3,  1,  3
  .DB   1,  2,  3,  3,  1,  3,  1,  3,  4,  1,  3,  1,  2,  4,  1,  4
  .DB   1,  3,  1,  3,  1,  3,  1,  3, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 63, 10, 11, 21, 21, 21, 21, 21, 63, 10, 11, 21, 21
  .DB  21, 21, 21,238, 21, 21, 21, 21, 21, 21,238, 21, 21, 21,153, 21
  .DB  21,153, 21, 21, 21, 21, 21, 21,153, 21, 21,153, 21, 21, 21, 21
  .DB 238, 21, 21, 21,245, 21, 21, 21, 21,245, 21, 21, 21,238, 21, 21
  .DB  21, 21,238, 21, 21, 21, 21, 21, 21, 21, 21,238, 21, 21, 21, 21
  .DB 238, 21, 21, 55, 21, 21, 23,  5,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   3,  1,  4,  1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  4,  1,  3,  1,  3,  1,  4,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  2,  3,  3,  2,  3,  2,  3,  1
  .DB   3,  2,  3,  2,  3,  1,  3,  2,  3,  1,  3,  2,  3,  2,  3,  1
  .DB   3,  2,  3,  1,  4,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3, 21, 23,  5,  5, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 16,  1,  3,  1,  3,  1,  3,  4
  .DB  21, 23,  1,  3,  4, 23,  1,  2,  3, 23,  4,  1,  3, 21, 23,  2
  .DB   3,  2,  2,  3,  1,  3,  1,  4,  1,  3,  1,  3,  1,  3,  1,  4
  .DB   1,  2,  3,  1,  3,  2,  3,  1,  3,  4, 61, 62, 21, 21, 39, 13
  .DB   4, 62, 61, 62,  4, 10, 11, 21, 16, 10, 11, 21, 16, 10, 11, 21
  .DB  16, 10, 11,  1,  3,  1,  2,  3,  1,  2,  3,  1,  3,  1,  4,  1
  .DB   3,  1,  3,  1,  3,  2,  3,  1,  3,  1,  2,  3,  1,  3,  1,  3
  .DB   1,  3,  4, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 30,171,171, 31, 21, 21, 63, 10, 11
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63, 10, 11, 21, 21,153
  .DB  21, 63, 10, 11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63,  0,  0
  .DB   5, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
  .DB  21, 21, 63, 10, 11, 30,104,171, 42,105, 31, 18, 19, 19, 20, 21
  .DB  21, 18, 19, 19, 20, 21, 21, 18, 19, 19, 20, 21, 21, 18, 19, 19
  .DB  20, 23,  4,  1,  3,  3,  3,  1,  4,  1,  2,  3,  1,  3,  1,  3
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  4,  1,  2,  3,  4,  2
  .DB   3,  1,  3,  4,  1,  3,  1,  3,  3,  1,  3,  3,  3,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  4,  1,  3,  3,  1,  4,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  4
  .DB  21, 21, 21, 63, 10, 11, 21, 21, 21, 21, 21, 63, 10, 11, 21, 21
  .DB  21, 21, 21,153, 21, 21, 21, 21, 21, 21,153, 21, 21, 23,  3,  1
  .DB   3,  1,  3,  3, 21, 23,  3,  1,  3,  1,  3,  4, 21, 21, 21, 21
  .DB 153, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,153, 21, 21
  .DB  21, 21,153, 21, 21, 21, 21, 21, 21, 21, 21,153, 21, 21, 21, 21
  .DB 153, 21, 21, 54, 21, 23,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  3,  1,  3
  .DB   1,  4,  1,  3,  2,  2,  3,  1,  2,  2,  3,  1,  2,  3,  1,  2
  .DB   4,  1,  2,  3,  1,  3,  2,  2,  3,  2,  2,  3,  2,  2,  3,  2
  .DB   2,  3,  2,  3,  1,  3,  2,  3,  2,  3,  1,  3,  1,  2,  2,  4
  .DB   1,  2,  4,  1,  2,  3,  1,  3,  1,  3,  1,  3,  3,  3,  1,  3
  .DB   1,  3,  1,  3,  1,  3,  4,  1,  2,  3,  1,  3,  1,  3,  1,  3
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  4, 21, 17, 24, 22, 21
  .DB  21, 21, 21, 21, 21, 21, 21, 21, 16,  4,  1,  3,  1,  4,  1,  3
  .DB  21, 16,  4,  1,  3, 16,  4,  1,  3, 16,  1,  3,  4, 21, 16,  3
  .DB   1,  2,  4,  1,  3,  1,  3,  2,  3,  1,  3,  1,  3,  1,  3,  1
  .DB   4,  1,  2,  3,  1,  4,  1,  4,  1,  4,  1,  4,  1,  3,  4,  1
  .DB   4, 61, 62, 62,  4, 10, 11, 21, 16, 10, 11, 21, 16, 10, 11, 21
  .DB  16, 10, 11,  1,  2,  3,  1,  3,  1,  2,  2,  4,  1,  3,  1,  3
  .DB   2,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  2,  4,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  2,  3,  2,  3, 21, 21, 21, 21, 23,  1,  4
  .DB   4,  2,  2,  3,  2,  4,  1,  2,  3,  1,  3,  2,  3,  1,  2,  4
  .DB   2,  3,  1,  2,  4,  1,  4,  1,  3,  1,  3,  1,  3,  2,  2,  3
  .DB   1,  3,  1,  3,  2,  3,  2,  2,  3,  2,  3,  2,  2,  4,  2,  4
  .DB   1,  3,  1,  3,  1,  4,  1,  3,  2,  4,  1,  2,  3,  2,  4,  1
  .DB   3,  1,  3,  2,  2,  3,  2,  4,  2,  4,  2,  3,  2,  3,  4,  2
  .DB   2,  4, 21, 21, 23,  1,  2,  3, 21, 21, 23,  1,  2,  3,  1,  3
  .DB   3,  1,  2,  4,  1,  3,  1,  3,  1,  3,  1,  2,  4,  1,  3,  1
  .DB   3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  4,  1,  3,  4
  .DB   1,  2,  3,  1,  3,  1,  3,  4,  1,  3,  1,  2,  3,  3,  1,  3
  .DB   2,  4,  1,  3,  1,  3,  1,  4,  3,  2,  2,  4,  2,  4,  1,  4
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3
  .DB  21, 23,  1,  3,  1,  4,  1,  3, 21, 23,  1,  3,  1,  3,  1,  3
  .DB  21, 23,  1,  3,  1,  3,  1,  4,  1,  3,  1,  3, 21, 16,  1,  3
  .DB   1,  3,  1,  3, 21, 16,  1,  3,  1,  3,  1,  3, 21, 23,  1,  3
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  3
  .DB   1,  3,  1,  3,  1,  3,  1,  3,  1,  4,  1,  3,  1,  3,  1,  3
  .DB   1,  4,  1,  3,  1,  4,  1,  3,  1,  4,  1,  3,  1,  3,  1,  4

.ORG H'B140
comp_data:
.DB     H'FF    ; CC0
.DB     H'12    ; CC01
.DB     H'26    ; CC02
.DB     H'16    ; CC03
.DB     H'1C    ; CC11
.DB     H'20    ; CC12
.DB     H'10    ; CC13
.DB     H'1A    ; CC21
.DB     H'37    ; CC22
.DB     H'16    ; CC23
.DB     H'14    ; CC31
.DB     H'2B    ; CC32
.DB     H'10    ; CC33

.DB     H'37    ; CCS11              ;enemy 1 (Atom)
.DB     H'34    ; CCS12
.DB     H'24    ; CCS13
.DB     H'37    ; CCS21              ;enemy 2 (Spark)
.DB     H'32    ; CCS22
.DB     H'22    ; CCS23

.DB     H'01    ; E_POWER
.DB     H'01    ; E_PAL
.DB     H'03    ; E_ATIME
.DB     H'02    ; E_IXV
.DB     H'02    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     212     ; E_STAGE0
.DB     216     ; E_STAGE1
.DB     220     ; E_STAGE2
.DB     224     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'01    ; E_PAL
.DB     H'07    ; E_ATIME
.DB     H'02    ; E_IXV
.DB     H'01    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     6*4     ; E_STAGE0
.DB     7*4     ; E_STAGE1
.DB     8*4     ; E_STAGE2
.DB     7*4     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'02    ; E_PAL
.DB     H'02    ; E_ATIME
.DB     H'01    ; E_IXV
.DB     H'02    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     228     ; E_STAGE0
.DB     232     ; E_STAGE1
.DB     236     ; E_STAGE2
.DB     240     ; E_STAGE3

.DB     H'01    ; E_POWER
.DB     H'00    ; E_PAL
.DB     H'04    ; E_ATIME
.DB     H'03    ; E_IXV
.DB     H'01    ; E_IYV
.DB     BOUNCE  ; E_MTYPE
.DB     244     ; E_STAGE0
.DB     248     ; E_STAGE1
.DB     252     ; E_STAGE2
.DB     248     ; E_STAGE3

.DB     T_SHIELD+9; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     228     ; ITM_X
.DB     10      ; ITM_Y

.DB     T_SHIELD+10; ITM_ID
.DB     T_SHIELD; ITM_TYPE
.DB     32*4    ; ITM_SHP
.DB     CAN1    ; ITM_C1
.DB     CAN2    ; ITM_C2
.DB     CAN3    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     21      ; ITM_X
.DB     10      ; ITM_Y

.DB     T_LANTERN ; ITM_ID
.DB     T_LANTERN ; ITM_TYPE
.DB     11*4    ; ITM_SHP
.DB     H'2B    ; ITM_C1
.DB     H'1B    ; ITM_C2
.DB     H'16    ; ITM_C3
.DB     0       ; ITM_PAGE
.DB     H'C0    ; ITM_X
.DB     1       ; ITM_Y

.DB     0       ; DOOR_PAGE
.DB     9       ; DOOR_X
.DB     3*16+16 ; DOOR_Y
.DB     6       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     H'F6    ; DOOR_TX
.DB     6*16+16 ; DOOR_TY
.DB     3*DOOR_SIZE ; DOOR_TDOOR

.DB     0       ; DOOR_PAGE
.DB     H'F1    ; DOOR_X
.DB     4*16+16 ; DOOR_Y
.DB     1       ; DOOR_TWORLD
.DB     1       ; DOOR_TPAGE
.DB     250     ; DOOR_TX
.DB     9*16+16 ; DOOR_TY
.DB     2*DOOR_SIZE ; DOOR_TDOOR

.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0
.DB     0,0,0,0,0,0,0,0

.DB     H'1A    ; DC1
.DB     H'37    ; DC2
.DB     H'16    ; DC3
.DB     18      ; FT_TILE

.ORG H'B1E0
  .DB  65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 65,233,228,230
  .DB  64, 64, 64, 64, 64, 64,210,211,219,220,210,221,210,232,210,221
  .DB  65, 66, 66, 66, 66, 66, 66, 66, 65, 66, 66, 66, 66, 66, 66, 66
  .DB  66, 65, 66, 66, 66, 66, 66, 66, 66, 66, 65, 64, 64, 64, 64,211
  .DB  64, 64, 64, 64, 64, 64,210, 64, 64, 64, 64,211, 64, 64, 64, 64
  .DB  64, 64,210, 64, 64, 64, 64, 65,241, 53,123,222,212, 58,125,242
  .DB 241, 54, 55,242,231,233,228,233,231,233,228,233,231,233,228,233
  .DB 231,233,228,233,228,230,210,221,210,232,210,236, 64, 64, 64, 64
  .DB 210,232,210,234,228,233,231,233,228,233,231,233,228,233,231,233
  .DB 228,233,231,233,228,233,231,233,228,233,231,233,228,230,210,211
  .DB 210,211, 11,211,210,211,210,211,210,211,210,211, 11,211,210,211
  .DB 210,211, 11,211,210,211,210,211,210,221,210,211,210,211,217,218
  .DB 210,211,210,232,210,211,210,211,210,211,210,211,210,211,210,211
  .DB 217,218,210,211,210,211,210,211,210,211,210,211,210,211,210,211
  .DB 217,218,210,211,210,232,210,211,210,211,210,211,210,211,217,218
  .DB 210,211,210,211,210,211,210, 65, 65, 65, 65, 65, 65, 65, 65, 65

aria_m: .DB     H'C0,H'00
        .DB     MD+N4,MCs+N4,MD+N4,LA+N4
        .DB     LBb+N4,LG+N4,LA+N4,LF+N4
        .DB     MF+N4,ME+N4,MD+N4,MCs+N4
        .DB     MD+N4,ME+N4,LA+N2

        .DB     MD+N4,MCs+N4,MD+N4,LA+N4
        .DB     LBb+N4,LG+N4,LA+N4,LF+N4
        .DB     MF+N4,ME+N4,MD+N4,MCs+N4
        .DB     MD+N4,ME+N4,LA+N2

        .DB     ME+N4,REST+N8,ME+N8,MF+N4,MD+N4
        .DB     MC+N4,REST+N8,LBb+N8,LA+N2
        .DB     MD+N4,MC+N4,LBb+N4,LA+N4
        .DB     LG+N4,REST+N8,LF+N8,LF+N2

        .DB     MA+N4,REST+N8,MA+N8,MD+N2
        .DB     MG+N4,REST+N8,MG+N8,MCs+N2
        .DB     MD+N4,ME+N4,MF+N4,ME+N8,MD+N8
        .DB     MCs+N2,REST+N8,MD+N8,MD+N2,REST+N4,REWIND

aria_mb:.DB     MD+N4,ME+N4,MF+N4,MD+N4
        .DB     MG+N4,MC+N4,MF+N4,MG+N4
        .DB     MA+N4,MF+N4,MBb+N4,MA+N4
        .DB     MBb+N4,MG+N4,HCs+N2

        .DB     MD+N4,ME+N4,MF+N4,MD+N4
        .DB     MG+N4,MC+N4,MF+N4,MG+N4
        .DB     MA+N4,MF+N4,MBb+N4,MA+N4
        .DB     MBb+N4,MG+N4,HCs+N2

        .DB     MA+N8,MB+N8,MCs+N8,MA+N8,MD+N8,ME+N8,MF+N8,MD+N8
        .DB     ME+N8,MD+N8,ME+N8,MC+N8,MF+N8,ME+N8,MD+N8,MC+N8
        .DB     LBb+N8,MBb+N8,MA+N8,LA+N8,LG+N8,MG+N8,MF+N8,LF+N8
        .DB     MC+N8,LBb+N8,MC+N8,LC+N8,LF+N8,MC+N8,MD+N8,ME+N8

        .DB     MF+N8,MG+N8,MA+N8,MF+N8,MBb+N8,HC+N8,MBb+N8,MA+N8
        .DB     MG+N8,MA+N8,MBb+N8,MG+N8,MA+N8,MBb+N8,MA+N8,MG+N8
        .DB     MF+N8,MG+N8,ME+N8,MA+N8,MD+N8,MF+N8,MG+N8,MBb+N8
        .DB     MA+N8,MG+N8,MA+N8,LA+N8,MD+N2,REST+N4,REWIND

mking_mb:
        .DB     REST+N1
        .DB     REST+N1
        .DB     REST+N1
        .DB     REST+N1                                               ;4

        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MF+N4,REST+N4,MF+N2                                   ;19

        .DB     LA+N4,ME+N4,LA+N4,ME+N4
        .DB     LA+N4,MF+N4,LA+N4,ME+N4
        .DB     LA+N4,ME+N4,LA+N4,ME+N4
        .DB     LA+N4,MF+N4,LA+N2

        .DB     LA+N4,ME+N4,LA+N4,ME+N4
        .DB     LA+N4,MF+N4,LA+N4,ME+N4
        .DB     LA+N4,ME+N4,LA+N4,ME+N4
        .DB     LA+N4,MF+N4,LA+N2                                     ;49

        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,REST+N4
        .DB     LA+N4,REST+N4,MD+N4,REST+N4                           ;65

        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,LA+N4
        .DB     MD+N4,LA+N4,MD+N4,REST+N4
        .DB     LA+N4,REST+N4,MD+N4,REST+N4,REWIND                    ;86

.ORG H'B3E0
  .DB  65, 65, 65, 65, 64, 64, 65, 65, 65,229,214,227, 65,211,210,232
  .DB  64,143,145,144,144, 64,210,211,210,211,210,232,210,221,210,232
  .DB 210,211,210,211,210,211,210,211, 65, 66, 65,211,210,211,219,220
  .DB 210, 67,210,234,228,233,228,233,228,233,228, 64,144,144, 64,233
  .DB  64,143,145,144,143, 64,228, 64,143,144, 64,233, 64,145,144,143
  .DB 145, 64,228, 64,145,144, 64, 67,212,123, 53,242,241,123,126,222
  .DB 212, 56, 57,242,228,233,228,233,228,233,228,230,210,211,210,211
  .DB 210,211,219,220,213,243,214,243,214,243,214,227, 64,143,144, 64
  .DB 210,221,210,221,210,211,210,211,217,218, 65, 66, 65, 66, 65, 66
  .DB  65, 66, 65, 66, 65, 66, 65, 66, 65,211,217,218,213,243,214,227
  .DB 210,211,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,211,217,218
  .DB 210,211, 11,211,210,211,217,218,210,221,210,211,210,211,210,211
  .DB 210,211,210,221,210,211,210,211,210,234,228,233,231,233,228,233
  .DB 231,233,228,233,231,233,228,233,231,233,228,233,231,233,228,233
  .DB 231,233,228,233,231,235,210,234,231,233,228,233,231,233,228,233
  .DB 231,233,228,233,231,233,228, 65, 65, 64, 64, 65, 65, 65, 65, 65

rigd_m: .DB     H'C0,H'00
        .DB     LG+N8,LA+N8
        .DB     LB+N4,LA+N8,LG+N8,MD+N4,ME+N8,MF+N8
        .DB     MG+N2,REST+N4,MG+N8,MF+N8
        .DB     MF+N8,ME+N8,ME+N8,MD+N8,MD+N8,MC+N8,MC+N8,LB+N8
        .DB     LA+N2,REST+N4,LG+N8,LA+N8

        .DB     LB+N4,LA+N8,LG+N8,MD+N4,ME+N8,MF+N8
        .DB     MG+N2,REST+N4,MA+N8,MG+N8
        .DB     MF+N4,ME+N8,MD+N8,MF+N4,ME+N8,MD+N8
        .DB     MD+N2,REST+N4

        .DB     MF+N8,MG+N8
        .DB     MA+N4,MG+N8,MF+N8,MG+N8,MF+N8,MG+N8,MA+N8
        .DB     MB+N2,REST+N4,MB+N8,MDs+N8
        .DB     ME+N8,MDs+N8,ME+N8,MF+N8,MG+N4,MF+N8,ME+N8
        .DB     ME+N2,REST+N4,MG+N8,MF+N8

        .DB     MF+N8,ME+N8,ME+N8,MD+N8,MD+N8,MC+N8,MC+N8,LB+N8
        .DB     MC+N2,REST+N4,ME+N8,MD+N8
        .DB     MD+N8,MC+N8,MC+N8,LB+N8,LB+N8,LA+N8,LA+N8,LG+N8
        .DB     LF+N2,REST+N4,LG+N8,LD+N8

        .DB     LE+N4,LA+N8,LE+N8,LF+N4,LB+N8,LF+N8
        .DB     LG+N4,MC+N8,LG+N8,LA+N4,MD+N8,LA+N8
        .DB     LB+N4,LA+N8,LG+N8,LB+N4,LA+N8,LG+N8
        .DB     LG+N2,REST+N4,REWIND

rigd_mb: .DB     REST+N4
        .DB     MG+N4,LG+N4,MG+N4,MF+N4
        .DB     ME+N4,LE+N4,ME+N4,LB+N4
        .DB     MC+N4,LB+N4,LA+N4,LG+N4
        .DB     MD+N4,LA+N4,LD+N4,REST+N4

        .DB     MG+N4,LG+N4,MG+N4,MF+N4
        .DB     ME+N4,LE+N4,ME+N4,MC+N4
        .DB     MD+N4,MG+N4,MA+N4,LA+N4
        .DB     MD+N4,LA+N4,LD+N4

        .DB     MD+N4
        .DB     MF+N4,MD+N4,ME+N4,MF+N4
        .DB     MG+N4,LG+N4,MG+N4,MB+N4
        .DB     MC+N4,MA+N4,MB+N4,LB+N4
        .DB     ME+N4,LE+N4,ME+N4,LB+N4

        .DB     MC+N4,LB+N4,LA+N4,LG+N4
        .DB     LA+N4,ME+N4,MA+N4,MG+N4
        .DB     MA+N4,MG+N4,MF+N4,ME+N4
        .DB     MD+N4,LD+N4,MD+N4,LB+N4

        .DB     MC+N4,LC+N4,MD+N4,LD+N4
        .DB     ME+N4,LE+N4,MF+N4,LF+N4
        .DB     MG+N4,MC+N4,MD+N2
        .DB     MG+N4,MD+N4,LG+N4,REWIND

music_ptr:      .DRW     rigd_m            ; Forest Music
                .DRW     rigd_mb
                .DRW     rondo_m           ; Lake Music
                .DRW     rondo_mb
                .DRW     blued_m           ; Moon Music
                .DRW     blued_mb
                .DRW     march_m           ; Base Music
                .DRW     march_mb
                .DRW     mking_m           ; Cave Music
                .DRW     mking_mb
                .DRW     bmble_m           ; Shed Music
                .DRW     bmble_mb
                .DRW     toc_m             ; Comp Music
                .DRW     toc_mb
                .DRW     burl_m            ; Castle Music
                .DRW     burl_mb

.ORG H'B5E0
  .DB  65, 65, 65, 64, 65, 65, 64, 65, 65,151,152,222,219,220,210,236
  .DB  64,144,143,145,143, 64,228,230, 65,211,210,221,210,232,210,236
  .DB 228,233,228,233,228,233,228,230,210,211, 67,211,210,211,210,211
  .DB 210, 67,210,221,219,220,210,211,210,234,228, 64, 64, 64, 64,233
  .DB  64,144,143,145,144, 64,210, 64,144,143, 64,211, 64,143,145,144
  .DB 143, 64,228, 64, 64, 64, 64, 67,223,244,225,226,223,244,225,211
  .DB 223,244,225,226,210, 65, 66, 66, 66, 66, 65,232, 65,211, 65,234
  .DB 228,233,228,233,241, 45, 46,123, 53,125, 58,242, 64, 64, 64, 64
  .DB 210,232,210,232,217,218,210,211,210,211, 67,211, 67,211,210,211
  .DB  67,211, 67,211,210,211, 67,211, 67,211,210,234,241,125,125,222
  .DB 210,211,210,211,210,211,210,211,210,211,210,211,210,211,210,211
  .DB 210,211, 11,211,210,211,210,211,210,232,  8, 10, 10, 10, 10, 10
  .DB  10, 14,210,232,210,211,217,218,210,232,210,211,210,211,217,218
  .DB 210,211,210,211,217,218,210,211,210,211,210,211,  8, 10, 10,  6
  .DB 210,211,210,211,210,211,210,232,210,211,210,211,210,211,210,211
  .DB 213,229,214,227,210,211,210, 65, 64, 64, 64, 65, 65, 65, 65, 65

mking_m:.DB     H'8F,H'F8
        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N4
        .DB     MG+N8,ME+N8,MG+N4,MF+N8,MD+N8,MF+N4
        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N8,HD+N8
        .DB     HC+N8,MA+N8,MF+N8,MA+N8,HC+N2                         ;28

        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N4
        .DB     MG+N8,ME+N8,MG+N4,MF+N8,MD+N8,MF+N4
        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N8,HD+N8
        .DB     HC+N8,MA+N8,MF+N8,MA+N8,HC+N2                         ;54

        .DB     MA+N8,MB+N8,HCs+N8,HD+N8,HE+N8,HC+N8,HE+N4
        .DB     HF+N8,HCs+N8,HF+N4,HE+N8,HC+N8,HE+N4
        .DB     MA+N8,MB+N8,HCs+N8,HD+N8,HE+N8,HC+N8,HE+N4
        .DB     HF+N8,HCs+N8,HF+N4,HE+N2                              ;78

        .DB     MA+N8,MB+N8,HCs+N8,HD+N8,HE+N8,HC+N8,HE+N4
        .DB     HF+N8,HCs+N8,HF+N4,HE+N8,HC+N8,HE+N4
        .DB     MA+N8,MB+N8,HCs+N8,HD+N8,HE+N8,HC+N8,HE+N4
        .DB     HF+N8,HCs+N8,HF+N4,HE+N2                              ;102

        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N4
        .DB     MG+N8,ME+N8,MG+N4,MF+N8,MD+N8,MF+N4
        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N8,HD+N8
        .DB     MA+N8,MG+N8,MF+N8,ME+N8,MD+N4,REST+N4                 ;129

        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N4
        .DB     MG+N8,ME+N8,MG+N4,MF+N8,MD+N8,MF+N4
        .DB     MD+N8,ME+N8,MF+N8,MG+N8,MA+N8,MF+N8,MA+N8,HD+N8
        .DB     MA+N8,MG+N8,MF+N8,ME+N8,MD+N4,REST+N4,REWIND          ;157

ales_m: .DB     H'06,H'00
        .DB     LD+N4
        .DB     LG+N4,LB+N4,LA+N4,LG+N8,LFs+N8
        .DB     LG+N2,LD+N4,REST+N4
        .DB     LA+N8,LB+N8,MC+N4,LB+N8,LA+N8
        .DB     LB+N2,LG+N4,REST+N4                                   ;19

        .DB     LB+N8,MC+N8,MD+N4,MC+N4,LB+N4
        .DB     MC+N2,LF+N4,MD+N4
        .DB     ME+N2,MC+N2
        .DB     MD+N2,REST+N4                                         ;31

        .DB     MD+N4
        .DB     MD+N8,ME+N8,MF+N4,ME+N4,MD+N4
        .DB     ME+N2,MC+N4,REST+N4
        .DB     MC+N8,MD+N8,ME+N4,MD+N4,MC+N4
        .DB     MD+N2,LB+N4,REST+N4                                   ;48

        .DB     LB+N8,MC+N8,MD+N4,MC+N4,LB+N4
        .DB     LA+N8,LB+N8,MC+N4,LB+N4,LA+N4
        .DB     LB+N4,LA+N8,LB+N8,LG+N4,MG+N4
        .DB     MFs+N2,MD+N4,REST+N4                                  ;66

        .DB     MG+N4,MA+N4,MB+N8,MA+N8,MG+N8,MFs+N8
        .DB     MG+N2,MD+N4,REST+N4
        .DB     ME+N8,MD+N8,MC+N8,LB+N8,LA+N4,REST+N8,LG+N8
        .DB     LG+N2,REST+N4,REWIND                                  ;85

.ORG H'B7E0
  .DB  65, 65, 64, 65, 65, 65, 65, 64, 65,151,152,222,210,211,210,211
  .DB  64, 64, 64, 64, 64, 64,210,221,210,234,228,235,210,221,210,211
  .DB 219,220, 65, 66, 65, 66, 65,243,214,227, 65,211, 65,211,210, 65
  .DB 210, 67,210,232,210,211,210,211,210,236,228,230,210,211,210,211
  .DB  64,145,144,143,145, 64,228, 64,145,144, 64,233, 64,144,143,145
  .DB 144, 64,210,211,210,211,210, 67,210,232,219,220,210,236,228,233
  .DB 228,235,210,211,210,211,219,220,210,211, 67,221, 67,211, 67,232
  .DB 210,234,228,233,241, 47, 48, 54, 55,126, 53,242,228,233,228,233
  .DB 228,235,210,221,210,211,210,211,210,211, 67,211, 67,211,217,218
  .DB  67,211, 67,211,210,211, 67,211, 67,211,210,232,212,126,126,242
  .DB 228,233,228,233,228,233,228,233,228,233,228,233,228,233,228,233
  .DB 228,230, 11,211,210,211,210,211,210,221, 11, 64, 64, 64, 64,233
  .DB 231,233,228,235,210,211,210,211,210,221,210,211,210,211,210,211
  .DB 210,211,210,211,210,211,210,211,210,211,210,211,  5,211,210, 11
  .DB 210,211,210,211, 12, 14,210,221, 12, 14,210,211,210,211, 13,211
  .DB 212,151,152,222,217,218,210, 65, 65, 64, 64, 65, 65, 65, 65, 65

burl_m: .DB     H'C0,H'00
        .DB     LB+N4,LG+N4,LFs+N4,LA+N4
        .DB     LG+N4,LA+N8,LB+N8,MC+N8,MD+N8,ME+N8,MFs+N8
        .DB     MG+N4,ME+N4,MD+N4,MC+N4
        .DB     MC+N8,LB+N8,MC+N8,LB+N8,LA+N2
        .DB     LA+N4,MC+N4,LB+N8,MD+N8,MCs+N8,ME+N8

        .DB     MD+N8,MFs+N8,ME+N8,MD+N8,MCs+N8,LB+N8,LA+N8,LG+N8
        .DB     LFs+N2,LE+N4,REST+N8,LD+N8
        .DB     LD+N1

        .DB     REST+N8,MD+N8,MFs+N8,MA+N8,MG+N8,MFs+N8,ME+N8,MD+N8
        .DB     MG+N2,MD+N4,MC+N4
        .DB     LB+N8,MD+N8,LG+N8,LB+N8,LA+N8,LE+N8,LFs+N8,LG+N8
        .DB     LFs+N4,LE+N4,LD+N2

        .DB     MD+N4,MF+N4,ME+N8,MG+N8,MFs+N8,MA+N8
        .DB     MG+N8,MB+N8,MA+N8,MG+N8,MFs+N8,ME+N8,MD+N8,MC+N8
        .DB     LB+N2,LA+N4,REST+N8,LG+N8
        .DB     LG+N1,REWIND

burl_mb:
        .DB     MG+N2,MA+N2
        .DB     MB+N2,REST+N2
        .DB     REST+N4,HC+N4,MB+N4,MA+N4
        .DB     MG+N4,REST+N8,MB+N8,HD+N4,MD+N4
        .DB     REST+N4,MFs+N4,MG+N4,ME+N4

        .DB     MFs+N2,REST+N4,MG+N4
        .DB     MA+N4,MG+N4,MA+N4,LA+N4
        .DB     MD+N4,MD+N8,MFs+N8,ME+N8,MG+N8,MFs+N8,MA+N8

        .DB     HD+N2,REST+N4,HC+N4
        .DB     REST+N8,MB+N8,MA+N8,MG+N8,MFs+N8,MA+N8,MD+N8,MFs+N8
        .DB     MG+N2,MC+N2
        .DB     MD+N2,REST+N4,HC+N4

        .DB     MB+N4,MG+N4,HC+N4,MA+N4
        .DB     MB+N2,REST+N4,HC+N4
        .DB     HD+N4,HC+N4,HD+N4,MD+N4
        .DB     MG+N4,MG+N8,MA+N8,MB+N8,MA+N8,MB+N8,HCs+N8
        .DB     REWIND

ales_mb:.DB     REST+N4
        .DB     REST+N4,REST+N2,MD+N4
        .DB     MG+N4,MA+N4,MB+N4,MA+N8,MG+N8
        .DB     MFs+N2,MD+N4,REST+N4
        .DB     MG+N4,LG+N8,LA+N8,LB+N4,MC+N4                         ;17

        .DB     MD+N4,LB+N4,LA+N4,LG+N4
        .DB     LF+N4,MF+N4,ME+N4,MD+N4
        .DB     MC+N2,ME+N2
        .DB     MD+N2,REST+N4                                         ;29

        .DB     REST+N4
        .DB     REST+N2,REST+N4,MB+N4
        .DB     HC+N4,HD+N4,HE+N4,HC+N4
        .DB     MA+N2,MF+N4,REST+N4
        .DB     MB+N4,HC+N4,HD+N4,MB+N4                               ;44

        .DB     MG+N2,HE+N2
        .DB     MFs+N2,HD+N2
        .DB     MG+N2,ME+N2
        .DB     MD+N4,MC+N8,MD+N8,MB+N4,MG+N4                         ;55

        .DB     ME+N4,MC+N4,MD+N4,HD+N4
        .DB     HE+N4,HD+N8,HC+N8,MB+N4,MG+N4
        .DB     HC+N4,MA+N4,HD+N4,MD+N4
        .DB     MG+N2,REST+N4,REWIND                                  ;71

.ORG H'B9E0
  .DB  65, 65, 64, 65, 65, 65, 64, 64, 65, 66, 66, 66, 65,211,210,211
  .DB 210,211,210,211,210,211,210,232,213,243,214,227,210,232,210,211
  .DB 210,211,210,211, 67,211,212, 53, 53,242,228,233, 67,233,228, 67
  .DB 231, 67,231,235, 65, 66, 66, 66, 66, 65,210,232,219,220,210,234
  .DB  64, 64, 64, 64, 64, 64,210, 64,144,145, 64,211, 64, 64, 64, 64
  .DB  64, 64,228,230,210,211,210, 67,210,221,210,211,210, 65, 66, 66
  .DB  66, 66, 66, 65,210,211,210,211,210,211, 67,232, 67,211, 65,221
  .DB 210,232,210,211,212, 45, 46, 56, 57, 54, 55,222,210,211,217,218
  .DB 210,211,210,221,210,211,210,211,210,211, 67,211, 65,211, 65,211
  .DB  67,211, 65,211, 65,211, 65,211, 67,211,210,232,223,224,225, 12
  .DB  10,  6,210,211,217,218,  8, 10, 14,211,210,211,210,211,210,211
  .DB 210,232,  9, 10, 10, 10, 14,211,210,221, 11, 64,143,144, 64,211
  .DB 210,211,210,211,210,211,210,211,210,232,210, 12, 10, 10, 10, 10
  .DB  10,  6,210,211,210,211,210,211,  8, 10,  6,211,210,211,210, 11
  .DB 210,211,210,211,210,211,210,221,210,211,210,211,210,211, 11,211
  .DB 212,151,152,222,210,211,210, 65, 65, 64, 64, 65, 65, 65, 65, 65

toc_m:  .DB     H'80,H'00
        .DB     MA+N16,MG+N16,MA+N4,REST+N2,MG+N16,MF+N16,ME+N16,MD+N16
        .DB     MCs+N4,MD+N4,REST+N2
        .DB     MA+N16,MG+N16,MA+N4,REST+N4,REST+N8,LE+N8,LF+N8,LCs+N8

        .DB     LD+N4,REST+N4,REST+N2
        .DB     MA+N16,MG+N16,MA+N8,REST+N2,MG+N16,MF+N16,ME+N16,MD+N16
        .DB     LCs+N4,MD+N4,REST+N2
        .DB     REST+N2,LDs+N8,LE+N8,LG+N8,LB+N8

        .DB     LCs+N8,ME+N8,MG+N8,MB+N8,MCs+N2
        .DB     MG+N4,ME+N4,MFs+N1
        .DB     REST+N4,REST+N8,LCs+N8
        .DB     LD+N8,LE+N8,LCs+N8,LD+N8,LE+N8,LC+N8
        .DB     LD+N8,LE+N8,LC+N8,LD+N8,LE+N8

        .DB     LF+N8,LG+N8,LE+N8,LF+N8,LG+N8,LE+N8,LF+N8,LG+N8,LE+N8,LF+N8,LG+N8
        .DB     LA+N8,LB+N8,LG+N8,LA+N8,LB+N8,LG+N8,LA+N8,LB+N8,LG+N8
        .DB     LA+N1,REST+N8,MCs+N8

        .DB     MD+N8,ME+N8,MCs+N8,MD+N8,ME+N8,MC+N8,MD+N8,ME+N8,MC+N8,MD+N8,ME+N8
        .DB     MF+N8,MG+N8,ME+N8,MF+N8,MG+N8,ME+N8,MF+N8,MG+N8,ME+N8,MF+N8,MG+N8

        .DB     MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N1

        .DB     REST+N8,LA+N8
        .DB     MD+N8,ME+N8,MF+N8,MD+N8,ME+N8,MF+N8,MG+N8,ME+N8
        .DB     MF+N8,MG+N8,MA+N8,MF+N8,MG+N8,MA+N8,MB+N8,MG+N8

        .DB     MA+N8,MF+N8,MG+N8,ME+N8,MF+N8,MD+N8,ME+N8,MCs+N8
        .DB     MD+N8,LA+N8,LB+N8,LG+N8,LA+N8,LF+N8,LG+N8,LE+N8

        .DB     LF+N8,LD+N8,LE+N8,LC+N8,LF+N8,LD+N8,LE+N8,LC+N8
        .DB     LF+N8,MA+N8,MB+N8,MG+N8,MA+N8,MF+N8,MG+N8,ME+N8

        .DB     MF+N8,MD+N8,ME+N8,MCs+N8,MF+N8,MD+N8,ME+N8,MC+N8
        .DB     MD+N4,MB+N16,LF+N16,LB+N16,LF+N16,LC+N16,LE+N16,LA+N16,LE+N16,MB+N16,LD+N16,LG+N16,LD+N16

        .DB     MA+N16,LCs+N16,LE+N16,LA+N16,LD+N8,LB+N8,LC+N8,LA+N8,LB+N8,LG+N8
        .DB     LA+N4,LF+N16,MF+N16,MG+N16,MF+N16,LC+N16,ME+N16,MA+N16,ME+N16,LD+N16,MD+N16,MG+N16,MD+N16

        .DB     LA+N16,MC+N16,ME+N16,MB+N16,MD+N8,MA+N8,MC+N8,MB+N8,MB+N8,MG+N8
        .DB     MCs+N2,MCs+N8,MG+N8,MF+N8,ME+N8
        .DB     MD+N8,MCs+N8,MD+N8,ME+N8,MF+N8,ME+N8,MF+N8,MG+N8

        .DB     MA+N8,MG+N8,MA+N8,MB+N8,MA+N8,MG+N8,MA+N8,MB+N8
        .DB     MA+N1
        .DB     REST+N4,LD+N8,LB+N8,LC+N8,LA+N8,LB+N8,LG+N8

        .DB     LA+N1,REST+N4,REWIND

.ORG H'BBE0
  .DB  65, 65, 64, 65, 65, 64, 65, 64, 65,211,219,220,210,211,210,211
  .DB  65,211,219,220,210,211,210,236,241, 54, 55,242,231,235,210,234
  .DB 228,233,228,230, 67,234,241, 53, 53,222,210,211, 67,211,210, 67
  .DB 210, 67,210,211, 67,211,210,211,210,211,210,221,210,211,210,236
  .DB 228,230,219,220,210,211,210, 64,145,143, 64,211,210,221,219,220
  .DB 210,211,210,232,219,220,210, 67,210,232,210, 65, 66, 65,210,211
  .DB 210,211,210, 65, 65, 66, 66, 66, 65,211, 67,221, 65,211,210,232
  .DB 210,221, 65,211,212, 47, 48,252, 53, 56, 57,222,210,211,210,211
  .DB 210,211,210,232,210, 65,210,211,210,211, 67,211,210,211, 67,211
  .DB  67,211,210,211, 67,211,217,218, 67,211,210,236,228,233,228,230
  .DB 210, 11,210,211,210,211, 11,211,210,211,210,211,210,211,210,211
  .DB 210,221,210,211,210,211,210,211,210,232, 11, 64,144,145, 64,211
  .DB 210,211,210,211,210,211,210,211,210,236,228,233, 64, 64, 64, 64
  .DB  64, 11,210,211,210,211,217,218, 11,211,  5,211,210,211,210, 11
  .DB 210,211,210,211,210,211,210,232,210,211,217,218,210,211,  9, 10
  .DB  10, 10, 10, 10, 10, 10,  6, 65, 65, 64, 64, 65, 65, 65, 65, 65

toc_mb: .DB     MA+N16,MG+N16,MA+N4,REST+N2,MG+N16,MF+N16,ME+N16,MD+N16
        .DB     LCs+N4,LD+N4,REST+N2
        .DB     MA+N16,MG+N16,MA+N4,REST+N4,REST+N8,ME+N8,MF+N8,LCs+N8

        .DB     MD+N4,REST+N4,REST+N2
        .DB     LA+N16,LG+N16,LA+N4,REST+N4,REST+N8,LG+N16,LF+N16,LE+N16,LD+N16
        .DB     LCs+N4,LD+N4,REST+N2
        .DB     LD+N1

        .DB     LD+N1
        .DB     LD+N1
        .DB     LD+N2,LD+N4,REST+N8,LCs+N8
        .DB     MD+N8,ME+N8,LCs+N8,MD+N8,ME+N8,LCs+N8,MD+N8,ME+N8,LCs+N8,MD+N8,ME+N8

        .DB     MF+N8,MG+N8,ME+N8,MF+N8,MG+N8,ME+N8,MF+N8,MG+N8,ME+N8,MF+N8,MG+N8
        .DB     MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N8,MB+N8
        .DB     MA+N2,MA+N4,REST+N8,HCs+N8

        .DB     LD+N8,LE+N8,LCs+N8,LD+N8,LE+N8,LC+N8,LD+N8,LE+N8,LC+N8,LD+N8,LE+N8
        .DB     LF+N8,LG+N8,LE+N8,LF+N8,LG+N8,LE+N8,LF+N8,LG+N8,LE+N8,LF+N8,LG+N8

        .DB     MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N8,MB+N8,MG+N8,MA+N1

        .DB     REST+N4,LA+N8
        .DB     MD+N8,ME+N8,MF+N8,MD+N8,ME+N8,MF+N8,MG+N8,ME+N8
        .DB     MF+N8,MG+N8,MA+N8,MF+N8,MG+N8,MA+N8,MB+N8,MG+N8

        .DB     MA+N8,MF+N8,MG+N8,ME+N8,MF+N8,MD+N8,ME+N8,MCs+N8
        .DB     MD+N8,LA+N8,LB+N8,LG+N8,LA+N8,LF+N8,LG+N8,LE+N8

        .DB     LF+N8,LD+N8,LE+N8,LC+N8,LF+N8,LD+N8,LE+N8,LC+N8
        .DB     LF+N8,MA+N8,MB+N8,MG+N8,MA+N8,MF+N8,MG+N8,ME+N8

        .DB     MF+N8,MD+N8,ME+N8,MCs+N8,MF+N8,MD+N8,ME+N8,MC+N8

        .DB     REST+N1,REST+N2,REST+N4,REST+N8
        .DB     LA+N4,REST+N4,REST+N2

        .DB     REST+N1
        .DB     LA+N1
        .DB     LA+N1

        .DB     LA+N1
        .DB     LA+N1
        .DB     REST+N4,REST+N8,MF+N8,REST+N8,ME+N8,REST+N8,MD+N8

        .DB     LA+N1,REST+N4,REWIND

.ORG H'BDE0
  .DB  65, 65, 64, 65, 64, 65, 65, 64, 65,211,210,211,210,211,210,211
  .DB  67,211,210,211,210,211, 65,234,241, 56, 57,222,210,211,210,232
  .DB  65,211, 65,232, 67,232,223,224,225,226,210,211, 67,211, 65, 65
  .DB 210, 67,210,211, 67,211,219,220,210,211,210,232,210,211,210,211
  .DB 210,232,210,211,210,211,210, 64, 64, 64, 64,211,210,232,219,220
  .DB 210,211,210,221,210,211,210, 67,210,221,210, 67,219,220,210,211
  .DB 210,211,210,211,210,211,210,211,210,211, 67,232,219,220,210,221
  .DB 210,232,210,234,241, 58, 54, 55, 45, 46,123,242,231,233,228,233
  .DB 231,233,228,235,210,211,217,218,210,211, 67,211,210,211, 67,211
  .DB  67,211,217,218, 67,211,210,211, 67,211,210, 65,210,211,210,232
  .DB 210, 11,210,211,210,211, 11,211,210,211,210,211,210,211,210,211
  .DB 210,236,228,230,217,218,210,211,210,221, 11, 64,145,143, 64,211
  .DB 210,211,210,211,217,218,210,211,210,211,210,211, 64,143,144,145
  .DB  64, 11,210,211,210,211,210,211, 11,211,210,211, 13,211,210,  9
  .DB  10, 10, 14,211, 12,  6,210,221, 12, 14,210,211,210,211,210,211
  .DB 210,211,210,211,210,211, 11, 65, 65, 64, 64, 65, 65, 65, 65, 65

bmble_m:.DB     H'40,H'00
        .DB     ME+N16,MDs+N16,MD+N16,MCs+N16,MD+N16,MCs+N16,MC+N16,LB+N16
        .DB     MC+N16,LB+N16,LBb+N16,LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16
        .DB     ME+N16,MDs+N16,MD+N16,MCs+N16,MD+N16,MCs+N16,MC+N16,LB+N16

        .DB     MC+N16,LB+N16,LBb+N16,LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16
        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16
        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16

        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LC+N16,LF+N16,LE+N16,LDs+N16
        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16,LD+N16,LDs+N16
        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LC+N16,LF+N16,LE+N16,LDs+N16

        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16,LD+N16,LDs+N16
        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16
        .DB     LC+N16,LCs+N16,LD+N16,LDs+N16,LE+N16,LF+N16,LE+N16,LD+N16

        .DB     LE+N16,LDs+N16,LD+N16,LCs+N16,LD+N16,LCs+N16,LC+N16,LCs+N16
        .DB     LC+N16,LCs+N16,LD+N16,LDs+N16,LE+N16,LFs+N16,LG+N16,LGs+N16
        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16,LBb+N16,LA+N16,LGs+N16

        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16,LFs+N16,LG+N16,LGs+N16
        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16,LBb+N16,LA+N16,LGs+N16
        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LF+N16,LFs+N16,LG+N16,LGs+N16

        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LG+N16,LFs+N16,LF+N16,LE+N16
        .DB     LF+N16,LFs+N16,LG+N16,LGs+N16,LA+N16,LBb+N16,LA+N16,LGs+N16
        .DB     LA+N16,LGs+N16,LG+N16,LFs+N16,LG+N16,LFs+N16,LF+N16,LE+N16

        .DB     LF+N16,LFs+N16,LG+N16,LGs+N16,LA+N16,LBb+N16,LA+N16,LGs+N16
        .DB     LA+N8,REST+N8,LE+N16,LF+N16,LFs+N16,LG+N16
        .DB     LGs+N16,LA+N16,LBb+N16,LB+N16,MC+N16,MCs+N16,MD+N16,MDs+N16

        .DB     ME+N16,MF+N16,MFs+N16,MG+N16,MGs+N16,MA+N16,MBb+N16,MB+N16
        .DB     MC+N16,MCs+N16,MD+N16,MDs+N16,ME+N16,MFs+N16,MG+N16,MGs+N16
        .DB     MA+N8,REST+N8,REST+N4

        .DB     MA+N8,REST+N8,REST+N4
        .DB     LA+N8,REST+N8,REST+N4

        .DB     REWIND

bmble_mb: .DB     ME+N2
        .DB     REST+N2
        .DB     ME+N2

        .DB     REST+N2
        .DB     REST+N2
        .DB     REST+N2

        .DB     LA+N2
        .DB     LA+N4,MFs+N4
        .DB     LA+N2

        .DB     LA+N4,MFs+N4
        .DB     LA+N4,MF+N4
        .DB     MA+N4,MB+N4

        .DB     MA+N4,MA+N4
        .DB     MA+N4,MB+N4
        .DB     MA+N4,MA+N4

        .DB     MD+N4,MB+N4
        .DB     MD+N2
        .DB     MD+N4,MB+N4

        .DB     MD+N4,MBb+N4
        .DB     MD+N4,MCs+N4
        .DB     MD+N4,MBb+N4

        .DB     MA+N4,MCs+N4
        .DB     LD+N8,REST+N8,REST+N4
        .DB     REST+N2

        .DB     ME+N2
        .DB     ME+N2
        .DB     MA+N8,REST+N8,REST+N4

        .DB     ME+N8,REST+N8,REST+N4
        .DB     LA+N8,REST+N8,REST+N4

        .DB     REWIND

.ORG H'BFE0
  .DB  65, 65, 64, 64, 65, 65, 65, 64, 65,211,210, 65, 66, 66, 66, 66
  .DB  65,211, 65,211,210,211, 67,232,223,244,225,226,210,211,210,221
  .DB 210,211, 67,221, 67,221, 65,211,210,211, 65,211, 65,211,210, 67
  .DB 210, 65,210, 65, 65,211,210, 65, 66, 65,210,221, 64, 64, 64,211
  .DB 210,221,210,211,219,220,210,211,210,211,210,211,210,221,210,211
  .DB 210,211,210, 64, 64, 64,210, 67,210,232,210, 67,210,211,210,211
  .DB 219,220,210,211,210,211,210,211,210,211, 67,221,210,211, 65,232
  .DB  65,221,210,232,212, 53, 56, 57, 47, 48, 53,242,228,230,210, 65
  .DB 210,211,210,211,210,211,210,211,210,211, 65,211, 65,211, 67,211
  .DB  65,211, 65,211, 67,211, 65,211, 65, 65,210,  8, 10,  6,210,221
  .DB 210, 11,210,211,210,211, 11,211,210,211,217,218,  8, 10, 10, 10
  .DB  14,211,210,232,210,211,210,211,210,221, 11, 64, 64, 64, 64,233
  .DB 228,230,210,211,210,211, 12, 10, 14,234,228,233, 64, 64, 64, 64
  .DB  64, 11,210,211, 12, 14,210,211,  5,211,210,211, 11,211,210,211
  .DB 210,211,210,211,210, 11,210,221,210,211,210,211,210,211,210,211
  .DB 210,211,210,211,210,211, 11, 65, 65, 64, 64, 65, 65, 65, 65, 65

blued_mb: .DB     REST+N2,REST+N4
        .DB     LD+N4,MFs+N4,MFs+N4
        .DB     LD+N4,MFs+N4,MFs+N4
        .DB     LD+N4,MD+N4,MA+N4
        .DB     LD+N4,MD+N4,MFs+N4
        .DB     LE+N4,MA+N4,MA+N4
        .DB     LE+N4,MA+N4,MA+N4

        .DB     LE+N4,MCs+N4,MA+N4
        .DB     LE+N4,MCs+N4,MCs+N4
        .DB     LA+N4,MA+N4,MA+N4
        .DB     LA+N4,MA+N4,MA+N4
        .DB     LA+N4,MCs+N4,MA+N4
        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LD+N4,MD+N4,MD+N4
        .DB     LD+N4,MD+N4,MD+N4

        .DB     LD+N4,MD+N4,MA+N4
        .DB     LD+N4,MD+N4,MD+N4
        .DB     MFs+N4,MD+N4,MD+N4
        .DB     MFs+N4,MD+N4,MD+N4
        .DB     MFs+N4,MD+N4,MA+N4
        .DB     MFs+N4,MD+N4,MD+N4
        .DB     MG+N4,MB+N4,MB+N4
        .DB     MG+N4,MB+N4,MB+N4
        .DB     MB+N4,REST+N4,LE+N4

        .DB     LE+N4,MG+N4,MB+N8,REST+N8
        .DB     LE+N4,MG+N4,MG+N4
        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LD+N4,MA+N4,MA+N4
        .DB     MFs+N4,MD+N4,MD+N4
        .DB     MB+N2,REST+N4
        .DB     MG+N2,REST+N4
        .DB     MFs+N4,REST+N4,MA+N4
        .DB     REST+N2,REST+N4

        .DB     LE+N4,ME+N4,ME+N4
        .DB     LE+N4,MGs+N4,MGs+N4
        .DB     LE+N4,MGs+N4,MG+N4
        .DB     LE+N4,MG+N4,MG+N4
        .DB     LE+N4,MGs+N4,MGs+N4
        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LA+N4,MCs+N4,MCs+N4

        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LA+N4,MD+N4,MCs+N4
        .DB     LE+N4,MD+N4,MD+N4
        .DB     LE+N4,MD+N4,MCs+N4
        .DB     LE+N4,MD+N4,MD+N4
        .DB     LE+N4,MD+N4,MD+N4

        .DB     MB+N2,MA+N4
        .DB     MB+N2,REST+N4
        .DB     LE+N4,MGs+N4,LE+N4
        .DB     MA+N4,REST+N2

        .DB     LE+N4,ME+N4,ME+N4
        .DB     LE+N4,MGs+N4,MGs+N4
        .DB     LE+N4,MGs+N4,MG+N4
        .DB     LE+N4,MG+N4,MG+N4
        .DB     LE+N4,MGs+N4,MGs+N4
        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LA+N4,MCs+N4,MCs+N4

        .DB     LA+N4,MCs+N4,MCs+N4
        .DB     LA+N4,MD+N4,MCs+N4
        .DB     LE+N4,MD+N4,MD+N4
        .DB     LE+N4,MD+N4,MCs+N4
        .DB     LE+N4,MD+N4,MD+N4
        .DB     LE+N4,MD+N4,MD+N4

        .DB     MB+N2,MA+N4
        .DB     MB+N2,REST+N4
        .DB     LE+N4,MGs+N4,LE+N4
        .DB     MA+N4,REST+N2

        .DB     REWIND

.ORG H'C1E0
  .DB  65, 65, 64, 65, 65, 65, 65, 64, 65,211,210,211,210,211,210,211
  .DB 210,211, 67,211,210,211, 67,221,210,236,228, 65, 66, 65,210,221
  .DB 210,211, 67,232, 65,232, 67,211,219,220, 67,211,210,211,210, 67
  .DB 210,211,219,220,210,211,210, 67,210,211,210,236, 64, 68, 64, 64
  .DB  64, 64, 64, 64, 64, 64,210,211,210,211,219,220, 64, 64, 64, 64
  .DB  64, 64, 64, 64, 68, 64,210, 65,210, 65, 66, 65,210,211, 65, 66
  .DB  65,211,210, 65, 66, 66, 66, 66, 66, 66, 65,232,210,211, 67,221
  .DB 210,232,210,221,223,224,225,244,225,244,225,226,210,232,210,211
  .DB 210,211,210, 12, 10, 10,  6,211,210,211,210,211, 67,211, 67,211
  .DB 210,211, 67,211, 67,211, 67,211,210,211,210, 11,210, 11,210,232
  .DB 210,  9, 10, 10, 10, 10,  7,211,210,211,210,211, 11, 64, 64, 64
  .DB  64,233,228,235,210,211,210,211,210,232,  9, 10, 10, 10, 10,  6
  .DB 210,232,210,211,210,211,210,211,210,232,210, 13, 64,145,144,144
  .DB  64, 11,217,218,210,211,210,211,210,211, 13, 13, 11,211,217,218
  .DB 210,211,210,211,210, 11,210,232,210,211,210,211, 12, 10, 10, 10
  .DB  10, 10, 10, 10, 10,  6, 11, 65, 65, 64, 64, 65, 65, 65, 65, 65

blued_m:  .DB     H'40,H'00
        .DB     LD+N4,LFs+N4,LA+N4
        .DB     LA+N2,MA+N4
        .DB     MA+N4,REST+N4,MFs+N4
        .DB     MFs+N4,REST+N4,LD+N4
        .DB     LD+N4,LFs+N4,LA+N4
        .DB     LA+N2,MA+N4
        .DB     MA+N4,REST+N4,MG+N4

        .DB     MG+N4,REST+N4,LCs+N4
        .DB     LCs+N4,LE+N4,LB+N4
        .DB     LB+N2,MB+N4
        .DB     MB+N4,REST+N4,MG+N4
        .DB     MG+N4,REST+N4,LCs+N4
        .DB     LCs+N4,LE+N4,LB+N4
        .DB     LB+N2,MB+N4
        .DB     MB+N4,REST+N4,MFs+N4

        .DB     MFs+N4,REST+N4,LD+N4
        .DB     LD+N4,LFs+N4,LA+N4
        .DB     MD+N2,MD+N4
        .DB     MD+N4,REST+N4,LA+N4
        .DB     LA+N4,REST+N4,LD+N4
        .DB     LD+N4,LFs+N4,LA+N4
        .DB     MD+N2,MD+N4
        .DB     MD+N4,REST+N4,LB+N4
        .DB     LB+N4,REST+N4,ME+N4

        .DB     ME+N4,MG+N4,MB+N4
        .DB     MB+N2,REST+N4
        .DB     REST+N4,MGs+N4,MA+N4
        .DB     MFs+N2,REST+N4
        .DB     REST+N4,MD+N4,MFs+N4
        .DB     MFs+N2,ME+N4
        .DB     MB+N2,MA+N4
        .DB     MD+N4,REST+N8,MD+N8,MD+N4
        .DB     REST+N4,MD+N8,REST+N8,MCs+N8,REST+N8

        .DB     MCs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,LB+N8,REST+N8,LAs+N8,REST+N8
        .DB     LAs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,ME+N8,REST+N8,ME+N8,REST+N8
        .DB     MFs+N2,ME+N4
        .DB     REST+N4,ME+N8,REST+N8,ME+N8,REST+N8

        .DB     MB+N2,MA+N4
        .DB     REST+N4,MD+N8,REST+N8,MCs+N8,REST+N8
        .DB     MCs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,LB+N8,REST+N8,MCs+N8,REST+N8
        .DB     ME+N8,REST+N8,MD+N8,REST+N8,MD+N8,REST+N8
        .DB     REST+N4,MGs+N8,REST+N8,MB+N8,REST+N8

        .DB     MB+N2,MA+N4
        .DB     MGs+N4,REST+N8,MFs+N8,MD+N8,LB+N8
        .DB     MFs+N8,MFs+N8,MFs+N4,ME+N4
        .DB     LA+N4,MD+N8,REST+N8,MCs+N8,REST+N8

        .DB     MCs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,LB+N8,REST+N8,LAs+N8,REST+N8
        .DB     LAs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,ME+N8,REST+N8,ME+N8,REST+N8
        .DB     MFs+N2,ME+N4
        .DB     REST+N4,ME+N8,REST+N8,ME+N8,REST+N8

        .DB     MB+N2,MA+N4
        .DB     REST+N4,MD+N8,REST+N8,MCs+N8,REST+N8
        .DB     MCs+N8,REST+N8,LB+N8,REST+N8,LB+N8,REST+N8
        .DB     REST+N4,LB+N8,REST+N8,MCs+N8,REST+N8
        .DB     ME+N8,REST+N8,MD+N8,REST+N8,MD+N8,REST+N8
        .DB     REST+N4,MGs+N8,REST+N8,MB+N8,REST+N8

        .DB     MB+N2,MA+N4
        .DB     MGs+N4,REST+N8,MFs+N8,MD+N8,LB+N8
        .DB     MFs+N8,MFs+N8,MFs+N4,ME+N4
        .DB     LA+N2,REST+N4

        .DB     REWIND


.ORG H'C3E0
  .DB  65, 65, 65, 64, 65, 65, 64, 65, 65,233,228,230,219,220,210,211
  .DB 210,211, 67,211, 65,211, 67,236,228,230,210,232,210,211,210,232
  .DB 210,211, 67,236,228,235, 67,211,210,211, 67,211,210,211,210, 67
  .DB 210,211,210,211,210,211,210, 67,210,211,210,211, 64, 68, 64, 68
  .DB  68, 68, 68, 68, 68, 64, 64, 64, 64, 64, 64, 64, 64, 68, 68, 68
  .DB  68, 68, 68, 64, 68, 64,228,233,228,235,219,220,210,211, 67,211
  .DB 210,211,210,211,210,211,210,211,219,220,210,221, 65,211, 65,232
  .DB 210,221,210,232,210,211,210,232,210,221,210,211, 65,221,210,211
  .DB 210, 64, 64, 64, 64, 64, 11,211,210,211,210,211, 67,211, 67,211
  .DB 217,218, 67,211, 67,211, 67,211,217,218,210, 11,210, 11,210,221
  .DB 217,218,210,211,210,211,210,211,210,211,210,211, 11, 64,143,144
  .DB  64,233,228,233,231,233,228,233,231,235,210,211,210,211,210, 11
  .DB 210,221,210,211,210,211,210,211,210,221,210, 11, 64, 64, 64, 64
  .DB  64, 11,210,211,210,211,210,211,210,211, 11, 11, 11, 13,210,211
  .DB 210,211,210,211,210, 11,210,221,210,211, 12, 10, 10, 10, 10, 10
  .DB   6,211,  8,  6,210, 11, 11, 65, 65, 64, 64, 65, 65, 65, 65, 65

march_m:.DB     H'C0,H'00
        .DB     MD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     MD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     MD+N8,LA+N8,MD+N8,LA+N8
        .DB     MD+N8,LA+N8,LFs+N8,LA+N8
        .DB     MD+N8,LA+N8,MD+N8,MFs+N8
        .DB     MA+N2

        .DB     MA+N4,MG+N8,MFs+N8
        .DB     ME+N4,MFs+N8,ME+N8
        .DB     MD+N4,ME+N8,MFs+N8
        .DB     LA+N8,LB+N8,LA+N8,REST+N8
        .DB     MA+N4,MG+N8,MFs+N8

        .DB     MB+N4,MA+N8,MFs+N8
        .DB     MG+N8,MA+N16,MG+N16,MFs+N8,MG+N16,MFs+N16
        .DB     ME+N16,LE+N16,LFs+N16,LG+N16,LA+N16,LB+N16,MCs+N16,MD+N16
        .DB     ME+N8,ME+N16,ME+N16,MD+N8,ME+N8
        .DB     MFs+N8,MG+N8,MA+N4

        .DB     ME+N8,MFs+N8,MG+N4
        .DB     MFs+N8,ME+N8,MD+N4
        .DB     ME+N8,ME+N16,ME+N16,MD+N8,ME+N8
        .DB     MFs+N8,MG+N8,MA+N4
        .DB     LGs+N8,LA+N8,LB+N8,MCs+N8

        .DB     LA+N8,LA+N16,LA+N16,LA+N8,LA+N8

        .DB     MD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     MD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     MD+N8,LA+N8,MD+N8,LA+N8
        .DB     MD+N8,LA+N8,LFs+N8,LA+N8
        .DB     MD+N8,LA+N8,MD+N8,MFs+N8
        .DB     MA+N2

        .DB     MA+N4,MG+N8,MFs+N8
        .DB     ME+N4,MFs+N8,ME+N8
        .DB     MD+N4,ME+N8,MFs+N8
        .DB     LA+N8,LB+N8,LA+N8,REST+N8
        .DB     MA+N4,MG+N8,MFs+N8

        .DB     MB+N4,MA+N8,MFs+N8
        .DB     MG+N8,MA+N16,MG+N16,MFs+N8,MG+N16,MFs+N16
        .DB     ME+N16,LE+N16,LFs+N16,LG+N16,LA+N16,LB+N16,MCs+N16,MD+N16
        .DB     ME+N8,ME+N16,ME+N16,MD+N8,ME+N8
        .DB     MFs+N8,MG+N8,MA+N4

        .DB     ME+N8,MFs+N8,MG+N4
        .DB     MFs+N8,ME+N8,MD+N4
        .DB     ME+N8,ME+N16,ME+N16,MD+N8,ME+N8
        .DB     MFs+N8,MG+N8,MA+N4
        .DB     LGs+N8,LA+N8,LB+N8,MCs+N8

        .DB     LA+N8,ME+N16,ME+N16,ME+N8,ME+N8
        .DB     MG+N8,ME+N16,ME+N16,MDs+N8,ME+N8
        .DB     MGs+N8,ME+N16,ME+N16,MDs+N8,ME+N8

        .DB     REWIND

.ORG H'C5E0
  .DB  65, 65, 65, 65, 64, 64, 65, 65, 65,211,210,232, 65, 66, 66, 66
  .DB  66, 66, 65,211, 67,211, 67,211,210,232,210,221,219,220,210,221
  .DB 210,211, 67,211,210,211, 67,211, 65, 66, 65, 66, 66, 66, 66, 65
  .DB  66, 66, 66, 66, 66, 66, 66, 65,210,211,210,234, 64, 68, 64, 68
  .DB  68, 68, 68, 68, 68, 64, 68, 68, 68, 68, 68, 68, 64, 68, 68, 68
  .DB  68, 68, 68, 64, 68, 64,210,211,210,211,210,211,210,211, 67,211
  .DB 210,234,228,233,228,233,228,233,228,233,228,235, 67,211,210,221
  .DB 210,232,210,221,210,211, 65,221, 65,232,217,218,210,236,228,233
  .DB 228, 64,143,144,145, 64, 11,211, 65, 66, 66, 66, 65, 66, 65, 66
  .DB  66, 66, 65, 66, 65, 66, 65, 66, 66, 66, 65, 11,210, 11,210,236
  .DB 228,233,228,233,228,233,228,233,228,233,228,230, 11, 64,144,145
  .DB  64,233,228,233,228,233,228,230,210,211,210,211,  8, 10, 10,  7
  .DB 210,221,210,211,210,234,228,233,228,235,210, 11, 64,143,144,144
  .DB  64,  9, 10, 10, 14,211,  8, 10, 10, 10,  7,  9,  7, 11,210,211
  .DB  13,211,210,211,210, 11,210,221,210, 12, 10, 10, 10, 10, 10,  6
  .DB  11,211, 11,  9, 10,  7, 11, 65, 64, 64, 64, 64, 65, 65, 65, 65


march_mb:.DB     LD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     LD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     LD+N8,LA+N8,LD+N8,LA+N8
        .DB     LD+N8,LA+N8,LFs+N8,LA+N8
        .DB     LA+N8,LA+N8,LD+N8,MFs+N8
        .DB     MA+N2

        .DB     LD+N8,MD+N16,MD+N16,MD+N8,MD+N8
        .DB     LA+N8,ME+N16,ME+N16,ME+N8,ME+N8
        .DB     LD+N8,MD+N16,MD+N16,MCs+N8,MD+N8
        .DB     LA+N8,ME+N16,ME+N16,ME+N8,ME+N8
        .DB     LD+N8,MD+N16,MD+N16,MD+N8,MD+N8

        .DB     LB+N8,MDs+N16,MDs+N16,MDs+N8,MDs+N8
        .DB     LE+N8,ME+N8,LB+N8,MB+N8
        .DB     MB+N4,REST+N4
        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N4,REST+N8,MFs+N8

        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N8,MA+N8,MD+N4
        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N4,REST+N8,MD+N8
        .DB     MB+N8,MCs+N8,MD+N8,ME+N8

        .DB     MCs+N8,LA+N16,LA+N16,LA+N8,LA+N8

        .DB     LD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     LD+N8,LA+N16,LA+N16,LGs+N8,LA+N8
        .DB     LD+N8,LA+N8,LD+N8,LA+N8
        .DB     LD+N8,LA+N8,LFs+N8,LA+N8
        .DB     LA+N8,LA+N8,LD+N8,MFs+N8
        .DB     MA+N2

        .DB     LD+N8,MD+N16,MD+N16,MD+N8,MD+N8
        .DB     LA+N8,ME+N16,ME+N16,ME+N8,ME+N8
        .DB     LD+N8,MD+N16,MD+N16,MCs+N8,MD+N8
        .DB     LA+N8,ME+N16,ME+N16,ME+N8,ME+N8
        .DB     LD+N8,MD+N16,MD+N16,MD+N8,MD+N8

        .DB     LB+N8,MDs+N16,MDs+N16,MDs+N8,MDs+N8
        .DB     LE+N8,ME+N8,LB+N8,MB+N8
        .DB     MB+N4,REST+N4
        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N4,REST+N8,MFs+N8

        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N8,MA+N8,MD+N4
        .DB     MA+N4,REST+N8,MA+N8
        .DB     MD+N4,REST+N8,MD+N8
        .DB     MB+N8,MCs+N8,MD+N8,ME+N8

        .DB     MCs+N8,LE+N16,LE+N16,LE+N8,LE+N8
        .DB     MG+N8,LE+N16,LE+N16,LDs+N8,LE+N8
        .DB     MGs+N8,LE+N16,LE+N16,LDs+N8,LE+N8

        .DB     REWIND

.ORG H'C7E0
  .DB  65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 65,236,228,233,228,230
  .DB 210,211,210,211, 65, 66, 65,211,210,221,210,232, 65, 65,210,221
  .DB  65, 66, 65, 66, 66, 66, 65, 66, 65,211,210,234,228,233,231,233
  .DB 228,233,231,233,228,233,231,233,228,233,228,235, 64, 64, 64, 64
  .DB  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64
  .DB  64, 64, 64, 64, 64, 64, 65, 66, 66, 66, 66, 66, 66, 66, 65,211
  .DB 210,232, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65,211,210,232
  .DB 210,221,210,232,219,220,225,232,210,221,210,211,210,211,210,211
  .DB 210, 64, 64, 64, 64, 64,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10
  .DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,210, 11,210,211
  .DB   8, 10, 10, 10, 10, 10, 10, 10, 10,  6,210,232, 11, 64, 64, 64
  .DB  64,211,210,211,210,211,210,232,217,218,210,211, 11,211,210,211
  .DB 210,232,210,211,210,232,210,211,  8, 10, 10,  7, 64, 64, 64, 64
  .DB  64, 64, 64, 64, 64, 64, 11, 64, 64, 64, 64, 64, 64, 11, 64, 64
  .DB  11, 64, 64, 13, 64, 11,210,232, 12, 10, 10,  6, 65, 65, 65, 11
  .DB  11, 65, 11, 65, 65, 65, 11, 65, 65, 65, 65, 65, 65, 65, 65, 65
; THIS MARKS H'C8E0

rondo_m:.DB     H'C0,H'00
        .DB     LB+N16,LA+N16,LGs+N16,LA+N16
        .DB     MC+N8,REST+N8,MD+N16,MC+N16,LB+N16,MC+N16
        .DB     ME+N8,REST+N8,MF+N16,ME+N16,MDs+N16,ME+N16
        .DB     MB+N16,MA+N16,MGs+N16,MA+N16,MB+N16,MA+N16,MGs+N16,MA+N16
        .DB     MC+N4,LA+N8,MC+N8

        .DB     MB+N8,MA+N8,MG+N8,MA+N8
        .DB     MB+N8,MA+N8,MG+N8,MA+N8
        .DB     MB+N8,MA+N8,MG+N8,Mfs+N8
        .DB     ME+N4
        .DB     ME+N8,MF+N8
        .DB     MG+N8,MG+N8,MA+N16,MG+N16,MF+N16,ME+N16
        .DB     MD+N4,ME+N8,MF+N8

        .DB     MG+N8,MG+N8,MA+N16,MG+N16,MF+N16,ME+N16
        .DB     MD+N4,MC+N8,MD+N8
        .DB     ME+N8,ME+N8,MF+N16,ME+N16,MD+N16,MC+N16
        .DB     LB+N4,MC+N8,MD+N8
        .DB     ME+N8,ME+N8,MF+N16,ME+N16,MD+N16,MC+N16
        .DB     LB+N4,LB+N16,LA+N16,LGs+N16,LA+N16
        .DB     MC+N8,REST+N8,MD+N16,MC+N16,LB+N16,MC+N16

        .DB     ME+N8,REST+N8,MF+N16,ME+N16,MDs+N16,ME+N16
        .DB     MB+N16,MA+N16,MGs+N16,MA+N16,MB+N16,MA+N16,MGs+N16,MA+N16
        .DB     MC+N4,LA+N8,LB+N8
        .DB     MC+N8,LB+N8,LA+N8,LGs+N8
        .DB     LA+N8,LE+N8,LF+N8,LD+N8
        .DB     MC+N4,LB+N4
        .DB     LA+N4

        .DB     LA+N8,LB+N8
        .DB     MCs+N4,LA+N8,LB+N8
        .DB     MCs+N8,LB+N8,LA+N8,LGs+N8
        .DB     LFs+N8,LGs+N8,LA+N8,LB+N8
        .DB     LGs+N8,LE+N8,LA+N8,LB+N8
        .DB     MCs+N4,LA+N8,LB+N8

        .DB     MCs+N8,LB+N8,LA+N8,LGs+N8
        .DB     LFs+N8,LB+N8,LGs+N8,LE+N8
        .DB     LA+N4

        .DB     LA+N8,LB+N8
        .DB     MCs+N4,LA+N8,LB+N8
        .DB     MCs+N8,LB+N8,LA+N8,LGs+N8
        .DB     LFs+N8,LGs+N8,LA+N8,LB+N8
        .DB     LGs+N8,LE+N8,LA+N8,LB+N8
        .DB     MCs+N4,LA+N8,LB+N8

        .DB     MCs+N8,LB+N8,LA+N8,LGs+N8
        .DB     LFs+N8,LB+N8,LGs+N8,LE+N8
        .DB     LA+N4,REWIND

rondo_mb:.DB     REST+N4
        .DB     MA+N8,MC+N8,MC+N8,MC+N8
        .DB     MA+N8,MC+N8,MC+N8,MC+N8
        .DB     MA+N8,MC+N8,MA+N8,MC+N8
        .DB     MA+N8,MC+N8,MC+N8,MC+N8

        .DB     LE+N8,MB+N8,MB+N8,MB+N8
        .DB     LE+N8,MB+N8,MB+N8,MB+N8
        .DB     LE+N8,MB+N8,LB+N8,MB+N8
        .DB     LE+N4
        .DB     REST+N4
        .DB     LC+N8,MC+N8,LE+N8,ME+N8
        .DB     MG+N4,REST+N4

        .DB     LC+N8,MC+N8,LE+N8,ME+N8
        .DB     MG+N4,REST+N4
        .DB     LA+N8,MA+N8,LC+N8,MC+N8
        .DB     LE+N4,REST+N4
        .DB     LA+N8,MA+N8,LC+N8,MC+N8
        .DB     LE+N4,REST+N4
        .DB     MA+N8,MC+N8,MC+N8,MC+N8

        .DB     MA+N8,MC+N8,MC+N8,MC+N8
        .DB     MA+N8,MC+N8,MA+N8,MC+N8
        .DB     MF+N8,MA+N8,MA+N8,MA+N8
        .DB     LE+N8,MA+N8,LD+N8,MF+N8
        .DB     LC+N8,LE+N8,LD+N8,MF+N8
        .DB     ME+N8,ME+N8,MGs+N8,MGs+N8,MA+N4

        .DB     REST+N4
        .DB     MA+N4,MA+N4
        .DB     MA+N4,MA+N4
        .DB     LD+N4,LDs+N4
        .DB     LE+N4,LE+N4
        .DB     MA+N4,MA+N4

        .DB     MA+N4,MA+N4
        .DB     LD+N4,LE+N4
        .DB     LA+N4

        .DB     REST+N4
        .DB     MA+N4,MA+N4
        .DB     MA+N4,MA+N4
        .DB     LD+N4,LDs+N4
        .DB     LE+N4,LE+N4
        .DB     MA+N4,MA+N4

        .DB     MA+N4,MA+N4
        .DB     LD+N4,LE+N4
        .DB     LA+N4,REWIND

title:
  .DB 126,163,167,168,169,124,125, 63,124,125, 64,185,186, 63,125,124
  .DB  64,164, 63,  1,  2,  3,  4,  5,  6,126, 63,187, 63,124,125,126
  .DB  63,165, 13,  7,  8,  9, 10, 11, 12,124,126, 63,125,126,171,172
  .DB 125,166, 14, 15, 16, 17, 18, 19, 20, 64, 63,124,125, 64,173,182
  .DB  63,124, 21, 22, 23, 24, 25, 26, 27, 63,126,126, 63,174,183,182
  .DB  64,126,125, 63,124, 64,125, 64,126, 63, 64,125, 64,175,182,182
  .DB 125,125, 63,126,126, 92, 93, 94, 64,124, 63,125, 63,176,182,182
  .DB 124,126,124, 64, 63, 95, 96, 97, 63, 64,125,126, 64,177,182,182
  .DB  64, 63,126, 63,126, 64, 63, 98,125,125, 64,126, 63,178,182,182
  .DB  63, 64, 64,125,124,125,124, 64, 63,124, 63,124, 64,179,182,182
  .DB 126, 63,124, 64,125,126, 63,126, 64,125, 64, 64,125,180,182,182
  .DB 125, 64, 64,124, 64,125,126, 63,124,126,125,124, 64,181,182,182

cdt:
.DB 'C'-'A'+174, 'O'-'A'+174, 'P'-'A'+174, 'Y'-'A'+174, 'R'-'A'+174, 'I'-'A'+174
.DB 'G'-'A'+174, 'H'-'A'+174, 'T'-'A'+174, 0, 2, 10, 9, 10, 0, 'B'-'A'+174
.DB 'Y'-'A'+174, 0, 'C'-'A'+174, 'O'-'A'+174, 'L'-'A'+174, 'O'-'A'+174, 'R'-'A'+174
.DB 0, 'D'-'A'+174, 'R'-'A'+174, 'E'-'A'+174, 'A'-'A'+174, 'M'-'A'+174, 'S'-'A'+174

dpal:   .DB  H'FF,7,H'FF,0,H'FF,7,1,H'0B,H'FF,7,H'27,6,H'FF,7,H'FF,H'FF

tover:  .DB  'G'-'A'+174, 'A'-'A'+174, 'M'-'A'+174, 'E'-'A'+174, 0
        .DB  'O'-'A'+174, 'V'-'A'+174, 'E'-'A'+174, 'R'-'A'+174
tinv1:  .DB  'I'-'A'+174, 'N'-'A'+174, 'V'-'A'+174, 'E'-'A'+174, 'N'-'A'+174
        .DB  'T'-'A'+174, 'O'-'A'+174, 'R'-'A'+174, 'Y'-'A'+174
tinv2:  .DB  'B'-'A'+174, 'L'-'A'+174, 'A'-'A'+174, 'S'-'A'+174, 'T'-'A'+174
        .DB  0,'L'-'A'+174, 'E'-'A'+174, 'V'-'A'+174, 'E'-'A'+174
        .DB  'L'-'A'+174, 0
tinv3:  .DB  'D'-'A'+174, 'O'-'A'+174, 'O'-'A'+174, 'R'-'A'+174, 0
        .DB  'K'-'A'+174, 'E'-'A'+174, 'Y'-'A'+174
tinv4:  .DB  'C'-'A'+174, 'O'-'A'+174, 'R'-'A'+174, 'K'-'A'+174, 'S'-'A'+174
        .DB  'C'-'A'+174, 'R'-'A'+174, 'E'-'A'+174, 'W'-'A'+174
tinv5:  .DB  'P'-'A'+174, 'O'-'A'+174, 'W'-'A'+174, 'E'-'A'+174, 'R'-'A'+174
        .DB  0,'B'-'A'+174, 'O'-'A'+174, 'O'-'A'+174, 'T'-'A'+174
        .DB  'S'-'A'+174
tinv6:  .DB  'T'-'A'+174, 'E'-'A'+174, 'L'-'A'+174, 'E'-'A'+174, 'P'-'A'+174
        .DB  'O'-'A'+174, 'R'-'A'+174, 'T'-'A'+174
        .DB  0,'W'-'A'+174, 'A'-'A'+174, 'N'-'A'+174, 'D'-'A'+174
tinv7:  .DB  'L'-'A'+174, 'A'-'A'+174, 'N'-'A'+174, 'T'-'A'+174, 'E'-'A'+174
        .DB  'R'-'A'+174, 'N'-'A'+174
tinv8:  .DB  'T'-'A'+174, 'R'-'A'+174, 'E'-'A'+174, 'A'-'A'+174, 'S'-'A'+174
        .DB  'U'-'A'+174, 'R'-'A'+174, 'E'-'A'+174, 'S'-'A'+174

row1:   .DB     0,22,15,20,21,16,0,0,0,0,0,0,0,0,0
        .DB     0,0,0,0,17,18,23,17,0,0,0,0,0,0,0,0,0
row2:   .DB     0,22,12,0,0,0,0,0,0,0,0,0,0
        .DB     19,18,14,16,12,0,0,0,14,12,0,0,0,0,0,0,0,0,0

FREQ_TABLE:
.DRW	H'1AB		;C	
.DRW	H'191		;C#	
.DRW	H'17A		;D	
.DRW	H'167		;Eb	
.DRW	H'151		;E	
.DRW	H'13F		;F	
.DRW	H'12C		;F#	
.DRW	H'11C		;G	
.DRW	H'10D		;Ab	
.DRW	H'FE 		;A	
.DRW	H'EF 		;Bb	
.DRW	H'E2 		;B	
.DRW	H'D5  		;MIDDLE C	
.DRW	H'C8		;C#	
.DRW	H'BE		;D	
.DRW	H'B3		;Eb	
.DRW	H'A9		;E	
.DRW	H'9F		;F	
.DRW	H'96		;F#	
.DRW	H'8E		;G	
.DRW	H'86		;Ab	
.DRW	H'7E		;A	
.DRW	H'77		;Bb	
.DRW	H'70		;B	
.DRW	H'6A		;C	
.DRW	H'64		;C#	
.DRW	H'5E		;D	
.DRW	H'59		;Eb	
.DRW	H'54		;E	
.DRW	H'4F		;F	
.DRW	H'4B		;F#	
.DRW    H'00            ;PAUSE

;THIS TABLE HAS A 2 BYTE VALUE FOR EACH NOTE DURATION.  THIS FIRST IS
;THE NUMBER OF NMI CYCLES WE SHOULD WAIT FOR THE NOTE TO COMPLETE.
;THE SECOND IS THE VALUE TO PUT INTO THE SOUND CHIP DURATION REGISTER BITS.
TIME_BASE:
.DB      7,1                    ;1/16 NOTE
.DB     14,3                    ;1/8 NOTE
.DB     28,7                    ;1/4 NOTE
.DB     56,15                   ;1/2 NOTE
.DB    112,31                   ;WHOLE NOTE

;Sound Effects Form
; .DB   MUSIC, INST0, INST1, NOTE/DUR, ...., STOP
; .DB   NOISE, DUR, REG0, REG1, REG2, REG3, ..., 0
snd_null:   .DB  1, 60, H'00, H'00, H'00, H'00, 0
snd_jump:   .DB  1, 25, H'C7, H'8F, H'00, H'09, 0
snd_phit:   .DB  1, 25, H'EF, H'A3, H'80, H'08, 0
snd_shot:   .DB  1, 20, H'C6, H'87, H'00, H'0A, 0
snd_tport:  .DB  1, 30, H'8F, H'FA, H'00, H'0A, 0
snd_dcomp:  .DB  1, 60, H'E2, H'E4, H'80, H'01, 0
snd_drain:  .DB  1, 105, H'7F, H'95, H'80, H'00, 0
snd_pickup: .DB  0, H'8F, H'F8, LG+N16,LA+N16,LB+N16,MD+N8,LB+N16,MD+N8,STOP
snd_uplife: .DB  0, H'80, H'00, MC+N8,MC+N16,MC+N16,MG+N4,STOP
snd_up100:  .DB  0, H'8F, H'F8, LG+N16, STOP

sdie_m:    .DB  H'8F, H'F8, LC+N8,LD+N8,LC+N8,LDs+N4,STOP
sdie_mb:   .DB  LC+N8,LD+N8,LC+N8,LDs+N4,STOP

w_all_m:   .DB  H'80, H'00, MC+N8,MC+N16,MC+N16,MG+N4,MC+N8,MC+N16,MC+N16
           .DB  MA+N4,MC+N8,MC+N16,MC+N16,MB+N8,MA+N8,MB+N8,HC+N4,STOP
w_all_mb:  .DB  MC+N8,MC+N16,MC+N16,MG+N4,MC+N8,MC+N16,MC+N16
           .DB  MA+N4,MC+N8,MC+N16,MC+N16,MB+N8,MA+N8,MB+N8,HC+N4,STOP

gover_m: .DB    H'C0,H'00
         .DB    LG+N8,LA+N8
         .DB    LB+N4,LA+N8,LG+N8,LB+N4,LA+N8,LG+N8
         .DB    LG+N2,STOP
gover_mb:.DB    REST+N4
         .DB    LB+N4,LA+N8,LG+N8,LB+N4,LA+N8,LG+N8
         .DB    LG+N2,STOP

super_m:.DB     H'C0,H'00
        .DB     MA+N16,MB+N16,MA+N16,MFs+N16,MG+N16,MA+N16,MG+N16,ME+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N8
        .DB     MG+N16,MA+N16,MG+N16,ME+N16,MFs+N16,MG+N16,MFs+N16,MD+N16
        .DB     ME+N8,MA+N8,LA+N8,REST+N8

        .DB     MA+N16,MB+N16,MA+N16,MFs+N16,MG+N16,MA+N16,MG+N16,ME+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N8
        .DB     MFs+N8,MD+N16,LB+N16,MD+N8,LB+N16,LGs+N16
        .DB     LA+N8,MA+N8,LA+N8,REST+N8

        .DB     ME+N16,MG+N16,MFs+N16,MA+N16,MG+N16,MFs+N16,ME+N16,MD+N16
        .DB     MCs+N8,ME+N8,MG+N8,REST+N8
        .DB     MFs+N16,MA+N16,MG+N16,MB+N16,MA+N16,MG+N16,MFs+N16,ME+N16
        .DB     MD+N8,MFs+N8,MA+N8,REST+N8

        .DB     MB+N16,MA+N16,MA+N16,MG+N16,MG+N16,MFs+N16,MFs+N16,ME+N16
        .DB     ME+N8,MG+N8,MB+N8,REST+N8
        .DB     MA+N16,MFs+N16,MCs+N16,MD+N16,MG+N16,ME+N16,LB+N16,MCs+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N4,REWIND

super_mb:
        .DB     MA+N16,MB+N16,MA+N16,MFs+N16,MG+N16,MA+N16,MG+N16,ME+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N8
        .DB     MG+N16,MA+N16,MG+N16,ME+N16,MFs+N16,MG+N16,MFs+N16,MD+N16
        .DB     ME+N8,MA+N8,LA+N8,REST+N8

        .DB     MA+N16,MB+N16,MA+N16,MFs+N16,MG+N16,MA+N16,MG+N16,ME+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N8
        .DB     MFs+N8,MD+N16,LB+N16,MD+N8,LB+N16,LGs+N16
        .DB     LA+N8,MA+N8,LA+N8,REST+N8

        .DB     ME+N16,MG+N16,MFs+N16,MA+N16,MG+N16,MFs+N16,ME+N16,MD+N16
        .DB     MCs+N8,ME+N8,MG+N8,REST+N8
        .DB     MFs+N16,MA+N16,MG+N16,MB+N16,MA+N16,MG+N16,MFs+N16,ME+N16
        .DB     MD+N8,MFs+N8,MA+N8,REST+N8

        .DB     MB+N16,MA+N16,MA+N16,MG+N16,MG+N16,MFs+N16,MFs+N16,ME+N16
        .DB     ME+N8,MG+N8,MB+N8,REST+N8
        .DB     MA+N16,MFs+N16,MCs+N16,MD+N16,MG+N16,ME+N16,LB+N16,MCs+N16
        .DB     MD+N8,HD+N8,MD+N8,REST+N4,REWIND

;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
dan_code:

;
; Dan, place any boot-time code here.
;

INCLUDE( PULSES.ASM)		;DO THE KEY CHIP PULSES
	JSR	VERT_WAIT

;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
startup:
        lda     foo_data
        sta     foo_data          ; RESET Page

        lda     H'2002            ;RESET ADDRESS LATCH
        lda     #6                ; Disable Display
        sta     H'2001            ; Set 32 col. mode for sprites & tiles
	lda	#H'23
	sta	H'2006
	lda	#H'C0
	sta	H'2006
        ldx     #H'40
        lda     #B'01010101
plx:    sta     H'2007
	dex	
        bne     plx

        LDA     #H'20
	STA	H'2006
	LDA	#0		
	STA	H'2006

        lda     #63*4
        ldy     #30
l0:     ldx     #32
lx:     sta     H'2007
	DEX			
        BNE     lx
        dey
        BNE     l0

; Set out the palet
	lda	H'2002		;RESET ADDRESS LATCH
        lda     #H'3F
	sta	H'2006
	lda	#0		;ADDRESS ALL EVEN BYTES
	sta	H'2006
        lda     #LOGO0
	sta	H'2007		;3F00
        lda     #LOGO01
	sta	H'2007		;3F01
        lda     #LOGO02
	sta	H'2007		;3F02
        lda     #LOGO03
	sta	H'2007		;3F03
        lda     #LOGO0
        sta     H'2007          ;3F04
        lda     #LOGO11
        sta     H'2007          ;3F05
        lda     #LOGO12
        sta     H'2007          ;3F06
        lda     #LOGO13
        sta     H'2007          ;3F07
        lda     #LOGO0
        sta     H'2007          ;3F08
        lda     #LOGO21
        sta     H'2007          ;3F09
        lda     #LOGO22
        sta     H'2007          ;3F0A
        lda     #LOGO23
        sta     H'2007          ;3F0B
        lda     #LOGO0
        sta     H'2007          ;3F0C
        lda     #LOGO31
        sta     H'2007          ;3F0D
        lda     #LOGO32
        sta     H'2007          ;3F0E
        lda     #LOGO33
        sta     H'2007          ;3F0F
        lda     #H'FF
        sta     H'2007          ;3F10
        lda     #H'21
        sta     H'2007          ;3F11
        lda     #H'21
        sta     H'2007          ;3F12
        lda     #H'21
        sta     H'2007          ;3F13
        lda     #H'FF
        sta     H'2007          ;3F14
        lda     #H'20
        sta     H'2007          ;3F15
        lda     #H'10
        sta     H'2007          ;3F16
        lda     #H'00
        sta     H'2007          ;3F17
        lda     #H'FF
        sta     H'2007          ;3F18
        lda     #H'36
        sta     H'2007          ;3F19
        lda     #H'26
        sta     H'2007          ;3F1A
        lda     #H'16
        sta     H'2007          ;3F1B

        lda     #H'20
        sta     H'2006
        lda     #33+32
        sta     H'2006
        ldy     #30
        ldx     #0
lcd:    lda     cdt,x
        sta     H'2007
        inx
        dey
        bne     lcd      ; Copyright

        lda     #0
        sta     scroll_p
        sta     scroll_x
        sta     world_p
        sta     world_no
        sta     title_val
        sta     draw_busy
	sta	turn_count
        jsr     init_data
        jsr     init_sef
        jsr     init_sprites

        lda     #1
        ldx     #0
        ldy     #8
        jsr     set_pal

        lda     #H'80
        sta     tempy
        lda     #H'20
        sta     tempx
        lda     #12
        sta     tempc
        ldx     #0

logo2:  lda     tempx
	sta	H'2006
        lda     tempy
        sta     H'2006
        ldy     #16
logo1:  lda     title,x
        and     #H'3F
        asl     a
        asl     a
        sta     H'2007
        clc
        adc     #2
        sta     H'2007
        inx
        dey
        bne     logo1
        lda     tempy
        clc
        adc     #64
        sta     tempy
        lda     tempx
        adc     #0
        sta     tempx

        dec     tempc
        bne     logo2

        lda     #H'80+32
        sta     tempy
        lda     #H'20
        sta     tempx
        lda     #12
        sta     tempc
        ldx     #0

logo4:  lda     tempx
	sta	H'2006
        lda     tempy
        sta     H'2006
        ldy     #16
logo3:  lda     title,x
        and     #H'3F
        asl     a
        asl     a
        clc
        adc     #1
        sta     H'2007
        clc
        adc     #2
        sta     H'2007
        inx
        dey
        bne     logo3
        lda     tempy
        clc
        adc     #64
        sta     tempy
        lda     tempx
        adc     #0
        sta     tempx
        dec     tempc
        bne     logo4

        lda     #H'23
	sta	H'2006
        lda     #H'C8
        sta     H'2006
        ldx     #0
        ldy     #16
        lda     #6
        sta     tempy
logo6:  lda     #8
        sta     tempc
logo5:  lda     title,x           ; Get tile no.
        pha
        inx
        lda     title,x           ; Get tile no.
        pha
        inx
        lda     title,y           ; Get tile no.
        pha
        iny
        lda     title,y           ; Get tile no.
        pha
        iny
        pla
        and     #H'C0
        sta     temp
        pla
        and     #H'C0
        lsr     a
        lsr     a
        ora     temp
        sta     temp
        pla
        and     #H'C0
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        ora     temp
        sta     temp
        pla
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        ora     temp
        sta     H'2007
        dec     tempc
        bne     logo5
        txa
        clc
        adc     #16
        tax
        tya
        clc
        adc     #16
        tay
        dec     tempy
        bne     logo6

        lda     #H'15*4
        sta     tempc
        lda     #100
        sta     tempx
        ldx     #0
        ldy     #8
pstart_loop:
        lda     tempx
        sta     spX,x             ; set X
        lda     #206
        sta     spY,x             ; set Y
        lda     tempc
        sta     spC,x             ; set char
        lda     #8
        clc
        adc     tempx
        sta     tempx
        txa
        adc     #4
        tax
        inc     tempc
        dey
        bne     pstart_loop

        lda     #2*4*4
        sta     temp
        lda     #H'17*4
        sta     saux_c1
        lda     #8
        sta     saux_c2
        lda     #4
        sta     saux_c3

cred1l: lda     saux_c1
        ldx     saux_c2
        ldy     #168
        jsr     set_item
        lda     #16
        clc
        adc     temp
        sta     temp
        lda     #16
        clc
        adc     saux_c2
        sta     saux_c2
        lda     #4
        clc
        adc     saux_c1
        sta     saux_c1
        dec     saux_c3
        bne     cred1l

        lda     #8
        sta     saux_c2
        lda     #4
        sta     saux_c3

cred2l: lda     saux_c1
        ldx     saux_c2
        ldy     #186
        jsr     set_item
        lda     #16
        clc
        adc     temp
        sta     temp
        lda     #16
        clc
        adc     saux_c2
        sta     saux_c2
        lda     #4
        clc
        adc     saux_c1
        sta     saux_c1
        dec     saux_c3
        bne     cred2l

        lda     #1
        sta     saux_c1
        lda     #H'1F*4
        sta     saux_c2
        lda     #2
        ldx     #10*4*4
        ldy     #4
        jsr     set_pal
        lda     #1
        ldx     #11*4*4
        ldy     #7
        jsr     set_pal

        lda     #0
        sta     H'4000
        sta     H'4001
        sta     H'4002
        sta     H'4003
        sta     H'400C
        sta     H'400D
        sta     H'400E
        sta     H'400F

        lda     #aria_m & H'FF
        sta     mtrk1l
        lda     #aria_m >> 8
        sta     mtrk1h
        lda     #aria_mb & H'FF
        sta     mtrk2l
        lda     #aria_mb >> 8
        sta     mtrk2h
        jsr     play

title_up:
        lda     #1
        sta     title_val
        lda     #1
        sta     take_turn
        lda     #H'46
        sta     lc1
        lda     #H'14
        sta     lc2
        lda     #0
        sta     H'2005
        sta     H'2005
        lda     #H'88
        sta     scr_status
        sta     H'2000            ; Turn on NMI
        lda     #H'0E
        sta     H'2001            ; ENABLE DISPLAY
        lda     #1
        sta     saux_c1
        lda     #H'1F*4
        sta     saux_c2
        lda     #0
        sta     saux_c3
        jsr     do_stars
lstrt:  ldx     #1
        jsr     wait_loop
        dec     saux_c1
        bne     no_flame
        lda     #4
        sta     saux_c1
        lda     #10*4*4
        sta     temp
        lda     saux_c2
        ldx     #72
        ldy     #122
        jsr     set_item
        lda     saux_c2
        clc
        adc     #4
        sta     saux_c2
        cmp     #H'1F*4 + 16
        bne     no_flame
        lda     #H'1F*4
        sta     saux_c2
        jsr     do_stars
no_flame:
        jsr     read_joystick
        lda     J1FLAGS
        and     #START
        beq     lstrt
        lda     #0
        sta     H'2000            ; Turn off NMI
        lda     #0
        sta     title_val
        ldx     #1
        lda     J1FLAGS
        and     #A_BUTTON + B_BUTTON
        cmp     #A_BUTTON + B_BUTTON
        bne     no_inf
;       ldx     #0
no_inf: stx     dec_life
        jmp     gscr_init

stars:  .DB     140,141,142,143,142,141
star_l: .DB     120+16,13+16,224+16,30+16,196+16,60+16,188+16,198+16
        .DB     128+16,140+16,8,120+16,80+16,94+16

do_stars:
        lda     #0
        sta     play_count
star_loop:
        ldx     saux_c3
        lda     stars,x
        sta     tempc
        lda     play_count
        asl     a
        tax
        lda     star_l,x
        sta     tempx
        lda     star_l+1,x
        sta     tempy
        lda     play_count
        asl     a
        asl     a
        clc
        adc     #11*4*4
        tax
        lda     tempx
        sta     spX,x             ; set X
        lda     tempy
        sta     spY,x             ; set Y
        lda     tempc
        sta     spC,x             ; set char

        lda     saux_c3
        cmp     #5
        bne     nstwrp
        lda     #-1
        sta     saux_c3
nstwrp: inc     saux_c3
        inc     play_count
        lda     play_count
        cmp     #7
        bne     star_loop
        rts

gscr_init:
; Start Initailizing the game screen
        lda     #0
        sta     turn_count
        sta     take_turn
        sta     draw_busy
        lda     #H'88
        sta     scr_status        ; Disable NMI
; Fill the first two rows with tile 0
        LDA     H'2002            ; RESET ADDRESS LATCH
        LDA     #6                ; Disable Display
        STA     H'2001            ; Set 32 col. mode for sprites & tiles
	LDA	#H'20
        STA     H'2006            ; Set page 0 high
        LDA     #0
        STA     H'2006            ; Set page 0 low
        LDY     #64
        lda     #0
F0:     STA     H'2007
        DEY
        BNE     F0

        ldx     #0
l2:     lda     row1,x
        sta     H'2007
        inx
        txa
        cmp     #64
        bne     l2

        LDA     #H'24
        STA     H'2006            ; Set page 0 high
        LDA     #0
        STA     H'2006            ; Set page 0 low
        LDY     #64
        lda     #0
F1:     STA     H'2007
        DEY
        BNE     F1

; Fill the bottom two rows with tile 0
        jsr     low_zap
        jmp     over_zap
low_zap:
        LDA     H'2002            ; RESET ADDRESS LATCH
        LDA     #6                ; Disable Display
        STA     H'2001            ; Set 32 col. mode for sprites & tiles
        LDA     #H'23
        STA     H'2006            ; Set page 0 high
        LDA     #H'80
        STA     H'2006            ; Set page 0 low
        LDY     #64
        lda     #H'FC
F2:     STA     H'2007
        DEY
        BNE     F2
        rts
over_zap:
        LDA     #H'27
        STA     H'2006            ; Set page 0 high
        LDA     #H'80
        STA     H'2006            ; Set page 0 low
        LDY     #64
        lda     #H'FC
F3:     STA     H'2007
        DEY
        BNE     F3

; Initialize the score, high score, shield, and power displays
        ldx     #7
        lda     #1
iscl:   sta     score-1,x
        dex
        bne     iscl              ; initialize score

        lda     start_val         ; Check hscore field
        cmp     #25
        beq     nboot             ; Jump if this is not a "boot"
        lda     #25
        sta     start_val
        ldx     #7
        lda     #1
iscl2:  sta     hscore-1,x
        dex
        bne     iscl2             ; initialize score

; Initialize the Captain
nboot:  lda     #112
        sta     save_px
        lda     #160
        sta     save_py
        lda     #3
        sta     captain+SHP_NST
        lda     #48
        sta     captain+SHP_FT
        lda     #8
        sta     captain+SHP_NT
        lda     #6
        sta     captain+SHP_AT
        lda     #0
        sta     save_pf
        sta     save_wp
        sta     save_wx
        sta     save_sx

 ;Initialize various other values
        lda     #0
        sta     high_copy
        sta     sht_cycle
        sta     fireballs
        sta     up_cnt
        sta     superc
        lda     #1
        sta     world_no
        sta     next_type
        lda     #4
        sta     life
        lda     #3
        sta     dist_quota
        lda     #30
        sta     ehit_quota
;Initialize Item flags
        ldx     #H'24
        lda     #0
        sta     win_state
        sta     win_count
iiloop: sta     item_flags-1,x
        dex
        bne     iiloop

        jsr     init_data
        jsr     init_sprites
        jsr     init_world
        jsr     reset_player
        jsr     reset_power

;       lda     #3
;       ldx     #6*4*4
;       ldy     #4
;       jsr     set_pal
;       lda     #6*4*4
;       sta     temp
;       lda     #31*4
;       ldx     #6*16
;       ldy     #9*16+32
;       jsr     set_item

        jsr     init_music
        jsr     beam_in
        jmp     start_turn

; Music Code
init_sef:
        lda     #0
        sta     H'4002
        sta     H'4003
        sta     sef_priority
        sta     sef_cnt
        rts
; Called with A=Priority
; Called with X=LowPtr, Y=HghPtr
play_sef:
        sec
        cmp     sef_priority
        bcs     high_p
        rts
high_p: sta     sef_priority
        stx     sf_trkl
        sty     sf_trkh
        lda     #H'FF
        sta     H'4015
        ldy     #0
        lda     (sf_trkl),y       ; Get music or noise
        sta     sef_mode
        beq     sef_music
        lda     #1
        sta     sef_i
make_noise:
        ldy     sef_i
        lda     (sf_trkl),y       ; Get Duration
        beq     init_sef          ; Stop when null
        sta     sef_cnt
        iny
        lda     (sf_trkl),y       ; Get 4000
        sta     H'4000
        iny
        lda     (sf_trkl),y       ; Get 4001
        sta     H'4001
        iny
        lda     (sf_trkl),y       ; Get 4002
        sta     H'4002
        iny
        lda     (sf_trkl),y       ; Get 4003
        sta     H'4003
        lda     sef_i
        clc
        adc     #5
        sta     sef_i
        rts
sef_music:
        lda     #3
        sta     sef_i
make_sefm:
        ldy     sef_i
        lda     (sf_trkl),y       ; get note or command
        cmp     #STOP
        bne     no_stop
        jmp     init_sef
no_stop:
        lda     (sf_trkl),y       ; get main note0/dur0
        jsr     m_sub
        ldx     tempc
        stx     sef_cnt
        ldy     #1
        ora     (sf_trkl),y       ; Combine with intrument
        sta     H'4000
        iny
        lda     (sf_trkl),y        ; get instrument high
        sta     H'4001
        lda     tempx
        sta     H'4002
        lda     tempy
        ora     #8
        sta     H'4003
        inc     sef_i
        rts

; Music Helper Sub
m_sub:  pha
        and     #31
        asl     a                 ; Mult by 2
        tax
        lda     FREQ_TABLE,x      ; get freql
        sta     tempx             ; H'4002
        inx
        lda     FREQ_TABLE,x      ; get freqh
        sta     tempy             ; H'4003
        pla                       ; get main note/dur
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        asl     a
        tax
        lda     TIME_BASE,x       ; Get count
        sta     tempc
        inx
        lda     TIME_BASE,x       ; Get reg duration
        rts

; Music Code
play:   lda     #1
        sta     play_on
        lda     #2
        sta     mtrk1_i
        lda     #0
        sta     mtrk2_i
        jsr     up_trk1
        jmp     up_trk2
go_sound:
        lda     play_on
        beq     no_trk2
        dec     mtrk1_cnt
        bne     no_trk1
        jsr     up_trk1
no_trk1:
        dec     mtrk2_cnt
        bne     no_trk2
        jsr     up_trk2
no_trk2:
        lda     sef_cnt
        beq     no_sef
        dec     sef_cnt
        bne     no_sef
        lda     sef_mode
        beq     sef_rm
        jsr     make_noise
        jmp     no_sef
sef_rm: jsr     make_sefm
no_sef: rts

up_trk1:
        lda     #H'FF
        sta     H'4015
        ldy     mtrk1_i
        lda     (mtrk1l),y        ; get note or command
        cmp     #REWIND
        bne     no_rew
        jmp     play
no_rew: cmp     #STOP
        bne     no_stopp
        lda     #0
        sta     play_on
        sta     H'4006
        sta     H'4007
        sta     H'400A
        sta     H'400B
        sta     mtrk2_cnt
        rts
no_stopp:
        lda     (mtrk1l),y        ; get main note0/dur0
        jsr     m_sub
        ldx     tempc
        stx     mtrk1_cnt
        ldy     #0
        ora     (mtrk1l),y        ; Combine with intrument
        sta     H'4004
        iny
        lda     (mtrk1l),y         ; get instrument high
        sta     H'4005
        lda     tempx
        sta     H'4006
        lda     tempy
        ora     #8
        sta     H'4007
        inc     mtrk1_i
        rts
up_trk2:
        lda     #H'FF
        sta     H'4015
        ldy     mtrk2_i
        lda     (mtrk2l),y        ; get note or command
        cmp     #REWIND
        bne     no_rex
        ldy     #0
        sty     mtrk2_i
no_rex: lda     (mtrk2l),y        ; get main note1/dur1
        jsr     m_sub
        ldx     tempc
        stx     mtrk2_cnt
        ora     #H'C0             ; Combine with intrument
        sta     H'4008
        lda     #H'00             ; get instrument high
        sta     H'4009
        lda     tempx
        sta     H'400A
        lda     tempy
        sta     H'400B
        inc     mtrk2_i
        rts


init_world:
;Set the Background Palet registers
        lda     H'2002            ;RESET ADDRESS LATCH
        lda     #6                ; Disable Display
        sta     H'2001            ; Set 32 col. mode for sprites & tiles
	lda	#H'23
	sta	H'2006
	lda	#H'C0
	sta	H'2006
        ldx     #H'40
        lda     #B'10101010
plx2:   sta     H'2007
	dex	
        bne     plx2

        lda     #H'3F
	sta	H'2006
	lda	#0		;ADDRESS ALL EVEN BYTES
	sta	H'2006
        lda     CC0
	sta	H'2007		;3F00
        lda     CC01
	sta	H'2007		;3F01
        lda     CC02
	sta	H'2007		;3F02
        lda     CC03
	sta	H'2007		;3F03
        lda     CC0
        sta     H'2007          ;3F04
        lda     CC11
        sta     H'2007          ;3F05
        lda     CC12
        sta     H'2007          ;3F06
        lda     CC13
        sta     H'2007          ;3F07
        lda     CC0
        sta     H'2007          ;3F08
        lda     CC21
        sta     H'2007          ;3F09
        lda     CC22
        sta     H'2007          ;3F0A
        lda     CC23
        sta     H'2007          ;3F0B
        lda     CC0
        sta     H'2007          ;3F0C
        lda     CC31
        sta     H'2007          ;3F0D
        lda     CC32
        sta     H'2007          ;3F0E
        lda     CC33
        sta     H'2007          ;3F0F

; Initialize the shots
        ldy     #5
        ldx     #0
siloop: lda     #SHP_OFF
        sta     shots+SHP_Y,x
        lda     #3
        sta     shots+SHP_NST,x
        lda     #88
        sta     shots+SHP_FT,x
        lda     #1
        sta     shots+SHP_NT,x
        lda     #6
        sta     shots+SHP_AT,x
        txa
        clc
        adc     #SHT_SIZE
        tax
        dey
        bne     siloop

; Initialize the enemies
        ldy     #0
        ldx     #0
        lda     #4
eiloop: pha                       ; Save count
        lda     #0
        sta     dorks+E_STATUS,x
        sta     dorks+E_ACOUNT,x
        lda     ED_POWER,y
        sta     dorks+E_POWER,x
        lda     ED_PAL,y
        sta     dorks+E_FACE,x
        lda     ED_IXV,y
        sta     dorks+E_IXV,x
        lda     ED_IYV,y
        sta     dorks+E_IYV,x
        lda     #128
        sta     dorks+E_CSTAGE,x
        lda     #4
        sta     dorks+E_TC,x
        sta     dorks+E_NSTAGE,x
        lda     ED_ATIME,y
        sta     dorks+E_ATIME,x
        lda     ED_MTYPE,y
        sta     dorks+E_MTYPE,x
        lda     ED_STG0,y
        sta     dorks+E_STAGES+0,x
        lda     ED_STG1,y
        sta     dorks+E_STAGES+1,x
        lda     ED_STG2,y
        sta     dorks+E_STAGES+2,x
        lda     ED_STG3,y
        sta     dorks+E_STAGES+3,x
        txa
        clc
        adc     #E_SIZE
        tax
        tya
        clc
        adc     #ED_SIZE
        tay
        pla                       ; Restore Count
        sec
        sbc     #1
        bne     eiloop

        lda     world_no
        cmp     #8
        bne     no_dark0
        lda     has_lantern
        bne     no_dark0
        lda     #H'3F
        sta     H'2006
        lda     #00             ;ADDRESS ALL EVEN BYTES
        sta     H'2006
        ldx     #0
        ldy     #16
ldpal:  lda     dpal,x
        sta     H'2007
        inx
        dey
        bne     ldpal
        lda     #7
        sta     DC1
        lda     #H'FF
        sta     DC2
        lda     #0
        sta     DC3

        ldy     #4
        ldx     #0
edloop: lda     #4
        sta     dorks+E_IXV,x
        sta     dorks+E_IYV,x
        lda     #HOVER
        sta     dorks+E_MTYPE,x
        txa
        clc
        adc     #E_SIZE
        tax
        dey
        bne     edloop
no_dark0:
        rts


reset_power:
        lda     #H'80
        sta     bpower            ; initialize blast power value
        jsr     blast_graph
        lda     #H'8
        sta     spower            ; initialize shield power value
        jsr     shield_graph
        rts


reset_player:
; Reset the shots
        ldy     #5
        ldx     #0
srloop: lda     #SHP_OFF
        sta     shots+SHP_Y,x
        txa
        clc
        adc     #SHT_SIZE
        tax
        dey
        bne     srloop

; Reset the enemies
        ldy     #4
        ldx     #0
erloop: lda     #0
        sta     dorks+E_STATUS,x
        lda     #128
        sta     dorks+E_CSTAGE,x
        txa
        clc
        adc     #E_SIZE
        tax
        dey
        bne     erloop

; Reset the player
        lda     #0
        sta     captain+SHP_CST
        sta     captain+SHP_AC
        sta     captain+SHP_MC
        sta     captain+SHP_JC
        sta     captain+SHP_XV
        sta     captain+SHP_YV
        sta     jip
        sta     dead_flag
        lda     #1
        sta     on_ground

        lda     #0
        sta     item_type
        sta     play_count
        sta     port_count
        lda     #H'C*4
        sta     captain+SHP_FT

        lda     save_px
        sta     rest_px
        lda     save_py
        sta     rest_py
        lda     save_pf
        sta     rest_pf
        lda     save_wx
        sta     rest_wx
        lda     save_wp
        sta     rest_wp
        lda     save_sx
        sta     rest_sx
        jsr     reset_world
        rts

reset_world:
        lda     #0
        sta     scroll_p
        lda     rest_px
        sta     captain+SHP_X
        lda     rest_py
        sta     captain+SHP_Y
        lda     rest_pf
        sta     c_face
        lda     rest_wp
        sta     world_p
        lda     rest_wx
        sta     world_x
        and     #1
        beq     wx_even
        dec     world_x
        lda     #16
        clc
        adc     rest_sx
        sta     rest_sx
wx_even:
        lda     rest_sx
        sta     scroll_x

; Set the Sprite Palet registers.  
        jsr     disable
        lda     H'2002            ;RESET ADDRESS LATCH
	lda	#H'3F
	sta	H'2006
        lda     #H'10
	sta	H'2006

        lda     #CCS0
        sta     H'2007          ;3F10
        lda     #CCS01
        sta     H'2007          ;3F11
        lda     #CCS02
        sta     H'2007          ;3F12
        lda     #CCS03
        sta     H'2007          ;3F13
        lda     #CCS0
        sta     H'2007          ;3F14
        lda     CCS11
        sta     H'2007          ;3F15
        lda     CCS12
        sta     H'2007          ;3F16
        lda     CCS13
        sta     H'2007          ;3F17
        lda     #CCS0
        sta     H'2007          ;3F18
        lda     CCS21
        sta     H'2007          ;3F19
        lda     CCS22
        sta     H'2007          ;3F1A
        lda     CCS23
        sta     H'2007          ;3F1B

        lda     world_no
        cmp     #8
        bne     no_dark1
        lda     has_lantern
        bne     no_dark1
	lda	#H'3F
	sta	H'2006
        lda     #H'15
	sta	H'2006
        lda     #H'10
        sta     H'2007          ;3F15
        lda     #H'FF
        sta     H'2007
        sta     H'2007
        sta     H'2007
        lda     #H'10
        sta     H'2007
        lda     #H'FF
        sta     H'2007
        sta     H'2007

no_dark1:
; Initialize World Map
        lda     #H'20
        sta     H'2006
        lda     #H'72
        sta     H'2006
        ldx     life
        inx
        stx     H'2007

        lda     world_p
        pha
        lda     world_x
        sta     draw_x
        lda     #0
        sta     draw_slot
        lda     #18
strx:   pha
        jsr     draw_strip
        jsr     nmi_draw
        lda     #0
        sta     draw_busy
        inc     draw_slot
        lda     draw_x
        clc
        adc     #1
        sta     draw_x
        lda     world_p
        adc     #0
        sta     world_p
        pla
        sec
        sbc     #1
        bne     strx
        pla
        sta     world_p
        lda     rest_wx
        and     #1
        beq     was_even
        inc     world_x
was_even:
; Initialize Player Palet
        ldx     #0                ; First sprite * 4
        ldy     #8                ; Num Sprites
        lda     c_face            ; Pal Data
        jsr     set_pal

        lda     #H'88
        sta     H'2000            ; Turn on NMI
        rts

init_music:
; Initialize world Music
        ldx     world_no
        dex
        txa
        asl     a
        asl     a
        tax
        lda     music_ptr,x
        sta     mtrk1l
        lda     music_ptr+1,x
        sta     mtrk1h
        lda     music_ptr+2,x
        sta     mtrk2l
        lda     music_ptr+3,x
        sta     mtrk2h
        jsr     play
        lda     #0
        sta     super1
        sta     super2
        rts

disable:
        lda     draw_busy
        bne     disable
        lda     #0
        sta     H'2000            ; Disable NMI
        lda     #6
        sta     H'2001            ; Disable Display
        rts


; Initialize Sprite Page
init_sprites:
        ldx     #0
        ldy     #0
S10:    lda     #SHP_OFF
        sta     spY,x              ; set vetical
        tya
        sta     spC,x              ; set char
        sta     spP,x              ; set palet
        sta     spX,x              ; set horz.
        inx
        inx
        inx
        inx
        bne     S10
        rts

; Clear Screen
clear_screen:
	lda	#H'20
        sta     H'2006
        lda     #128
	sta	H'2006
        lda     #0
        ldy     #26
l01:    ldx     #32
lx1:    sta     H'2007
	dex			
        bne     lx1
        dey
        bne     l01
        rts

; Clear Screen
clear_s2:
        lda     #H'24
        sta     H'2006
        lda     #128
	sta	H'2006
        lda     #0
        ldy     #26
l0z:    ldx     #32
lxz:    sta     H'2007
	dex			
        bne     lxz
        dey
        bne     l0z
        rts

;01234567890123456789012345678901;
; SCORE 0000000     HIGH 0000000 ;                          2040
; B=........  LIFE=x  S=........ ;                          2060
;            - Blank -           ;                          2080
;            - Blank -           ;                          20A0
;                                ;                          20C0
;  Recovering the three stolen   ;                          20E0
;    treasures, Captain Comic    ;                          2100
;     beams aboard his space     ;
;       cruiser with grim        ;
;   satisfaction, well-knowing   ;
;     that he has saved the      ;
;   Tri-Millenial celebrations   ;
;     and ensured continuing     ;                          2120
;        galactic peace...       ;                          2140

win_txt:
.DB 0,0,'R'-'A'+174,'E'-'A'+174,'C'-'A'+174,'O'-'A'+174,'V'-'A'+174
.DB 'E'-'A'+174,'R'-'A'+174,'I'-'A'+174,'N'-'A'+174,'G'-'A'+174,0,'T'-'A'+174
.DB 'H'-'A'+174,'E'-'A'+174,0,'T'-'A'+174,'H'-'A'+174,'R'-'A'+174,'E'-'A'+174
.DB 'E'-'A'+174,0,'S'-'A'+174,'T'-'A'+174,'O'-'A'+174,'L'-'A'+174,'E'-'A'+174
.DB 'N'-'A'+174,0,0,0
.DB 0,0,0,0,'T'-'A'+174,'R'-'A'+174,'E'-'A'+174,'A'-'A'+174,'S'-'A'+174
.DB 'U'-'A'+174,'R'-'A'+174,'E'-'A'+174,'S'-'A'+174,201,0,'C'-'A'+174
.DB 'A'-'A'+174, 'P'-'A'+174, 'T'-'A'+174, 'A'-'A'+174, 'I'-'A'+174, 'N'-'A'+174
.DB 0, 'C'-'A'+174, 'O'-'A'+174, 'M'-'A'+174, 'I'-'A'+174, 'C'-'A'+174, 0,0,0,0
.DB 0,0,0,0,0,'B'-'A'+174, 'E'-'A'+174, 'A'-'A'+174, 'M'-'A'+174, 'S'-'A'+174
.DB 0, 'A'-'A'+174, 'B'-'A'+174, 'O'-'A'+174, 'A'-'A'+174, 'R'-'A'+174, 'D'-'A'+174
.DB 0, 'H'-'A'+174, 'I'-'A'+174, 'S'-'A'+174, 0, 'S'-'A'+174, 'P'-'A'+174
.DB 'A'-'A'+174, 'C'-'A'+174, 'E'-'A'+174, 0,0,0,0,0
.DB 0,0,0,0,0,0,0,'C'-'A'+174, 'R'-'A'+174, 'U'-'A'+174, 'I'-'A'+174, 'S'-'A'+174
.DB 'E'-'A'+174, 'R'-'A'+174, 0, 'W'-'A'+174, 'I'-'A'+174, 'T'-'A'+174, 'H'-'A'+174
.DB 0, 'G'-'A'+174, 'R'-'A'+174, 'I'-'A'+174, 'M'-'A'+174, 0,0,0,0,0,0,0,0,0
.DB 0,0,'S'-'A'+174, 'A'-'A'+174, 'T'-'A'+174, 'I'-'A'+174, 'S'-'A'+174
.DB 'F'-'A'+174, 'A'-'A'+174, 'C'-'A'+174, 'T'-'A'+174, 'I'-'A'+174, 'O'-'A'+174
.DB 'N'-'A'+174,201,0,'W'-'A'+174, 'E'-'A'+174, 'L'-'A'+174, 'L'-'A'+174
.DB 24, 'K'-'A'+174, 'N'-'A'+174, 'O'-'A'+174, 'W'-'A'+174, 'I'-'A'+174
.DB 'N'-'A'+174, 'G'-'A'+174,0,0,0
win_txta:
.DB 0,0,0,0,0,'T'-'A'+174, 'H'-'A'+174, 'A'-'A'+174, 'T'-'A'+174, 0, 'H'-'A'+174
.DB 'E'-'A'+174, 0, 'H'-'A'+174, 'A'-'A'+174, 'S'-'A'+174, 0, 'S'-'A'+174
.DB 'A'-'A'+174, 'V'-'A'+174, 'E'-'A'+174, 'D'-'A'+174, 0, 'T'-'A'+174, 'H'-'A'+174
.DB 'E'-'A'+174, 0,0,0,0,0,0
.DB 0,0,0,'T'-'A'+174, 'R'-'A'+174, 'I'-'A'+174,24, 'M'-'A'+174, 'I'-'A'+174
.DB 'L'-'A'+174, 'L'-'A'+174, 'E'-'A'+174, 'N'-'A'+174, 'I'-'A'+174, 'A'-'A'+174
.DB 'L'-'A'+174, 0, 'C'-'A'+174, 'E'-'A'+174, 'L'-'A'+174, 'E'-'A'+174, 'B'-'A'+174
.DB 'R'-'A'+174, 'A'-'A'+174, 'T'-'A'+174, 'I'-'A'+174, 'O'-'A'+174, 'N'-'A'+174
.DB 'S'-'A'+174, 0,0,0
.DB 0,0,0,0,0,'A'-'A'+174, 'N'-'A'+174, 'D'-'A'+174, 0, 'E'-'A'+174, 'N'-'A'+174
.DB 'S'-'A'+174, 'U'-'A'+174, 'R'-'A'+174, 'E'-'A'+174, 'D'-'A'+174, 0
.DB 'C'-'A'+174, 'O'-'A'+174, 'N'-'A'+174, 'T'-'A'+174, 'I'-'A'+174, 'N'-'A'+174
.DB 'U'-'A'+174, 'I'-'A'+174, 'N'-'A'+174, 'G'-'A'+174, 0,0,0,0,0
.DB 0,0,0,0,0,0,0,0,'G'-'A'+174, 'A'-'A'+174, 'L'-'A'+174, 'A'-'A'+174
.DB 'T'-'A'+174, 'I'-'A'+174, 'C'-'A'+174, 0, 'P'-'A'+174, 'E'-'A'+174
.DB 'A'-'A'+174, 'C'-'A'+174, 'E'-'A'+174,200,200,200,0,0,0,0,0,0,0,0,0

win_txt2: .DB 144,146,148,150,152,154,156,158
win_txt3: .DB 145,147,149,151,153,155,157,159

; Put up win screen
win_scr1:
        lda     #H'98
        sta     scr_status
        jsr     init_sprites
        jsr     disable
        jsr     VERT_WAIT
        lda     foo_data
        sta     foo_data          ; Set char page 0
lda H'FFFF ; Debug Board Code

        lda     #255
        sta     scroll_x
        lda     #0
        sta     scroll_p
        jsr     clear_screen
        jsr     clear_s2

        lda     #H'21
        sta     H'2006
        lda     #H'40
        sta     H'2006
        ldy     #32*5
        ldx     #0
lwin:   lda     win_txt,x
        sta     H'2007
        inx
        dey
        bne     lwin
        ldy     #32*4
        ldx     #0
lwina:  lda     win_txta,x
        sta     H'2007
        inx
        dey
        bne     lwina
ws_entry:
        lda     #H'23
	sta	H'2006
        lda     #H'C8
	sta	H'2006
        ldx     #H'30
        lda     #B'10101010
lpxx:   sta     H'2007
	dex	
        bne     lpxx

        lda     #H'98
        sta     H'2000            ; Turn on NMI

        lda     #254
        sta     play_count
win_slide:
        dec     play_count
        dec     play_count
        lda     play_count
        sta     scroll_x
        ldx     #1
        jsr     wait_loop
        lda     play_count
        bne     win_slide
        rts

; Put up win screen
win_scr2:
        jsr     init_sprites
        jsr     disable
        lda     #255
        sta     scroll_x
        lda     #0
        sta     scroll_p
        jsr     clear_screen
        jsr     clear_s2

        lda     #H'21
        sta     H'2006
        lda     #H'8C
        sta     H'2006
        ldy     #8
        ldx     #0
lwin2:  lda     win_txt2,x
        sta     H'2007
        inx
        dey
        bne     lwin2

        lda     #H'21
        sta     H'2006
        lda     #H'AC
        sta     H'2006
        ldy     #8
        ldx     #0
lwin3:  lda     win_txt3,x
        sta     H'2007
        inx
        dey
        bne     lwin3

        lda     #H'3F
	sta	H'2006
        lda     #H'09
	sta	H'2006
        lda     #H'20
        sta     H'2007          ;3F09
        lda     #H'00
        sta     H'2007          ;3F0A
        jmp     ws_entry


; Put up inventory screen
inv_screen:
        jsr     disable
        lda     #0
        sta     H'4015
        jsr     init_sprites

; Set the Sprite Palet registers.  
        lda     H'2002            ;RESET ADDRESS LATCH
	lda	#H'3F
	sta	H'2006
        lda     #H'10
	sta	H'2006

        lda     aux_c1
        sta     saux_c1
        lda     aux_c2
        sta     saux_c2
        lda     aux_c3
        sta     saux_c3

        lda     #CINV0
        sta     H'2007          ;3F10
        lda     #CINV01
        sta     H'2007          ;3F11
        lda     #CINV02
        sta     H'2007          ;3F12
        lda     #CINV03
        sta     H'2007          ;3F13
        lda     #CINV0
        sta     H'2007          ;3F14
        lda     #CINV11
        sta     H'2007          ;3F15
        lda     #CINV12
        sta     H'2007          ;3F16
        lda     #CINV13
        sta     H'2007          ;3F17
        lda     #CINV0
        sta     H'2007          ;3F18
        lda     #CINV21
        sta     H'2007          ;3F19
        lda     #CINV22
        sta     H'2007          ;3F1A
        lda     #CINV23
        sta     H'2007          ;3F1B
        lda     #CINV31
        sta     aux_c1
        lda     #CINV32
        sta     aux_c2
        lda     #CINV33
        sta     aux_c3

        jsr     VERT_WAIT
        lda     foo_data
        sta     foo_data          ; Set char page 0
lda H'FFFF ; Debug Board Code

        lda     #0
        sta     scroll_p
        sta     scroll_x

        lda     #2
        ldx     #0
        ldy     #4*9
        jsr     set_pal
        jsr     clear_screen

;01234567890123456789012345678901
; SCORE 0000000     HIGH 0000000                            2040
; B=........  LIFE=x  S=........                            2060
;            - Blank -                                      2080
;            - Blank -                                      20A0
;            INVENTORY                                      20C0
;            - Blank -                                      20E0
;           BLAST LEVEL = 5                                 2100
;            - Blank -                                      2120
;           DOOR KEY                                        2140
;            - Blank -                                      2160
;           CORKSCREW                                       2180
;            - Blank -                                      21A0
;           POWER BOOTS                                     21C0
;            - Blank -                                      21E0
;           MAGIC WAND                                      2200
;            - Blank -                                      2220
;           LANTERN                                         2240
;               .
;               .
;               .

        lda     #H'20
        sta     H'2006
        lda     #H'CC
        sta     H'2006
        ldy     #9
        ldx     #0
l02:    lda     tinv1,x
        sta     H'2007
        inx
        dey
        bne     l02      ; INVENTORY

        lda     #H'21
        sta     H'2006
        lda     #H'0B
        sta     H'2006
        ldy     #12
        ldx     #0
l03:    lda     tinv2,x
        sta     H'2007
        inx
        dey
        bne     l03      ; BLAST LEVEL
        ldx     fireballs
        inx
        stx     H'2007   ; 5

        lda     #1
        ldx     #0*4
        ldy     #4
        jsr     set_pal
        lda     #0*4*4
        sta     temp
        lda     #H'12*4
        ldx     #64
        ldy     #8*8-4
        jsr     set_item

        ldx     has_key
        beq     no_key
        lda     #H'21
        sta     H'2006
        lda     #H'4B
        sta     H'2006
        ldy     #8
        ldx     #0
l04:    lda     tinv3,x
        sta     H'2007
        inx
        dey
        bne     l04      ; DOOR KEY

;       lda     #2
;       ldx     #1*4*4
;       ldy     #4
;       jsr     set_pal
        lda     #1*4*4
        sta     temp
        lda     #H'14*4
        ldx     #64
        ldy     #10*8-4
        jsr     set_item
no_key:

        lda     corker
        beq     no_corksc
        lda     #H'21
        sta     H'2006
        lda     #H'8B
        sta     H'2006
        ldy     #9
        ldx     #0
l05:    lda     tinv4,x
        sta     H'2007
        inx
        dey
        bne     l05      ; CORKSCREW

        lda     #0
        ldx     #2*4*4
        ldy     #4
        jsr     set_pal
        lda     #2*4*4
        sta     temp
        lda     #H'B*4
        ldx     #64
        ldy     #12*8-4
        jsr     set_item
no_corksc:

        ldx     has_boots
        beq     no_boots
        lda     #H'21
        sta     H'2006
        lda     #H'CB
        sta     H'2006
        ldy     #11
        ldx     #0
l06:    lda     tinv5,x
        sta     H'2007
        inx
        dey
        bne     l06      ; POWER BOOTS

;       lda     #2
;       ldx     #3*4*4
;       ldy     #4
;       jsr     set_pal
        lda     #3*4*4
        sta     temp
        lda     #H'C*4
        ldx     #64
        ldy     #14*8-4
        jsr     set_item
no_boots:

        ldx     has_wand
        beq     no_wand
        lda     #H'22
        sta     H'2006
        lda     #H'0B
        sta     H'2006
        ldy     #13
        ldx     #0
l07:    lda     tinv6,x
        sta     H'2007
        inx
        dey
        bne     l07      ; MAGIC BOOTS

        lda     #1
        ldx     #4*4*4
        ldy     #4
        jsr     set_pal
        lda     #4*4*4
        sta     temp
        lda     #H'E*4
        ldx     #64
        ldy     #16*8-4
        jsr     set_item
no_wand:

        ldx     has_lantern
        beq     no_lantern
        lda     #H'22
        sta     H'2006
        lda     #H'4B
        sta     H'2006
        ldy     #7
        ldx     #0
l08:    lda     tinv7,x
        sta     H'2007
        inx
        dey
        bne     l08      ; LANTERN

        lda     #3
        ldx     #5*4*4
        ldy     #4
        jsr     set_pal
        lda     #5*4*4
        sta     temp
        lda     #H'D*4
        ldx     #64
        ldy     #18*8-4
        jsr     set_item
no_lantern:

        lda     #H'22
        sta     H'2006
        lda     #H'AC
        sta     H'2006
        ldy     #9
        ldx     #0
l09:    lda     tinv8,x
        sta     H'2007
        inx
        dey
        bne     l09      ; TREASURES

        ldx     has_gems
        beq     no_gems
        lda     #1
        ldx     #6*4*4
        ldy     #4
        jsr     set_pal
        lda     #6*4*4
        sta     temp
        lda     #H'F*4
        ldx     #60+2*16
        ldy     #23*8-4
        jsr     set_item
no_gems:

        ldx     has_gold
        beq     no_gold
;       lda     #2
;       ldx     #7*4*4
;       ldy     #4
;       jsr     set_pal
        lda     #7*4*4
        sta     temp
        lda     #H'11*4
        ldx     #60+4*16
        ldy     #23*8-4
        jsr     set_item
no_gold:

        ldx     has_crown
        beq     no_crown
;       lda     #2
;       ldx     #8*4*4
;       ldy     #4
;       jsr     set_pal
        lda     #8*4*4
        sta     temp
        lda     #H'10*4
        ldx     #60+6*16
        ldy     #23*8-4
        jsr     set_item
no_crown:

        lda     #H'23
	sta	H'2006
        lda     #H'C8
	sta	H'2006
        ldx     #H'30
        lda     #B'10101010
lpx:    sta     H'2007
	dex	
        bne     lpx

        lda     #H'98
        sta     H'2000            ; Turn on NMI
        rts

set_item:
        sta     tempc
        txa
        pha                       ; save X
        tya
        pha                       ; save Y
        ldx     #0                ; Stage
        ldy     #4
        lda     tempc
        jsr     set_tempc
        pla                       ; restore Y
        sta     tempy
        pla                       ; restore X
        sta     tempx
        ldx     temp              ; Sprite number
        jsr     set_sprite
        rts


; Put up Game Over screen
gover_screen:
        jsr     disable
        jsr     init_sprites
        jsr     VERT_WAIT
        lda     foo_data
        sta     foo_data          ; Set char page 0
lda H'FFFF ; Debug Board Code
        lda     #0
        sta     scroll_p
        sta     scroll_x
        jsr     clear_screen

        lda     #H'21
        sta     H'2006
        lda     #H'8C
        sta     H'2006
        ldy     #9
        ldx     #0
lf00:   lda     tover,x
        sta     H'2007
        inx
        dey
        bne     lf00     ; GAME OVER

        lda     #H'23
	sta	H'2006
        lda     #H'C8
	sta	H'2006
        ldx     #H'30
        lda     #B'10101010
lpfx:   sta     H'2007
	dex	
        bne     lpfx

        lda     #H'98
        sta     H'2000            ; Turn on NMI
        rts

win_stuff:
        lda     #H'FF
        sta     win_count
        lda     #ales_m & H'FF
        sta     mtrk1l
        lda     #ales_m >> 8
        sta     mtrk1h
        lda     #ales_mb & H'FF
        sta     mtrk2l
        lda     #ales_mb >> 8
        sta     mtrk2h
        jsr     play
        jsr     beam_out
        ldx     #30
        jsr     wait_loop
bscr_loop:
        lda     #10
        sta     play_count
pc_loop:
        lda     #1
        jsr     add10000
        ldx     #snd_up100 & H'FF
        ldy     #snd_up100 >> 8
        lda     #5                         ; Priority
        jsr     play_sef                   ; SOUND
        ldx     #4
        jsr     wait_loop
        dec     play_count
        bne     pc_loop
        ldx     #30
        jsr     wait_loop
        lda     life
        beq     bscr_done
        dec     life
        jmp     bscr_loop
bscr_done:
        ldx     #240
        jsr     wait_loop
        jsr     win_scr1
wsc1_done:
        ldx     #1
        jsr     wait_loop
        jsr     read_joystick
        lda     J1FLAGS
        and     #START
        beq     wsc1_done
        jsr     win_scr2
wsc2_done:
        ldx     #1
        jsr     wait_loop
        jsr     read_joystick
        lda     J1FLAGS
        and     #START
        beq     wsc2_done
        jsr     no_start
        jsr     disable
        jmp     startup

no_start:
        ldx     #1
        jsr     wait_loop
        jsr     read_joystick
        lda     J1FLAGS
        and     #START
        bne     no_start
        rts

beam_out:
        lda     #T1
        sta     aux_c1
        lda     #T2
        sta     aux_c2
        lda     #T3
        sta     aux_c3
        jsr     init_sprites
        jsr     show_captain
        lda     #32
        sta     temp
        lda     #24
dnl1:   pha
        sta     play_count
        lda     #24
        sec
        sbc     play_count
        clc
        adc     #F_BEAM
        dec     temp
        dec     temp
        dec     temp
        dec     temp
        jsr     show_beam
        pla
        sec
        sbc     #8
        cmp     #-8
        bne     dnl1
        lda     #0
upl1:   pha
        sta     play_count
        lda     #24
        sec
        sbc     play_count
        clc
        adc     #F_BEAM
        dec     temp
        dec     temp
        dec     temp
        dec     temp
        jsr     show_beam
        pla
        clc
        adc     #8
        cmp     #32
        bne     upl1
        jsr     no_captain
        jsr     no_tcaptain
        rts

beam_in:
        lda     #T1
        sta     aux_c1
        lda     #T2
        sta     aux_c2
        lda     #T3
        sta     aux_c3
        ldx     #60
        jsr     wait_loop
        lda     #0
        sta     temp
upl0:   pha
        clc
        adc     #F_BEAM
        inc     temp
        inc     temp
        inc     temp
        inc     temp
        jsr     show_beam
        pla
        clc
        adc     #8
        cmp     #32
        bne     upl0
        lda     #24
dnl0:   pha
        clc
        adc     #F_BEAM
        inc     temp
        inc     temp
        inc     temp
        inc     temp
        jsr     show_beam
        pla
        sec
        sbc     #8
        cmp     #-8
        bne     dnl0
        jsr     show_tcaptain
        jsr     no_captain
        rts

no_tcaptain:
        ldx     #0
        jmp     clxt
no_captain:
        ldx     #4*4*4
clxt:   ldy     #8
clx:    lda     #SHP_OFF
        sta     spY,x
        txa
        clc
        adc     #4
        tax
        dey
        bne     clx
        rts

show_captain:
        lda     c_face
        ldx     #4*4*4
        ldy     #8
        jsr     set_pal
        lda     captain+SHP_FT
        ldx     #0                ; Stage
        ldy     captain+SHP_NT
        jsr     set_tempc
        lda     captain+SHP_X
        sta     tempx
        lda     captain+SHP_Y
        sta     tempy
        ldx     #4*4*4            ;Sprite number
        jsr     set_sprite
        rts

show_tcaptain:
        lda     c_face
        ldx     #0
        ldy     #8
        jsr     set_pal
        lda     captain+SHP_FT
        ldx     #0                ; Stage
        ldy     captain+SHP_NT
        jsr     set_tempc
        lda     captain+SHP_X
        sta     tempx
        lda     captain+SHP_Y
        sta     tempy
        ldx     #0                ;Sprite number
        jsr     set_sprite
        rts

show_beam:
        pha
        lda     #3
        ldx     #0
        ldy     #8
        jsr     set_pal
        pla
        pha
        jsr     show_b2
        lda     #H'43
        ldx     #0
        ldy     #8
        jsr     set_pal
        pla
        pha
        jsr     show_b2
        lda     #3
        ldx     #0
        ldy     #8
        jsr     set_pal
        pla
        pha
        jsr     show_b2
        lda     #H'43
        ldx     #0
        ldy     #8
        jsr     set_pal
        pla
        jsr     show_b2
        rts

show_b2:
        ldx     #0                ; Stage
        ldy     captain+SHP_NT
        jsr     set_tempc
        lda     captain+SHP_X
        sta     tempx
        lda     captain+SHP_Y
        sta     tempy
        ldx     #0                ;Sprite number
        jsr     set_sprite
        lda     temp
        sec
        cmp     #24
        bcs     all_on
        sec
        cmp     #16
        bcs     half_on
        cmp     #8
        bcs     qtr_on
        jsr     no_captain
        jmp     wl
qtr_on: jsr     no_captain
        ldx     #2
        jsr     wait_loop
        jsr     show_captain
        ldx     #1
        jsr     wait_loop
        jsr     no_captain
        ldx     #2
        jsr     wait_loop
        rts
half_on:
        jsr     no_captain
        ldx     #1
        jsr     wait_loop
        jsr     show_captain
        ldx     #1
        jsr     wait_loop
        jsr     no_captain
        ldx     #1
        jsr     wait_loop
        jsr     show_captain
        ldx     #1
        jsr     wait_loop
        jsr     no_captain
        ldx     #1
        jsr     wait_loop
        rts
all_on: jsr     show_captain
wl:     ldx     #5
        jsr     wait_loop
        rts

exit_door:
        lda     #0
        sta     win_state
        sta     play_count
        jsr     play_door
        txa
        pha                       ; Save index to door
        jsr     init_sprites
        ldx     #120
        jsr     wait_loop
        pla
        tax

        lda     #8*16+8
        sta     save_px
        lda     doors+DOOR_TX,x
        sec
        cmp     #256-9
        bcc     start_check
        lda     doors+DOOR_TPAGE,x
        sec
        cmp     #1
        lda     doors+DOOR_TX,x
        bcc     start_check
        sec
        sbc     #256-16
        asl     a
        asl     a
        asl     a
        asl     a
        clc
        adc     #8
        sta     save_px
        lda     #256-16
        jmp     diok
start_check:
        sec
        sbc     #8
        bcs     diok
        lda     doors+DOOR_TX,x
        asl     a
        asl     a
        asl     a
        asl     a
        clc
        adc     #8
        sta     save_px
        lda     #0
diok:   sta     save_wx
        lda     doors+DOOR_TY,x
        sta     save_py
        lda     #0
        sta     save_pf
        sta     save_sx
        lda     doors+DOOR_TPAGE,x
        sta     save_wp

        lda     doors+DOOR_TWORLD,x
        cmp     world_no
        bne     new_world
        lda     doors+DOOR_TDOOR,x
        pha                                ; Save new door X
        jsr     init_world
        jsr     reset_player
        lda     super1
        beq     no_endsup
        jsr     init_music
no_endsup:
        pla                                ; Restore new door X
        tax
        jmp     enter_door
new_world:
        sta     world_no
        lda     #1
        sec
        sbc     has_crown
        sta     move_crown
        lda     doors+DOOR_TDOOR,x
        pha                                ; Save new door X
        jsr     init_data
        jsr     init_world
        jsr     reset_player
        jsr     init_music
        pla                                ; Restore new door X
        tax
enter_door:
        lda     world_no
        cmp     #8
        bne     no_spc
        txa
        cmp     #DOOR_SIZE*1
        bne     no_spc
        lda     move_crown
        sta     win_state
no_spc: txa
        pha                       ; Save index to door
        ldx     #30
        jsr     wait_loop
        pla
        tax
        lda     #1
        sta     play_count
        jsr     play_door
        lda     win_state
        beq     no_spc2
        ldx     #snd_drain & H'FF
        ldy     #snd_drain >> 8
        lda     #5                         ; Priority
        jsr     play_sef                   ; SOUND
        lda     #H'80
        sta     bpower            ; initialize blast power value
drain_loop:
        jsr     blast_graph
        ldx     #10
        jsr     wait_loop
        lda     bpower
        beq     no_spc2
        sec
        sbc     #H'10
        sta     bpower
        jmp     drain_loop
no_spc2:
        jsr     init_sprites
        lda     #1
        sta     take_turn
        jmp     start_turn

play_door:
        txa
        pha                       ; Save index to door
        lda     DC1
        sta     aux_c1
        lda     DC2
        sta     aux_c2
        lda     DC3
        sta     aux_c3
        ldx     #1
        jsr     wait_loop
        jsr     init_sprites
        lda     play_count
        bne     cci1
        jsr     show_tcaptain
cci1:   lda     #3
        ldx     #2*4*4
        ldy     #4*4
        jsr     set_pal
        pla
        pha
        tax
        lda     scroll_x
        and     #H'F
        sta     temp
        lda     doors+DOOR_X,x
        sec
        sbc     world_x
        asl     a
        asl     a
        asl     a
        asl     a
        sec
        sbc     temp
        ldy     doors+DOOR_Y,x    ; Y = Door Y
        dey
        tax                       ; X = Door X
        pha                       ; Save Door X
        tya
        pha                       ; Save Door Y
        lda     #2*4*4
        sta     temp
        lda     #S_LDOOR
        jsr     set_item
        pla                       ; Get Y
        clc
        adc     #16
        tay                       ; Y = Door Y
        pla                       ; Get X
        pha                       ; Save X
        tax
        tya
        pha                       ; Save Y
        lda     #3*4*4
        sta     temp
        lda     #S_LDOOR
        jsr     set_item
        pla                       ; Get Y
        sec
        sbc     #16
        tay                       ; Y = Door Y
        pla                       ; Get X
        clc
        adc     #16
        pha                       ; Save X
        tax
        tya
        pha                       ; Save Y
        lda     #4*4*4
        sta     temp
        lda     #S_RDOOR
        jsr     set_item
        pla                       ; Get Y
        clc
        adc     #16
        tay                       ; Y = Door Y
        pla                       ; Get X
        tax
        lda     #5*4*4
        sta     temp
        lda     #S_RDOOR
        jsr     set_item
        pla
        pha
        tax
        jsr     zap_door
        ldx     #7
        jsr     wait_loop

        lda     spY+(2*4*4)+0
        pha
        lda     spY+(2*4*4)+2*4
        pha
        lda     spY+(3*4*4)+0
        pha
        lda     spY+(3*4*4)+2*4
        pha
        lda     spY+(4*4*4)+1*4
        pha
        lda     spY+(4*4*4)+3*4
        pha
        lda     spY+(5*4*4)+1*4
        pha
        lda     spY+(5*4*4)+3*4
        pha

        lda     #SHP_OFF
        sta     spY+(2*4*4)+0
        sta     spY+(2*4*4)+2*4
        sta     spY+(3*4*4)+0
        sta     spY+(3*4*4)+2*4
        sta     spY+(4*4*4)+1*4
        sta     spY+(4*4*4)+3*4
        sta     spY+(5*4*4)+1*4
        sta     spY+(5*4*4)+3*4

        lda     spX+(2*4*4)+1*4
        pha
        lda     spX+(2*4*4)+3*4
        pha
        lda     spX+(3*4*4)+1*4
        pha
        lda     spX+(3*4*4)+3*4
        pha
        lda     spX+(4*4*4)+0*4
        pha
        lda     spX+(4*4*4)+2*4
        pha
        lda     spX+(5*4*4)+0*4
        pha
        lda     spX+(5*4*4)+2*4
        pha

        lda     spX+(2*4*4)+1*4
        sec
        sbc     #8
        sta     spX+(2*4*4)+1*4
        lda     spX+(2*4*4)+3*4
        sec
        sbc     #8
        sta     spX+(2*4*4)+3*4
        lda     spX+(3*4*4)+1*4
        sec
        sbc     #8
        sta     spX+(3*4*4)+1*4
        lda     spX+(3*4*4)+3*4
        sec
        sbc     #8
        sta     spX+(3*4*4)+3*4
        lda     spX+(4*4*4)+0
        clc
        adc     #8
        sta     spX+(4*4*4)+0
        lda     spX+(4*4*4)+2*4
        clc
        adc     #8
        sta     spX+(4*4*4)+2*4
        lda     spX+(5*4*4)+0
        clc
        adc     #8
        sta     spX+(5*4*4)+0
        lda     spX+(5*4*4)+2*4
        clc
        adc     #8
        sta     spX+(5*4*4)+2*4
        ldx     #7
        jsr     wait_loop

        lda     spY+(2*4*4)+1*4
        pha
        lda     spY+(2*4*4)+3*4
        pha
        lda     spY+(3*4*4)+1*4
        pha
        lda     spY+(3*4*4)+3*4
        pha
        lda     spY+(4*4*4)+0
        pha
        lda     spY+(4*4*4)+2*4
        pha
        lda     spY+(5*4*4)+0
        pha
        lda     spY+(5*4*4)+2*4
        pha
        lda     #SHP_OFF
        sta     spY+(2*4*4)+1*4
        sta     spY+(2*4*4)+3*4
        sta     spY+(3*4*4)+1*4
        sta     spY+(3*4*4)+3*4
        sta     spY+(4*4*4)+0
        sta     spY+(4*4*4)+2*4
        sta     spY+(5*4*4)+0
        sta     spY+(5*4*4)+2*4

        lda     play_count
        bne     cci2
        jsr     no_tcaptain
        jmp     cci3
cci2:   jsr     show_tcaptain
cci3:   ldx     #7
        jsr     wait_loop

        pla
        sta     spY+(5*4*4)+2*4
        pla
        sta     spY+(5*4*4)+0
        pla
        sta     spY+(4*4*4)+2*4
        pla
        sta     spY+(4*4*4)+0
        pla
        sta     spY+(3*4*4)+3*4
        pla
        sta     spY+(3*4*4)+1*4
        pla
        sta     spY+(2*4*4)+3*4
        pla
        sta     spY+(2*4*4)+1*4
        ldx     #7
        jsr     wait_loop

        pla
        sta     spX+(5*4*4)+2*4
        pla
        sta     spX+(5*4*4)+0*4
        pla
        sta     spX+(4*4*4)+2*4
        pla
        sta     spX+(4*4*4)+0*4
        pla
        sta     spX+(3*4*4)+3*4
        pla
        sta     spX+(3*4*4)+1*4
        pla
        sta     spX+(2*4*4)+3*4
        pla
        sta     spX+(2*4*4)+1*4

        pla
        sta     spY+(5*4*4)+3*4
        pla
        sta     spY+(5*4*4)+1*4
        pla
        sta     spY+(4*4*4)+3*4
        pla
        sta     spY+(4*4*4)+1*4
        pla
        sta     spY+(3*4*4)+2*4
        pla
        sta     spY+(3*4*4)+0
        pla
        sta     spY+(2*4*4)+2*4
        pla
        sta     spY+(2*4*4)+0
        pla                       ; Restore X
        tax
        jsr     set_door
        rts


zap_door:
        lda     scroll_x
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Now offset = strip #
        sta     temp
        lda     scroll_p          ; If on second scroll page, then add
        ldy     #0                ;     another 16 slots
        cmp     #1
        bne     slotok9
        ldy     #16
slotok9:
        tya
        clc
        adc     temp
        sta     temp
        lda     doors+DOOR_X,x
        sta     draw_x
        sec
        sbc     world_x
        clc
        adc     temp
        and     #H'1F             ; Mod it by 32
        pha
        sta     draw_slot
        txa
        pha
        jsr     draw_prep
        pla
        tax
        lda     doors+DOOR_Y,x
        sec
        sbc     #32
        clc
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        tay
        lda     #252
        sta     tiles,y
        sta     tiles+1,y
        lda     #1
        sta     draw_busy
        lda     doors+DOOR_X,x
        sta     draw_x
        inc     draw_x
        pla
        clc
        adc     #1
        and     #H'1F
        sta     draw_slot
        txa
        pha
        jsr     draw_prep
        pla
        tax
        lda     doors+DOOR_Y,x
        sec
        sbc     #32
        clc
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        tay
        lda     #252
        sta     tiles,y
        sta     tiles+1,y
        lda     #1
        sta     draw_busy
        rts


set_door:
        lda     scroll_x
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Now offset = strip #
        sta     temp
        lda     scroll_p          ; If on second scroll page, then add
        ldy     #0                ;     another 16 slots
        cmp     #1
        bne     slotok10
        ldy     #16
slotok10:
        tya
        clc
        adc     temp
        sta     temp
        lda     doors+DOOR_X,x
        sta     draw_x
        sec
        sbc     world_x
        clc
        adc     temp
        and     #H'1F             ; Mod it by 32
        pha
        sta     draw_slot
        txa
        pha
        jsr     draw_strip
        pla
        tax
        lda     doors+DOOR_X,x
        sta     draw_x
        inc     draw_x
        pla
        clc
        adc     #1
        and     #H'1F
        sta     draw_slot
        txa
        pha
        jsr     draw_strip
        pla
        tax
        rts

start_turn:
        lda     take_turn
        cmp     #1
        bne     start_turn
        lda     #0
        sta     take_turn
        sta     world_adj

; Check firing cycle
        lda     sht_cycle
        beq     chksuper
        dec     sht_cycle

chksuper:
; Check super
        lda     super1
        beq     readj
        dec     super1
        bne     readj
        lda     super2
        beq     supout
        dec     super2
        dec     super1
        jmp     readj
supout: jsr     init_music


; Read joystick
readj:  jsr     read_joystick
        jsr     go_sound
        lda     win_count
        beq     no_win
        dec     win_count
        bne     no_win
        lda     on_ground
        beq     fuxxin_off
        jmp     win_stuff
fuxxin_off:
        lda     #1
        sta     win_count
no_win:

; Set captain to "still"
        lda     #0
        sta     move_flag

        lda     port_count
        bne     porting
        jmp     not_porting
porting:
        lda     port_dir
        beq     mdone
        bpl     mright
        lda     port_tx
        sec
        cmp     #96
        bcs     mdone
        lda     scroll_x
        and     #H'F
        ora     world_x
        ora     world_p
        beq     mdone
        jsr     scrl_left
        inc     captain+SHP_X
        inc     captain+SHP_X
        inc     port_tx
        inc     port_tx
        jmp     mdone
mright: lda     port_tx
        sec
        cmp     #144
        bcc     mdone
        lda     world_p
        cmp     #1
        bne     wscr2
        lda     world_x
        cmp     #240
        bne     wscr2
        lda     port_tx
        cmp     #240
        bne     mdone
wscr2:  jsr     scrl_right
        dec     port_tx
        dec     port_tx
        dec     captain+SHP_X
        dec     captain+SHP_X
mdone:  dec     port_count
        lda     port_count
        sec
        cmp     #12
        bcs     panimate
        lda     port_tx
        sta     captain+SHP_X
        lda     port_ty
        sta     captain+SHP_Y
panimate:
        ldx     port_count
        beq     framex
        dex
        beq     frame1
        dex
        beq     framex
        dex
        beq     frame2
        dex
        beq     frame3
        dex
        beq     frame3
        dex
        beq     frame3
        dex
        beq     frame2
        dex
        beq     frame2
        dex
        beq     frame2
        dex
        beq     frame1
        dex
        beq     frame1
        dex
        beq     frame1
        dex
        beq     frame1
        dex
        beq     frame2
        dex
        beq     frame2
        dex
        beq     frame2
        dex
        beq     frame3
        dex
        beq     frame3
        dex
        beq     frame3
        dex
        beq     framex
        dex
        beq     frame2
        dex
        beq     framex
frame1: lda     #H'17*4           ; Smoke 1
        sta     captain+SHP_FT
        jmp     grd2
frame2: lda     #H'19*4           ; Smoke 2
        sta     captain+SHP_FT
        jmp     grd2
frame3: lda     #H'1B*4           ; Smoke 3
        sta     captain+SHP_FT
        jmp     grd2
framex: lda     #H'C*4            ; Captain
        sta     captain+SHP_FT
        jmp     grd2
not_porting:

; Check Movement
        lda     J1FLAGS
        and     #LEFT
        beq     no_left
        jmp     go_left
no_left:
        lda     J1FLAGS
        and     #RIGHT
        beq     no_right
        jmp     go_right
no_right:
        jmp     slow_down
chk_buttons:
        lda     J1CHANGE
        and     #START
        beq     no_stxrt

        lda     captain+SHP_X
        sta     rest_px
        lda     captain+SHP_Y
        sta     rest_py
        lda     c_face
        sta     rest_pf
        lda     world_x
        sta     rest_wx
        lda     world_p
        sta     rest_wp
        lda     scroll_x
        and     #H'F
        sta     rest_sx
        lda     #H'98
        sta     scr_status
        jsr     inv_screen
lstrt2: jsr     read_joystick
        lda     J1CHANGE
        and     #START
        beq     lstrt2
        jsr     disable
        jsr     VERT_WAIT
        lda     page_val
        and     #H'7
        tax
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        jsr     low_zap
        jsr     init_sprites
        jsr     reset_world
        lda     saux_c1
        sta     aux_c1
        lda     saux_c2
        sta     aux_c2
        lda     saux_c3
        sta     aux_c3
        lda     #H'88
        sta     scr_status
no_stxrt:
        lda     J1CHANGE
        and     #A_BUTTON
        beq     no_a
; Jump Logic
;       inc     lc1
        lda     on_ground
        cmp     #1
        bne     no_a
        lda     win_state
        bne     no_a
        lda     #JUMP_POWER
        sta     jip
        lda     has_boots
        beq     no_dboots
        inc     jip
no_dboots:
        lda     #JUMP_IV
        sta     captain+SHP_YV
        lda     #0
        sta     on_ground
        ldx     #snd_jump & H'FF
        ldy     #snd_jump >> 8
        lda     #1                         ; Priority
        jsr     play_sef                   ; SOUND
no_a:   lda     J1CHANGE
        and     #B_BUTTON
        beq     no_bc
        lda     super1
        bne     no_bc
        lda     bpower
        sec
        sbc     #4
        bcc     m_rf_n
rfnc:   sta     bpower
        jsr     blast_graph
        jmp     no_bc
m_rf_n: lda     #0
        jmp     rfnc
no_bc:  lda     J1FLAGS
        and     #B_BUTTON
        beq     incpow
; Fire Logic
;       dec     lc1
; Shot Power Logic
        lda     bpower
        sec
        cmp     #6
        bcc     no_b
; Shot Generation Logic
        lda     sht_cycle
        bne     no_b
        jsr     init_shot
        jmp     no_b
incpow: lda     sht_cycle
        ora     win_state
        bne     no_b
        lda     bpower
        cmp     #H'80
        beq     b_over
        inc     bpower
b_over: lda     bpower
        and     #H'F
        bne     no_b
        jsr     blast_graph
no_b:   lda     J1CHANGE
        and     #UP
        bne     fuxx_you
        jmp     not_up
fuxx_you:
;       inc     lc2
; Check for door
        lda     scroll_x
        and     #H'F
        clc
        adc     captain+SHP_X
        tax
        tay
        and     #H'F
        bne     no_alt
        tya
        sec
        sbc     #16
        tay
no_alt: txa
        clc
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        clc
        adc     world_x           ; A = Player X tile
        sta     tempx
        tya
        clc
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        clc
        adc     world_x           ; A = Player X tile
        sta     tempy
        sec
        cmp     world_x
        bcs     no_dovr
        jmp     not_up
no_dovr:
        ldx     #0
door_lloop:
        lda     world_p
        cmp     doors+DOOR_PAGE,x
        bne     next_door
        lda     doors+DOOR_X,x
        cmp     tempx
        beq     chk_doory
        cmp     tempy
        bne     next_door
chk_doory:
        lda     doors+DOOR_Y,x
        cmp     captain+SHP_Y
        bne     next_door
; Door Found
        lda     has_key
        beq     nokey
        jmp     exit_door
nokey:  lda     #0                ; TEMP
        sta     H'400C
        sta     H'400D
        sta     H'400E
        sta     H'400F
        lda     #H'FF
        sta     H'4015
        lda     #H'A
        sta     H'400C
        lda     #H'D
        sta     H'400E
        lda     #H'8
        sta     H'400F            ; SOUND
        jmp     not_up
next_door:
        txa
        clc
        adc     #DOOR_SIZE
        tax
        cmp     #DOOR_SIZE*8
        bne     door_lloop
not_up: lda     J1CHANGE
        and     #DOWN
        beq     not_dn
;       dec     lc2
not_dn: lda     J1FLAGS
        and     #SELECT
        beq     not_select
        lda     has_wand
        beq     not_select
        lda     on_ground
        cmp     #1
        bne     not_select
        ldx     #snd_tport & H'FF
        ldy     #snd_tport >> 8
        lda     #2                         ; Priority
        jsr     play_sef                   ; SOUND
        jmp     try_port
not_select:

; Service Left or right movment
        lda     captain+SHP_XV
        beq     lr_done
        bpl     try_right
        jsr     move_left
        jmp     movedlr
try_right:
        jsr     move_right
        jmp     movedlr
lr_done:
        lda     #0
        sta     captain+SHP_MC
movedlr:
; Service Jumping or falling
        lda     on_ground         ; If on ground
        cmp     #1                ;   then jump
        bne     ngrd
        jmp     grd
ngrd:   lda     #4
        sta     captain+SHP_CST   ; Set stage to "jumping"
        lda     captain+SHP_JC
        bne     add_y
        inc     captain+SHP_YV    ; Add gravity
        lda     captain+SHP_YV    ; load gravity
        cmp     #7
        beq     fdec
        lda     jip               ; If no jump power
        beq     add_y             ;   then jump
        lda     J1FLAGS           ; Else check for more button
        and     #A_BUTTON         ; If no button
        beq     no_a2             ;   then jump
        dec     jip
fdec:   dec     captain+SHP_YV
        jmp     add_y
no_a2:  lda     #0
        sta     jip
add_y:  inc     captain+SHP_JC
        lda     world_no
        cmp     #3
        bne     no_mon
        lda     captain+SHP_JC
        cmp     #5
        bne     ntfj
        jmp     wokdi
no_mon: lda     captain+SHP_JC
        cmp     #3
        bne     ntfj
wokdi:  lda     #0
        sta     captain+SHP_JC
ntfj:   lda     captain+SHP_YV
        bpl     visp
        clc
        adc     captain+SHP_Y
        sec
        sbc     #24
        sta     captain+SHP_Y
        jsr     check_ground
        bcc     nhh
        lda     #40
        clc
        adc     captain+SHP_Y
        and     #H'F0
        sec
        sbc     #8
        sta     captain+SHP_Y
        lda     #0
        sta     captain+SHP_YV
        jmp     ahh
nhh:    lda     #24
        clc
        adc     captain+SHP_Y
        sta     captain+SHP_Y
        sec
        cmp     #240
        bcc     ahh
        lda     #1
        sta     up_cnt
        lda     #0
        sta     captain+SHP_YV
        jmp     ahh
visp:   clc
        adc     captain+SHP_Y
        sta     captain+SHP_Y
ahh:    lda     captain+SHP_YV
        bmi     yok1
        jsr     check_ground
        bcs     landed
        lda     captain+SHP_Y
        sec
        cmp     #236
        bcc     under_top
        lda     up_cnt
        bne     yok1
        jmp     dead_guy
under_top:
        lda     #0
        sta     up_cnt
        jmp     yok1
landed: lda     #1
        sta     on_ground
        lda     #0
        sta     captain+SHP_YV
        sta     captain+SHP_JC
        lda     captain+SHP_Y
        and     #H'F0
        sta     captain+SHP_Y
        lda     captain+SHP_XV
        beq     stand
        lda     #1                ; Make "Walking"
        jmp     cntlg
stand:  lda     #0                ; Make "Standing"
cntlg:  sta     captain+SHP_CST   ; Set stage to "standing" or "walking"
yok1:   jmp     has_moved

grd:    jsr     check_ground
        bcs     grd2
        lda     #0
        sta     on_ground
        lda     #4
        sta     captain+SHP_CST   ; Set stage to "jumping"
        lda     #0
        sta     captain+SHP_YV
        sta     jip
        jmp     has_moved

grd2:
; We are on the ground
        lda     dead_flag
        cmp     #30
        beq     deader_than_shit
        jmp     not_dead
deader_than_shit:
        jsr     decompose
dead_guy:
        jsr     init_sprites
        lda     #0
        sta     play_on
        sta     H'4015
        ldx     #20
        jsr     wait_loop

        lda     #sdie_m & H'FF
        sta     mtrk1l
        lda     #sdie_m >> 8
        sta     mtrk1h
        lda     #sdie_mb & H'FF
        sta     mtrk2l
        lda     #sdie_mb >> 8
        sta     mtrk2h
        jsr     play              ;SOUND

        ldx     #150
        jsr     wait_loop
        lda     life
        beq     game_over
        lda     life
        sec
        sbc     dec_life
        sta     life
        jsr     reset_player
        jsr     init_music
        jsr     reset_power
        jmp     not_dead
game_over:
        lda     #H'98
        sta     scr_status
        jsr     gover_screen
        lda     #gover_m & H'FF
        sta     mtrk1l
        lda     #gover_m >> 8
        sta     mtrk1h
        lda     #gover_mb & H'FF
        sta     mtrk2l
        lda     #gover_mb >> 8
        sta     mtrk2h
        jsr     play
        ldx     #240
        jsr     wait_loop
        lda     #240
        sta     play_count
lstlpx: ldx     #1
        jsr     wait_loop
        jsr     read_joystick
        lda     J1FLAGS
        and     #START
        bne     prs_strt
        dec     play_count
        bne     lstlpx
prs_strt:
        jsr     no_start
        jsr     disable
        jmp     boot
not_dead:
        lda     save_wp
        cmp     world_p
        bne     save_it
        lda     save_wx
        sec
        sbc     world_x
        bmi     d_neg
        sec
        sbc     #32
        bcs     save_it
        jmp     no_save
d_neg:  clc
        adc     #31
        bpl     no_save
save_it:
        lda     captain+SHP_X
        sta     save_px
        lda     captain+SHP_Y
        sta     save_py
        lda     c_face
        sta     save_pf
        lda     world_x
        sta     save_wx
        lda     world_p
        sta     save_wp
        lda     scroll_x
        and     #H'F
        sta     save_sx
        lda     dist_quota
        beq     no_save
        dec     dist_quota
no_save:
        lda     move_flag
        bne     has_moved
        sta     captain+SHP_CST

; Update any death count
has_moved:
        lda     dead_flag
        beq     updatec
        cmp     #30
        beq     updatec
        inc     dead_flag
; Update Captain Sprite
updatec:
        lda     captain+SHP_X
        sta     tempx
        lda     captain+SHP_Y
        sta     tempy
        lda     captain+SHP_FT
        ldx     captain+SHP_CST
        ldy     captain+SHP_NT
        jsr     set_tempc
        ldx     #0                ;Sprite number
        jsr     set_sprite

; Update Items
        lda     item_type
        bne     is_item
        jmp     no_item
is_item:
        lda     item_x
        bmi     item_n
        clc
        adc     world_adj
        sec
        cmp     #H'F8
        bcc     item_ok
        jmp     item_off
item_n: clc
        adc     world_adj
        sec
        cmp     #H'F1
        bcs     item_off
item_ok:
        sta     item_x

; Check for player pickup
        lda     captain+SHP_X
        sec
        sbc     item_x
        bmi     ppik_xn
        sec
        cmp     #14
        bcc     ppik_cy
fdraw_item:
        jmp     draw_item
ppik_xn:
        clc
        adc     #13
        bmi     fdraw_item
ppik_cy:
        lda     captain+SHP_Y
        sec
        sbc     item_y
        bmi     ppik_yn
        sec
        cmp     #8
        bcc     ppik_pik
        jmp     draw_item
ppik_yn:
        clc
        adc     #29
        bmi     fdraw_item
ppik_pik:
        ldx     #snd_pickup & H'FF
        ldy     #snd_pickup >> 8
        lda     #3                         ; Priority
        jsr     play_sef                   ; SOUND
        lda     #2
        jsr     add_1000
        ldx     item_id
        lda     #1
        sta     item_flags-1,x
        lda     item_type
        cmp     #T_CAN
        beq     i_can
        cmp     #T_SHIELD
        beq     i_shield
        cmp     #T_GOLD
        beq     i_treasure
        cmp     #T_GEMS
        beq     i_treasure
        cmp     #T_CROWN
        beq     i_treasure
        jmp     item_off
i_can:  inc     fireballs
item_off:
        jmp     fuxx_off

i_shield:
        lda     #8
        sec
        sbc     spower
        sta     temp
        beq     full_spow
        lda     #8
        sta     spower
        sec
        sbc     temp
        jsr     add_1000
        jsr     shield_graph
        jmp     item_off
full_spow:
        lda     life
        sec
        cmp     #9
        beq     bonpts
        jsr     life_up
        jmp     item_off
bonpts: lda     #1
        jsr     add10000
        lda     #1
        jsr     add10000
        lda     #5
        jsr     add_1000
        jmp     item_off
i_treasure:
        lda     has_gold
        and     has_gems
        and     has_crown
        bne     he_wins
        jsr     life_up
        jmp     item_off
he_wins:
        ldx     #snd_null & H'FF
        ldy     #snd_null >> 8
        lda     #6                         ; Priority
        jsr     play_sef                   ; SOUND
        lda     #w_all_m & H'FF
        sta     mtrk1l
        lda     #w_all_m >> 8
        sta     mtrk1h
        lda     #w_all_mb & H'FF
        sta     mtrk2l
        lda     #w_all_mb >> 8
        sta     mtrk2h
        jsr     play
        lda     #240
        sta     win_count
        jmp     item_off

fuxx_off:
        ldx     #6*4*4
        ldy     #4
clx2:   lda     #SHP_OFF
        sta     spY,x
        txa
        clc
        adc     #4
        tax
        dey
        bne     clx2
        lda     #0
        sta     item_type
        jmp     item_done
draw_item:
        lda     #3
        ldx     #6*4*4
        ldy     #4
        jsr     set_pal
        lda     #6*4*4
        sta     temp
        lda     item_shp
        ldx     item_x
        ldy     item_y
        jsr     set_item
        jmp     item_done
no_item:
        ldx     #0
item_lloop:
        ldy     items+ITM_ID,x
        lda     item_flags-1,y
        bne     next_item
        lda     world_p
        cmp     items+ITM_PAGE,x
        bne     next_item
        lda     items+ITM_X,x
        sec
        sbc     world_x
        bcc     next_item
        sta     tempx
        sec
        sbc     #16
        bcs     next_item
        lda     scroll_x
        and     #H'F
        sta     temp
        lda     tempx
        asl     a
        asl     a
        asl     a
        asl     a
        sec
        sbc     temp
        bcc     next_item
        sta     item_x
        lda     items+ITM_Y,x
        asl     a
        asl     a
        asl     a
        asl     a
        clc
        adc     #32
        sta     item_y
        lda     items+ITM_SHP,x
        sta     item_shp
        lda     items+ITM_TYPE,x
        sta     item_type
        lda     items+ITM_ID,x
        sta     item_id
        lda     items+ITM_C1,x
        sta     aux_c1
        lda     items+ITM_C2,x
        sta     aux_c2
        lda     items+ITM_C3,x
        sta     aux_c3
        lda     item_type
        cmp     #T_CROWN
        bne     no8ba
        lda     move_crown
        bne     no8ba
        lda     item_x
        clc
        adc     #8
        sta     item_x
no8ba:  jmp     draw_item
next_item:
        txa
        cmp     #ITM_SIZE*2
        beq     item_done
        clc
        adc     #ITM_SIZE
        tax
        jmp     item_lloop

item_done:
; Update Shots
        ldy     #5
        bne     gsfb1
        jmp     fl_done

gsfb1:  ldx     #0
        lda     #7*4*4
        sta     temp
ssloop: lda     shots+SHP_Y,x
        cmp     #SHP_OFF
        bne     on_shot
        jmp     sht_done
on_shot:
        lda     shots+SHP_XV,x
        bpl     xvip
        clc
        adc     shots+SHP_X,x
        sta     shots+SHP_X,x
        sec
        cmp     #4
        bcs     no_sovr
        jmp     turn_off
xvip:   clc
        adc     shots+SHP_X,x
        sta     shots+SHP_X,x
        bcc     no_sovr
turn_off:
        lda     #SHP_OFF
        sta     shots+SHP_Y,x
        jmp     fbstok
no_sovr:
        lda     corker
        ora     super1
        beq     no_cork
        lda     shots+SHP_YV,x
        clc
        adc     shots+SHP_Y,x
        sta     shots+SHP_Y,x
        cmp     shots+SHP_YL,x
        bne     not_l
        lda     #4
        sta     shots+SHP_YV,x
        jmp     no_cork
not_l:  cmp     shots+SHP_YH,x
        bne     no_cork
        lda     #-4
        sta     shots+SHP_YV,x
no_cork:
        inc     shots+SHP_CST,x
        lda     shots+SHP_CST,x
        cmp     shots+SHP_NST,x
        bne     not_os
        lda     #0
        sta     shots+SHP_CST,x
;Check for FB collisions
not_os: txa
        pha                       ; Save X
        tya
        pha                       ; Save Y
        lda     shots+SHP_X,x
        sta     tempx
        lda     shots+SHP_Y,x
        sta     tempy
        ldx     #0                ; X = Enemy offset
        ldy     #4                ; Y = Enemy count
ehit_loop:
        lda     dorks+E_X,x
        sec
        sbc     tempx
        bmi     ehit_xn
        sec
        cmp     #4
        bcc     ehit_cy
        jmp     ehit_ed
ehit_xn:
        clc
        adc     #15
        bmi     ehit_ed
ehit_cy:
        lda     dorks+E_Y,x
        sec
        sbc     tempy
        bmi     ehit_yn
        sec
        cmp     #4
        bcc     ehit_hit
        jmp     ehit_ed
ehit_yn:
        clc
        adc     #15
        bmi     ehit_ed
ehit_hit:
        lda     world_no
        cmp     #8
        bne     ehit_rhit
        lda     has_lantern
        bne     ehit_rhit
        jmp     ehit_ed
ehit_rhit:
        lda     dorks+E_STATUS,x
        cmp     #1
        bne     ehit_ed
        lda     ehit_quota
        beq     no_ehq
        dec     ehit_quota
no_ehq: lda     #2
        sta     dorks+E_STATUS,x
        lda     #3
        jsr     add_100
        pla                       ; Restore Y
        tay
        pla                       ; Restore X
        tax

        lda     #0
        sta     H'400C
        sta     H'400D
        sta     H'400E
        sta     H'400F
        lda     #H'FF
        sta     H'4015
        lda     #H'F
        sta     H'400C
        lda     #H'E
        sta     H'400E
        lda     #H'8
        sta     H'400F            ; SOUND

        jmp     turn_off          ; Turn off fb
ehit_ed:
        txa
        clc
        adc     #E_SIZE
        tax
        dey
        beq     nehit_loop
        jmp     ehit_loop
nehit_loop:
        pla                       ; Restore Y
        tay
        pla                       ; Restore X
        tax
fbstok: txa
        pha                       ; Save offset
        tya
        pha                       ; Save count
        lda     shots+SHP_X,x
        sta     tempx
        lda     shots+SHP_Y,x
        sta     tempy
        lda     shots+SHP_FT,x
        pha                       ; Save first tile
        ldy     shots+SHP_NT,x
        lda     shots+SHP_CST,x
        tax                       ; X = Current Stage
        pla                       ; Get A = First Tile
        jsr     set_tempc
        ldx     temp              ; Sprite number
        jsr     set_sprite
        pla                       ; Get count
        tay
        pla                       ; Get offset
        tax
sht_done:
        lda     #4
        clc
        adc     temp
        sta     temp
        txa
        clc
        adc     #SHT_SIZE
        tax
        dey
        beq     fl_done
        jmp     ssloop


fl_done:
; Update Enemies
        lda     created
        beq     at_null
        dec     created
at_null:
        lda     #2*4*4
        sta     temp              ; temp = sprite number
        ldx     #0                ; X = Enemy offset
        ldy     #4
dork_loop:
        lda     dorks+E_STATUS,x
        beq     not_there1
        cmp     #55
        beq     alive1
        cmp     #1
        beq     alive1
        jmp     draw_dead1
not_there1:
        lda     win_state
        beq     norm_en
        lda     dorks+E_MTYPE,x
        cmp     #BOUNCE
        bne     abort_enemy
        jmp     sp_create
norm_en:
        dec     dorks+E_CSTAGE,x
        bne     abort_enemy
        jmp     create_enemy
abort_enemy:
        jmp     abort_draw

; Compute Animation
alive1: lda     win_count
        beq     no_ken
        lda     #2
        sta     dorks+E_STATUS,x
        jmp     draw_dead1
no_ken: inc     dorks+E_ACOUNT,x
        lda     dorks+E_ACOUNT,x
        sec
        cmp     dorks+E_ATIME,x
        bcc     nottime1
        lda     #0
        sta     dorks+E_ACOUNT,x
        inc     dorks+E_CSTAGE,x
        lda     dorks+E_CSTAGE,x
        cmp     dorks+E_NSTAGE,x
        bne     nottime1
        lda     #0
        sta     dorks+E_CSTAGE,x

; Compute motion
nottime1:
        lda     dorks+E_STATUS,x
        cmp     #55
        bne     not_bshield
        jmp     move_bonus
not_bshield:
        lda     dorks+E_MTYPE,x
        sec
        sbc     #1
        beq     do_bounce
        sbc     #1
        beq     do_hop
        sbc     #1
        beq     do_crawl
        sbc     #1
        beq     do_hover
        sbc     #1
        beq     do_dbomb
        sbc     #1
        beq     do_craw2
        jmp     abort_draw
do_bounce:
        jmp     move_bounce
do_hop:
        jmp     move_hop
do_crawl:
        jmp     move_crawl
do_hover:
        jmp     move_hover
do_dbomb:
        jmp     move_dbomb
do_craw2:
        jmp     move_cr2

; Verify that Sprite is still on screen
draw_enemy:
        jsr     adjust_dork
        bcc     adj_ok
        jmp     zap1
adj_ok:
; Check for player hit
        lda     captain+SHP_X
        sec
        sbc     dorks+E_X,x
        bmi     phit_xn
        sec
        cmp     #14
        bcc     phit_cy
        jmp     draw_dork
phit_xn:
        clc
        adc     #13
        bmi     draw_dork
phit_cy:
        lda     captain+SHP_Y
        sec
        sbc     dorks+E_Y,x
        bmi     phit_yn
        sec
        cmp     #8
        bcc     phit_hit
        jmp     draw_dork
phit_yn:
        clc
        adc     #29
        bmi     draw_dork
phit_hit:
        lda     dorks+E_STATUS,x
        cmp     #55
        bne     phitrhit
        jmp     get_bonus
phitrhit:
        lda     super1
        beq     hit_him
        jmp     draw_dork
hit_him:
        tya
        pha                                ; Save Y
        txa
        pha                                ; Save X
        ldx     #snd_phit & H'FF
        ldy     #snd_phit >> 8
        lda     #4                         ; Priority
        jsr     play_sef                   ; SOUND
        pla
        tax                                ; Restore X
        pla
        tay                                ; Restore Y

        lda     dead_flag
        bne     draw_dork
        lda     #2
        sta     dorks+E_STATUS,x
        tya
        pha                       ; Save enemy count
        txa
        pha                       ; Save index
        ldy     dorks+E_TC,x      ; y = tile count
        lda     dorks+E_FACE,x    ; 4xh or 0xh
        and     #H'FC             ; Set to player palet
        ldx     temp              ; X = Sprite offset
        jsr     set_pal           ; set sprite palet
        lda     spower
        bne     pleft
        lda     #1
        sta     dead_flag
        jmp     pastlft
pleft:  dec     spower
        jsr     shield_graph
pastlft:
        pla                       ; restore index
        tax
        pla                       ; restore enemy count
        tay
        jmp     abort_draw

; Draw enemy into sprite table
draw_dork:
        jsr     dork_draw
abort_draw:
        lda     #4*4
        clc
        adc     temp
        sta     temp
        txa
        clc
        adc     #E_SIZE
        tax
        dey
        beq     cnt02
        jmp     dork_loop
cnt02:  jmp     start_turn

dork_draw:
        tya
        pha                       ; Save enemy count
        txa
        pha                       ; Save index
        lda     dorks+E_X,x
        sta     tempx
        lda     dorks+E_Y,x
        sta     tempy
        ldy     dorks+E_TC,x      ; y = tile count
        tya
        pha                       ; save tile count
        lda     dorks+E_FACE,x    ; 4xh or 0xh
        pha                       ; save face
        lda     dorks+E_STATUS,x
        cmp     #55
        bne     bonnoskip
        lda     dorks+E_XV,x
        sta     tempc
        pla                       ; Restore face
        ldx     temp              ; X = Sprite offset
        jmp     bonskip
bonnoskip:
        txa                       ; A = E struc offset
        clc
        adc     dorks+E_CSTAGE,x  ; A = offset to current stage tile
        tax                       ;
        lda     dorks+E_STAGES,x  ; A = first tile
        sta     tempc
        pla                       ; Restore face
        ldx     temp              ; X = Sprite offset
        jsr     set_pal           ; set sprite palet
bonskip:
        pla                       ; restore tile count
        tay
        ldx     temp              ; load X = sprite*4
        jsr     set_sprite
        pla                       ; restore index
        tax
        pla                       ; restore enemy count
        tay
        rts

; Routine for drawing death animation
draw_dead1:
        lda     dorks+E_STATUS,x
        cmp     #2
        bne     in_dlogic
        lda     #0
        sta     dorks+E_ACOUNT,x
        lda     #196
        sta     dorks+E_CSTAGE,x
        lda     #3
        sta     dorks+E_STATUS,x
        jmp     drw_dead
in_dlogic:
        inc     dorks+E_ACOUNT,x
        lda     dorks+E_ACOUNT,x
        cmp     #6
        bne     drw_dead
        lda     #0
        sta     dorks+E_ACOUNT,x
        lda     dorks+E_CSTAGE,x
        clc
        adc     #4
        cmp     #212
        bne     no_zap
        lda     dist_quota
        ora     ehit_quota
        bne     zap1
        jmp     make_bonus
no_zap:
        sta     dorks+E_CSTAGE,x
drw_dead:
        jsr     adjust_dork
        bcs     zap1
        lda     dorks+E_X,x
        sta     tempx
        lda     dorks+E_Y,x
        sta     tempy
        lda     dorks+E_CSTAGE,x
        sta     tempc
        txa
        pha                       ; Save X
        tya
        pha                       ; Save Y
        ldy     #4                ; y = tile count
        ldx     temp
        jsr     set_sprite
        pla                       ; Restore Y
        tay
        pla                       ; Restore X
        tax
        jmp     abort_draw
zap1:   jsr     zappo
        jmp     abort_draw

zappo:  lda     #0
        sta     dorks+E_STATUS,x
        sta     dorks+E_ACOUNT,x
        lda     #128              ; delay
        sta     dorks+E_CSTAGE,x
        txa
        pha                       ; Save X
        ldx     temp
        lda     #SHP_OFF
        sta     spY,x             ; set Y
        sta     spY+4,x           ; set Y
        sta     spY+8,x           ; set Y
        sta     spY+12,x          ; set Y
        pla                       ; Restore X
        tax
        rts

make_bonus:
        lda     next_type
        beq     chal_puppy
        cmp     #3
        bne     no_chal
        lda     #0
        sta     next_type
chal_puppy:
        lda     #10*4
        jmp     cntbon
no_chal:
        lda     #9*4
cntbon: sta     dorks+E_XV,x
        lda     #55
        sta     dorks+E_STATUS,x
        lda     #0
        sta     dorks+E_ACOUNT,x
        tya
        pha                       ; Save enemy count
        txa
        pha                       ; Save index
        ldy     #4                ; y = tile count
        ldx     temp              ; X = Sprite offset
        lda     #0
        jsr     set_pal           ; set sprite palet
        pla                       ; restore index
        tax
        pla                       ; restore enemy count
        tay
        lda     #20
        sta     ehit_quota
        lda     #2
        sta     dist_quota
        jmp     abort_draw


; Routine to adjust sprite to scroll rate
; Returns with CY is sprite is off world
adjust_dork:
        lda     dorks+E_X,x
        bmi     dork_n
        clc
        adc     world_adj
        sec
        cmp     #H'F8
        bcc     dork_ok
offscr: sec
        rts
dork_n: clc
        adc     world_adj
        sec
        cmp     #8
        bcc     offscr
        cmp     #H'F1
        bcs     offscr
dork_ok:
        sta     dorks+E_X,x
        clc
        rts


move_bonus:
; Move in Y direction
        lda     dorks+E_Y,x
        clc
        adc     #3
        sta     dorks+E_Y,x
        jsr     check_veblock     ; See if blocked
        bcc     nbbx              ; Jump if not blocked
        cmp     #69               ; Check dead code
        bne     notoffscr
not_bgood:
        jmp     zap1
notoffscr:
        lda     #0
        sta     dorks+E_YV,x
        lda     dorks+E_Y,x
        and     #H'FE
        sec
        sbc     #3
        sta     dorks+E_Y,x
        jmp     bonfix
nbbx:   lda     #2
        sta     dorks+E_YV,x
bonfix:
        lda     #0
        sta     dorks+E_ACOUNT,x
        lda     dorks+E_X,x
        sec
        cmp     #256-16
        bcs     not_bgood
        jmp     draw_enemy


get_bonus:
        tya
        pha                                ; Save Y
        txa
        pha                                ; Save X
        lda     dorks+E_XV,x
        cmp     #9*4
        beq     invince
        jsr     life_up
        jmp     bon_over
invince:
        lda     #H'80
        sta     bpower            ; initialize blast power value
        jsr     blast_graph
        lda     superc
        sec
        cmp     #2
        bcs     no_double
        inc     superc
        lda     #7
        sta     super2
        lda     #H'08
        sta     super1
        jmp     is_double
no_double:
        lda     #3
        sta     super2
        lda     #H'84
        sta     super1
is_double:
        lda     #super_m & H'FF
        sta     mtrk1l
        lda     #super_m >> 8
        sta     mtrk1h
        lda     #super_mb & H'FF
        sta     mtrk2l
        lda     #super_mb >> 8
        sta     mtrk2h
        jsr     play
bon_over:
        pla
        tax                                ; Restore X
        pla
        tay                                ; Restore Y
        lda     ehit_quota
        clc
        adc     #30
        sta     ehit_quota
        lda     dist_quota
        clc
        adc     #4
        sta     dist_quota
        inc     next_type
        jmp     zap1


move_bounce:
        lda     win_state
        bne     nbxxx
; Move in X direction
        lda     dorks+E_XV,x
        bmi     neg_x0
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd0
neg_x0: lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd0: jsr     check_heblock     ; See if blocked
        bcc     nb0               ; Jump if not blocked
        lda     #0                ; Rev X dir
        sec
        sbc     dorks+E_XV,x
        sta     dorks+E_XV,x
nb0:
; Move in Y direction
        jsr     check_veblock     ; See if blocked
        bcc     nb1               ; Jump if not blocked
        lda     #0                ; Rev Y dir
        sec
        sbc     dorks+E_YV,x
        sta     dorks+E_YV,x
nb1:    jmp     draw_enemy


nbxxx:  lda     world_x
        cmp     #H'93
        bne     nb1
        lda     move_crown
        beq     nb1
        lda     #0
        sta     move_crown
        tya
        pha                       ; Save Y
show_loop:
        lda     #2*4*4
        sta     temp
        lda     dorks+E_X,x                ; X of first enemy
        clc
        adc     #2                         ; Adjust
        sec
        cmp     #256-12
        bcs     all_done
        sta     dorks+E_X,x                ; X of first enemy
        jsr     dork_draw
        ldx     #E_SIZE
        lda     #3*4*4
        sta     temp
        lda     dorks+E_X,x                ; X of second enemy
        clc
        adc     #2                         ; Adjust
        sec
        cmp     #256-12
        bcs     two_done
        sta     dorks+E_X,x                ; X of second enemy
        jsr     dork_draw
        jmp     cont_show
two_done:
        jsr     zappo
cont_show:
        lda     item_x
        clc
        adc     #2
        sec
        cmp     #256-12
        bcs     crn_done
        sta     item_x
        lda     #6*4*4
        sta     temp
        lda     item_shp
        ldx     item_x
        ldy     item_y
        jsr     set_item
        jmp     cont_shx
crn_done:
        ldx     #6*4*4
        ldy     #4
clx9:   lda     #SHP_OFF
        sta     spY,x
        txa
        clc
        adc     #4
        tax
        dey
        bne     clx9
cont_shx:
        ldx     #1
        jsr     wait_loop
        ldx     #0
        jmp     show_loop
all_done:
        jsr     zappo
        ldx     #ITM_SIZE*2
        lda     #H'BB
        sta     items+ITM_X,x
        lda     #H'4
        sta     items+ITM_Y,x
        ldx     #0
        stx     win_state
        stx     item_type
        pla
        tay                                ; Restore Y
        lda     #2*4*4
        sta     temp                       ; Restore Temp
        jmp     abort_draw


move_dbomb:
; Move in X direction
        lda     dorks+E_XV,x
        bmi     neg_x4
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd4
neg_x4: lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd4: jsr     check_heblock     ; See if blocked
        bcc     nb4               ; Jump if not blocked
        lda     #0                ; Rev X dir
        sec
        sbc     dorks+E_XV,x
        sta     dorks+E_XV,x
nb4:
; Move in Y direction
        lda     captain+SHP_X
        sec
        sbc     dorks+E_X,x
        bcc     e_on_r
        lda     c_face
        beq     lock_in
        jmp     climb
e_on_r: lda     c_face
        beq     climb
lock_in:
        lda     captain+SHP_Y
        sec
        sbc     dorks+E_Y,x
        bcc     climb
        cmp     #2
        bcc     coast
        lda     dorks+E_IYV,x
        sta     dorks+E_YV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_db
        lda     dorks+E_YV,x
        clc
        adc     dorks+E_POWER,x
        sta     dorks+E_YV,x
        jmp     move_db
coast:  lda     #0
        sta     dorks+E_YV,x
        jmp     move_db
climb:  lda     #0
        sec
        sbc     dorks+E_IYV,x
        sta     dorks+E_YV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_db
        lda     dorks+E_YV,x
        sec
        sbc     dorks+E_POWER,x
        sta     dorks+E_YV,x
move_db:
        jsr     check_veblock     ; See if blocked
        jmp     draw_enemy


move_hop:
; Move in X direction
        lda     dorks+E_XV,x
        bmi     neg_x1
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd1
neg_x1: lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd1: jsr     check_heblock     ; See if blocked
        bcc     nbx0              ; Jump if not blocked
        lda     #0                ; Rev X dir
        sec
        sbc     dorks+E_XV,x
        sta     dorks+E_XV,x
nbx0:
; Move in Y direction
        jsr     check_veblock     ; See if blocked
        bcc     nbx1              ; Jump if not blocked
        cmp     #69               ; Check dead code
        bne     hend
        lda     dorks+E_YV,x      ; Get Y vel
        bmi     nbx1              ; jump if going up
        jmp     zap1
hend:   lda     dorks+E_YV,x      ; Get Y vel
        bmi     nbx1              ; jump if going up
        lda     #0
        sta     dorks+E_IYV,x     ; Else clear count flag
        lda     #-2               ; Set jump speed
        sta     dorks+E_YV,x      ; Save it
; Move towards player
        lda     captain+SHP_X
        sec
        sbc     dorks+E_X,x
        bcc     hop_left
        lda     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     nbx1
        lda     dorks+E_POWER,x
        clc
        adc     dorks+E_XV,x
        sta     dorks+E_XV,x
        jmp     nbx1
hop_left:
        lda     #0
        sec
        sbc     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     nbx1
        lda     dorks+E_XV,x
        sec
        sbc     dorks+E_POWER,x
        sta     dorks+E_XV,x
nbx1:   inc     dorks+E_IYV,x     ; Inc count
        lda     dorks+E_IYV,x     ; get count
        cmp     #14
        bne     hbid
        lda     #0
        sta     dorks+E_IYV,x     ; clear count flag
        lda     dorks+E_YV,x
        cmp     #3
        beq     hbid
        inc     dorks+E_YV,x
hbid:   jmp     draw_enemy


move_crawl:
; Move in X direction
        lda     captain+SHP_X
        sec
        sbc     dorks+E_X,x
        bcc     crl_left
        cmp     #2
        bcc     crl_still
        lda     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_crl
        lda     dorks+E_POWER,x
        clc
        adc     dorks+E_XV,x
        sta     dorks+E_XV,x
        jmp     move_crl
crl_still:
        lda     #0
        sta     dorks+E_XV,x
        jmp     move_crl
crl_left:
        lda     #0
        sec
        sbc     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_crl
        lda     dorks+E_XV,x
        sec
        sbc     dorks+E_POWER,x
        sta     dorks+E_XV,x
move_crl:
        lda     dorks+E_XV,x
        bmi     neg_x2
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd2
neg_x2: lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd2: jsr     check_heblock
        bcc     nbx2              ; Jump if not blocked
        lda     dorks+E_YV,x
        bne     nbx2
        lda     #-2
        sta     dorks+E_YV,x
nbx2:
; Move in Y direction
        inc     dorks+E_IYV,x
        lda     dorks+E_IYV,x
        cmp     #8
        bne     set_right
        lda     #0
        sta     dorks+E_IYV,x
        lda     dorks+E_YV,x
        cmp     #2
        beq     set_right
        inc     dorks+E_YV,x
set_right:
        jsr     check_veblock     ; See if blocked
        bcc     nbx3              ; Jump if not blocked
        cmp     #69               ; Check dead code
        bne     cend
        jmp     zap1
cend:   lda     dorks+E_YV,x
        bpl     not_cup
        lda     #2
        sta     dorks+E_YV,x      ; Negate velosity
        jmp     jad
not_cup:
        lda     #-1
        sta     dorks+E_YV,x
jad:    lda     #4                ; Clear count
        sta     dorks+E_IYV,x
nbx3:   jmp     draw_enemy


move_cr2:
        lda     dorks+E_Y,x       ; Get Y
        clc
        adc     #3
        sta     dorks+E_Y,x       ; Set Y 4 lower
        lda     dorks+E_XV,x
        bmi     neg_x22
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd22
neg_x22:
        lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd22:
        jsr     check_heblock
        bcc     nbx32             ; Jump if not blocked
        lda     #0
        sec
        sbc     dorks+E_XV,x
        sta     dorks+E_XV,x
nbx32:
; Y Direction
        jsr     check_veblock     ; See if blocked
        bcc     xxx1              ; Jump if not blocked
        cmp     #69               ; Check dead code
        bne     xxx2
        lda     dorks+E_YV,x      ; Get Y vel
        bmi     xxx1              ; jump if going up
        jmp     zap1
xxx2:   lda     dorks+E_YV,x      ; Get Y vel
        clc
        bmi     xxx1              ; jump if going up
        lda     #0
        sta     dorks+E_IYV,x     ; Else clear count flag
        sta     dorks+E_YV,x      ; Save it
        lda     dorks+E_Y,x       ; Get Y
        and     #H'FE
        sta     dorks+E_Y,x       ; Get Y
xxx1:   lda     dorks+E_Y,x       ; Get Y
        sec
        sbc     #3
        sta     dorks+E_Y,x       ; Set Y 4 above
        inc     dorks+E_IYV,x     ; Inc count
        lda     dorks+E_IYV,x     ; get count
        cmp     #2
        bne     xxx3
        lda     #0
        sta     dorks+E_IYV,x     ; clear count flag
        lda     dorks+E_YV,x
        cmp     #2
        beq     xxx3
        inc     dorks+E_YV,x
xxx3:   jmp     draw_enemy


move_hover:
; Move in X direction
        lda     captain+SHP_X
        sec
        sbc     dorks+E_X,x
        bcc     hov_left
        cmp     #2
        bcc     hov_still
        lda     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_hv
        lda     dorks+E_POWER,x
        clc
        adc     dorks+E_XV,x
        sta     dorks+E_XV,x
        jmp     move_hv
hov_still:
        lda     #0
        sta     dorks+E_XV,x
        jmp     skip_hovx
hov_left:
        lda     #0
        sec
        sbc     dorks+E_IXV,x
        sta     dorks+E_XV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_hv
        lda     dorks+E_XV,x
        sec
        sbc     dorks+E_POWER,x
        sta     dorks+E_XV,x
        jmp     move_hv
move_hv:
        lda     dorks+E_XV,x
        bmi     neg_x3
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        jmp     cntxd3
neg_x3: lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
cntxd3: lda     #0
        sta     dorks+E_YV,x
        jsr     check_veblock
        bcs     skip_hovx
        jsr     check_heblock
        bcs     skip_hovx
        jmp     draw_enemy
skip_hovx:
        lda     #0
        sta     dorks+E_XV,x
        jsr     check_heblock
        lda     captain+SHP_Y
        sec
        sbc     dorks+E_Y,x
        bcc     hclimb
        cmp     #2
        bcc     hcoast
        lda     dorks+E_IYV,x
        sta     dorks+E_YV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_hv2
        lda     dorks+E_YV,x
        clc
        adc     dorks+E_POWER,x
        sta     dorks+E_YV,x
        jmp     move_hv2
hcoast: lda     #0
        sta     dorks+E_YV,x
        jmp     move_hv2
hclimb: lda     #0
        sec
        sbc     dorks+E_IYV,x
        sta     dorks+E_YV,x
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     move_hv2
        lda     dorks+E_YV,x
        sec
        sbc     dorks+E_POWER,x
        sta     dorks+E_YV,x
move_hv2:
        jsr     check_veblock     ; See if blocked
        jmp     draw_enemy


; Create Enemy Routine
create_enemy:
        lda     #1
        sta     dorks+E_CSTAGE,x
        lda     created
        ora     up_cnt
        ora     win_count
        bne     created_already
        lda     scroll_x
        and     #H'F
        beq     any_eok
        lda     dorks+E_MTYPE,x
        cmp     #HOVER
        beq     created_already
any_eok:
        lda     #0
        sta     tempc
        lda     play_count
        sec
        cmp     #POWER_UP
        bcc     slowe
        lda     dorks+E_POWER,x
        sta     tempc

slowe:  lda     c_face
        beq     is_right
        lda     #0
        sta     dorks+E_X,x
        lda     scroll_x
        and     #H'F
        adc     #8
        and     #H'F0
        sta     tempx
        lda     dorks+E_IXV,x
        clc
        adc     tempc
        sta     dorks+E_XV,x
        jmp     cnt03

created_already:
        jmp     exit_create
is_right:
        lda     #256-16
        sta     dorks+E_X,x
        lda     scroll_x
        and     #H'F
        adc     #256-16
        and     #H'F0
        sta     tempx
        lda     #0
        sec
        sbc     dorks+E_IXV,x
        sec
        sbc     tempc
        sta     dorks+E_XV,x
cnt03:  lda     captain+SHP_Y
        clc
        adc     #32
        and     #H'F0
        sta     tempy
        lda     tempc
        pha                       ; Save Power
look_ledge:
        jsr     chk_eblock        ; See if blocked
        bcs     ledge_found       ; We're trying to find a ledge
        lda     tempy
        sec
        sbc     #16               ; go up a square
        sta     tempy
        sec
        cmp     #32
        bcs     look_ledge
        pla                       ; Restore Power
        jmp     abort_draw        ; No ledge, blow it off
look_open:
        jsr     chk_eblock        ; See if blocked
        bcc     open_found        ; We're trying to find a ledge
ledge_found:
        lda     tempy
        sec
        sbc     #16               ; go up a square
        sta     tempy
        sec
        cmp     #32
        bcs     look_open
        pla                       ; Restore Power
        jmp     abort_draw        ; No open above ledge, blow it off
open_found:
        lda     #16
        sta     created
        lda     #1
        sta     dorks+E_STATUS,x
        inc     play_count
        lda     tempy
        sta     dorks+E_Y,x
        pla                       ; Restore Power
        sta     tempc
        lda     dorks+E_MTYPE,x
        cmp     #CRAWL
        beq     clear_creature
        cmp     #HOP
        beq     clear_creature
        jmp     ncc
clear_creature:
        lda     #0
        sta     dorks+E_IYV,x
        lda     #1
        sta     dorks+E_YV,x
        jmp     exit_create
ncc:    lda     #0
        sec
        sbc     dorks+E_IYV,x
        sec
        sbc     tempc
        sta     dorks+E_YV,x
exit_create:
        jmp     abort_draw


sp_create:
        lda     #1
        sta     dorks+E_CSTAGE,x
        lda     world_x
        cmp     #141
        beq     cren1
        cmp     #143
        beq     cren2
ncren:  jmp     abort_draw
cren1:  txa
        cmp     #0
        bne     ncren
        lda     #H'03             ; lda     #F_RIGHT
        and     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        lda     #256-15
        sta     dorks+E_X,x
        jmp     crenned
cren2:  txa
        cmp     #E_SIZE
        bne     ncren
        lda     #F_LEFT
        ora     dorks+E_FACE,x
        sta     dorks+E_FACE,x
        lda     #256-17
        sta     dorks+E_X,x
crenned:
        lda     #1
        sta     dorks+E_STATUS,x
        lda     #64
        sta     dorks+E_Y,x
        jmp     abort_draw

;
; Check_HEblock
;
; Moves enemy according to Xvel if not blocked by screen edge or
; tile.  When blocked, returns carry set.
check_heblock:
        lda     dorks+E_XV,x
        bmi     goingl
        beq     goingl
        clc
        adc     dorks+E_X,x
        sec
        cmp     #256-17
        bcc     xbord_ok
        rts                       ; Blocked by border
xbord_ok:
        pha                       ; Save new x coord
        clc
        adc     #13
        sta     tempx
exchk_cnt:
        lda     dorks+E_Y,x
        clc
        adc     #8
        sta     tempy
        jsr     chk_eblock
        bcc     lxclear
        pla

; Blocked by tile
        lda     dorks+E_XV,x      ; ZAP CHECK
        bpl     blocko
        lda     dorks+E_X,x
        sec
        cmp     #256-18
        bcc     blocko
        pla
        pla
        jmp     zap1
blocko:

        sec
        rts                       ; Blocked by tile
lxclear:
        pla
        sta     dorks+E_X,x
        clc
        rts
goingl: clc
        adc     dorks+E_X,x
        sec
        cmp     #2
        bcc     spxblk
        sec
        cmp     #256-2
        bcc     xbord2ok
spxblk: sec
        rts                       ; Blocked by border
xbord2ok:
        pha                       ; Save new x coord
        clc
        adc     #3
        sta     tempx
        jmp     exchk_cnt


;
; Check_VEblock
;
; Moves enemy according to Xvel if not blocked by screen edge or
; tile.  When blocked, returns carry set.
check_veblock:
        lda     dorks+E_YV,x
        bmi     goingu
        clc
        adc     dorks+E_Y,x
        sec
        cmp     #14*16-15
        bcc     ybord_ok
        lda     #69               ; Load dead code
        rts                       ; Blocked by border
ybord_ok:
        pha                       ; Save new y coord
        clc
        adc     #13
        sta     tempy
eychk_cnt:
        lda     dorks+E_X,x
        clc
        adc     #8
        sta     tempx
        jsr     chk_eblock
        bcc     lyclear
        pla
        sec
        lda     #0                ; Load dead code
        rts                       ; Blocked by tile
lyclear:
        pla
        sta     dorks+E_Y,x
        clc
        rts
goingu: clc
        adc     dorks+E_Y,x
        sec
        cmp     #32
        bcs     ybord2ok
        sec
        lda     #0                ; Load dead code
        rts                       ; Blocked by border
ybord2ok:
        pha                       ; Save new x coord
        clc
        adc     #3
        sta     tempy
        jmp     eychk_cnt


chk_eblock:
        tya
        pha                       ; save y
        txa
        pha                       ; save x
        lda     tempy
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Get 16 x 16 tile to check
        tay
        dey
        dey
        lda     scroll_x
        and     #H'F
        sta     tempc
        lda     tempx
        clc
        adc     tempc
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        tax                       ; Get 16 x 16 tile to check
        jsr     fetch_map         ; Get tile at that loc.
        sec
        cmp     FT_TILE
        bcc     sld_fnde
        pha
        lda     world_no
        cmp     #8
        bne     not_sc
        pla
        sec
        cmp     #61
        bcc     not_scx
        cmp     #63
        beq     not_scx
        jmp     sld_fnde
not_sc: pla
not_scx:
        clc
        jmp     chk_exit
sld_fnde:
        sec
chk_exit:
        pla                       ; Restore x
        tax
        pla                       ; Restore y
        tay
        rts

; Teleport Code
try_port:
        lda     c_face
        beq     tport_right
        lda     captain+SHP_X
        sec
        sbc     #3*16
        bcc     still_port
        jmp     port_xok
tport_right:
        lda     captain+SHP_X
        sec
        cmp     #256-(3*16)
        bcs     still_port
        clc
        adc     #3*16
        jmp     port_xok
still_port:
        lda     captain+SHP_X
        sta     port_tx
        lda     captain+SHP_Y
        sta     port_ty
        lda     #0
        jmp     cnt_port
port_xok:
        sta     tempc
        lda     scroll_x
        and     #H'F
        clc
        adc     #8
        adc     tempc
        and     #H'F0
        sta     tempx
        lda     #32+(11*16)
        sta     tempy
plook_ledge:
        jsr     chk_eblock        ; See if blocked
        bcs     pledge_found      ; We're trying to find a ledge
        lda     tempy
        sec
        sbc     #16               ; go up a square
        sta     tempy
        sec
        cmp     #64
        bcs     plook_ledge
        jmp     still_port        ; No ledge, blow it off
plook_open:
        jsr     chk_eblock        ; See if blocked
        bcc     popen_found       ; We're trying to find a ledge
pledge_found:
        lda     tempy
        sec
        sbc     #16               ; go up a square
        sta     tempy
        sec
        cmp     #48
        bcs     plook_open
        jmp     still_port        ; No open above ledge, blow it off
popen_found:
        lda     tempy
        sec
        sbc     #16               ; go up a square (need one more)
        sta     tempy
        jsr     chk_eblock        ; See if blocked
        bcs     pledge_found
; All Clear!
        lda     tempy
        sta     port_ty
        lda     c_face
        beq     port_right
        lda     captain+SHP_X
        sec
        sbc     #48
        sta     port_tx
        lda     #-2
        jmp     cnt_port
port_right:
        lda     captain+SHP_X
        clc
        adc     #48
        sta     port_tx
        lda     #2
cnt_port:
        sta     port_dir
        lda     #24
        sta     port_count
        jmp     not_select

decompose:
        ldx     #snd_dcomp & H'FF
        ldy     #snd_dcomp >> 8
        lda     #5                         ; Priority
        jsr     play_sef                   ; SOUND
        lda     captain+SHP_FT
        jsr     show_stage
        lda     #F_DIE
        jsr     show_stage
        lda     #F_DIE+8
        jsr     show_stage
        lda     #F_DIE
        jsr     show_stage
        lda     #F_DIE+8
        jsr     show_stage
        lda     #F_DIE+16
        jsr     show_stage
        lda     #F_DIE+24
        jsr     show_stage
        rts

show_stage:
        ldx     #0
        ldy     captain+SHP_NT
        jsr     set_tempc
        lda     captain+SHP_X
        sta     tempx
        lda     captain+SHP_Y
        sta     tempy
        ldx     #0                ;Sprite number
        jsr     set_sprite
        ldx     #8
        jsr     wait_loop
        rts

wait_loop:
        lda     take_turn
        cmp     #1
        bne     wait_loop
        lda     #0
        sta     take_turn
        txa
        pha
        jsr     go_sound
        pla
        tax
        dex
        bne     wait_loop
        rts

;
; Routine to update the shot graph
;
blast_graph:
        lda     bpower
        clc
        lsr     A
        lsr     A
        lsr     A
        lsr     A
        tay
        ldx     #8
        cmp     #0
        beq     do_empty
        lda     #CFULL
ffseg:  sta     bpowerg-1,x
        dex
        dey
        bne     ffseg
        txa
        bne     do_empty
        rts
do_empty:
        lda     #CEMPTY
        sta     bpowerg-1,x
        dex
        bne     do_empty
        rts

;
; Routine to update the shield graph
;
shield_graph:
        lda     spower
        tay
        ldx     #8
        cmp     #0
        beq     do_sempty
        lda     #CFULL
ffseg2: sta     spowerg-1,x
        dex
        dey
        bne     ffseg2
        txa
        bne     do_sempty
        rts
do_sempty:
        lda     #CEMPTY
        sta     spowerg-1,x
        dex
        bne     do_sempty
        rts

life_up:
        lda     win_count
        cmp     #H'FF
        beq     too_lifey
        ldx     #snd_uplife & H'FF
        ldy     #snd_uplife >> 8
        lda     #4                         ; Priority
        jsr     play_sef                   ; SOUND
        lda     life
        sec
        cmp     #9
        beq     too_lifey
        inc     life
too_lifey:
        rts

;
; Entry Points to add digit in A to score
;
add_100k:
        ldx     #5
        jmp     scoring
add10000:
        ldx     #4
        jmp     scoring
add_1000:
        ldx     #3
        jmp     scoring
add_100:
        ldx     #2
scoring:
        clc
        adc     score,x
        sec
        cmp     #11
        bcs     sc_over
        sta     score,x
;       txa
;       cmp     #4
;       bne     chk_hgh
;       lda     score,x
;       cmp     #6
;       bne     chk_hgh
;got_lup:
;       jsr     life_up
        jmp     chk_hgh
sc_over:
        sec
        sbc     #10
        sta     score,x
;       txa
;       cmp     #4
;       bne     not_lup
;       pha                       ; Save A
;       txa
;       pha                       ; Save X
;       jsr     life_up
;       pla
;       tax                       ; Rest X
;       pla                       ; Rest A
not_lup:
        cmp     #6
        bne     more_digs
        jmp     chk_hgh
more_digs:
        inx
        lda     #1
        jmp     scoring
chk_hgh:
        lda     high_copy
        bne     hi_copy
        ldx     #7
hcheck: lda     score-1,x
        sec
        cmp     hscore-1,x
        beq     cagain
        bcs     hcopy
        rts
cagain: dex
        bne     hcheck
hcopy:  lda     #1
        sta     high_copy
hi_copy:
        ldx     #7
copying:
        lda     score-1,x
        sta     hscore-1,x
        dex
        bne     copying
        rts

;
; Routine to initialize a shot
;
; Shot X velosity and position will depend on player position,
; and the direction he's facing (c_face = 0x40 for LEFT)
;
init_shot:
        lda     super1
        beq     norfire
        ldy     #5
        jmp     gsfb2
norfire:
        ldy     fireballs
        bne     gsfb2
        rts                       ; No fireballs
gsfb2:  ldx     #0
slloop: lda     shots+SHP_Y,x
        cmp     #SHP_OFF
        beq     empty
        jmp     not_empty
empty:  lda     #0
        sta     shots+SHP_CST,x
        sta     shots+SHP_AC,x
        sta     shots+SHP_YV,x
        lda     captain+SHP_Y
        clc
        adc     #11
        sta     shots+SHP_Y,x
        lda     corker
        ora     super1
        beq     no_corker
        lda     shots+SHP_Y,x
        clc
        adc     #8
        sta     shots+SHP_YH,x
        sec
        sbc     #16
        sta     shots+SHP_YL,x
        clc
        adc     #4
        sta     shots+SHP_Y,x
        lda     #4
        sta     shots+SHP_YV,x
no_corker:
        lda     c_face
        bne     sffl
        lda     captain+SHP_X
        clc
        adc     #12
        sta     shots+SHP_X,x
        lda     #4
        sta     shots+SHP_XV,x
        jmp     swrap
sffl:   lda     captain+SHP_X
        sec
        sbc     #4
        sta     shots+SHP_X,x
        lda     #-4
        sta     shots+SHP_XV,x
swrap:  lda     #6
        sta     sht_cycle
        lda     super1
        bne     nobpdec
        lda     bpower
        sec
        sbc     #6
        sta     bpower
        jsr     blast_graph
nobpdec:
        ldx     #snd_shot & H'FF
        ldy     #snd_shot >> 8
        lda     #1                         ; Priority
        jsr     play_sef                   ; SOUND
        rts
not_empty:
        txa
        clc
        adc     #SHT_SIZE
        tax
        dey
        beq     ldone
        jmp     slloop
ldone:  rts                       ; No empty slot found

;
; Returns CY if standing on ground, NC if not
;
check_ground:
        lda     captain+SHP_Y
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Get 16 x 16 tile to check
        tay                       ; Y = y
        sta     temp
        lda     scroll_x
        and     #H'F
        clc
        adc     captain+SHP_X
        pha
        clc
        adc     #4
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        tax                       ; Get 16 x 16 tile to check
        jsr     fetch_map         ; Get tile at that loc.
        sec
        cmp     FT_TILE
        bcc     grd_fnd
        pla
        pha
        clc
        adc     #8
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        tax                       ; Get 16 x 16 tile to check
        ldy     temp
        jsr     fetch_map         ; Get tile at that loc.
        sec
        cmp     FT_TILE
        bcc     grd_fnd
        pla
        clc
        rts
grd_fnd:
        pla
        sec
        rts


;
; Called with X = X of Screen pixel to check
;
chk_block:
        pha
        lda     captain+SHP_Y
        clc
        adc     #12
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Get 16 x 16 tile to check
        tay
        dey
        lda     scroll_x
        and     #H'F
        sta     temp
        pla
        clc
        adc     temp
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        pha                       ; Save this X
        tax                       ; Get 16 x 16 tile to check
        jsr     fetch_map         ; Get tile at that loc.
        sec
        cmp     FT_TILE
        bcc     sld_fndp
        pla
        tax                       ; Get 16 x 16 tile to check
        lda     captain+SHP_Y     ; Now check upper block
        clc
        adc     #12
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Get 16 x 16 tile to check
        tay
        dey
        dey
        jsr     fetch_map         ; Get tile at that loc.
        sec
        cmp     FT_TILE
        bcc     sld_fnd
        clc
        rts
sld_fndp:
        pla
sld_fnd:
        lda     #0
        sta     captain+SHP_XV
        sec
        rts


go_left:
        lda     #-4
        clc
        adc     captain+SHP_XV
        sta     captain+SHP_XV
        bpl     gold
        sec
        cmp     #-(MTHRESH+1)
        bcs     gold
        lda     #-MTHRESH
        sta     captain+SHP_XV
gold:   lda     #F_LEFT
        sta     c_face
        jmp     chk_buttons

go_right:
        lda     #4
        clc
        adc     captain+SHP_XV
        sta     captain+SHP_XV
        bmi     gord
        sec
        cmp     #MTHRESH+1
        bcc     gord
        lda     #MTHRESH
        sta     captain+SHP_XV
gord:   lda     #F_RIGHT
        sta     c_face
        jmp     chk_buttons

slow_down:
        lda     on_ground
        beq     air_brake
        lda     captain+SHP_XV
        beq     no_slow
        bpl     subit
        clc
        adc     #4
        bmi     vsok
        jmp     clvs
subit:  sec
        sbc     #4
        bpl     vsok
clvs:   lda     #0
vsok:   sta     captain+SHP_XV
        jmp     no_slow
air_brake:
        lda     captain+SHP_XV
        beq     no_slow
        bpl     decit
        inc     captain+SHP_XV
        jmp     no_slow
decit:  dec     captain+SHP_XV
no_slow:jmp     chk_buttons


move_left:
        lda     captain+SHP_XV
        clc
        adc     captain+SHP_MC
        sta     captain+SHP_MC
        bpl     skipl
        clc
        adc     #MTHRESH-1
        bpl     skipl
        sta     captain+SHP_MC
        inc     captain+SHP_MC
        lda     captain+SHP_X
        sec
        sbc     #2
        pha
        clc
        adc     #3
        jsr     chk_block
        bcc     lclear
        pla
        jmp     skipl
lclear: pla
        sec
        cmp     #H'FE
        bcs     skipl
        sec
        cmp     #96
        bcs     no_scl
        tax
        lda     scroll_x
        and     #H'F
        ora     world_x
        ora     world_p
        beq     xx_scl
        jsr     scrl_left
        ldx     captain+SHP_X
xx_scl: txa
no_scl: sta     captain+SHP_X
skipl:  lda     c_face
        jsr     m_animate
        rts

move_right:
        lda     captain+SHP_XV
        clc
        adc     captain+SHP_MC
        sta     captain+SHP_MC
        bmi     skipr
        sec
        sbc     #MTHRESH
        bcc     skipr
        sta     captain+SHP_MC
        lda     captain+SHP_X
        clc
        adc     #2
        pha
        clc
        adc     #13
        jsr     chk_block
        bcc     rclear
        pla
        jmp     skipr
rclear: pla
        sec
        cmp     #144
        bcc     no_scr
        tax
        lda     world_p
        cmp     #1
        bne     wscr
        lda     world_x
        cmp     #240
        bne     wscr
        lda     captain+SHP_X
        cmp     #240
        bne     xx_scr
        jmp     lockr
wscr:   jsr     scrl_right
lockr:  ldx     captain+SHP_X
xx_scr: txa
no_scr: sta     captain+SHP_X
skipr:  lda     c_face
        jsr     m_animate
        rts


m_animate:
        ldx     #0                ; Sprite offset
        ldy     #8                ; Sprite count
        jsr     set_pal
        lda     on_ground
        bne     aokx
        rts
aokx:   lda     captain+SHP_CST
        bne     not_still
        lda     #1
        sta     captain+SHP_CST
not_still:
        inc     captain+SHP_AC
        lda     captain+SHP_AC
        cmp     captain+SHP_AT
        bne     nottime0
        lda     #0
        sta     captain+SHP_AC
        lda     captain+SHP_CST
        cmp     captain+SHP_NST
        bne     incok0
        lda     #1
        sta     captain+SHP_CST
        jmp     nottime0
incok0: inc     captain+SHP_CST
nottime0:
        lda     #1
        sta     move_flag
        rts


scrl_left:
        lda     scroll_x
        and     #H'F
        bne     st_ok2
        lda     world_x
        ora     world_p
        cmp     #0
        beq     no_ov2
        lda     scroll_x
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Now offset = strip #
        sec
        sbc     #1                ; Get left edge slot
        sta     temp
        lda     scroll_p          ; If on second scroll page, then add
        ldy     #0                ;     another 16 slots
        cmp     #1
        bne     slotok2
        ldy     #16
slotok2:
        tya
        clc
        adc     temp
        and     #H'1F             ; Mod it by 32
        sta     draw_slot
        dec     world_x
        lda     world_x
        sta     draw_x
        cmp     #H'FF
        bne     npc_2
        lda     #0
        sta     world_p
npc_2:  jsr     draw_strip
st_ok2:
        lda     #2
        sta     world_adj
        lda     scroll_x
        sec
        sbc     #2
        sta     scroll_x
        bcs     no_ov2
        lda     #1
        eor     scroll_p
        sta     scroll_p
no_ov2:
        rts


scrl_right:
        lda     world_p
        cmp     #1
        bne     nobig
        lda     world_x
        cmp     #240
        beq     no_ov1
nobig:  lda     scroll_x
        and     #H'F
        cmp     #H'E
        bne     st_ok1
        lda     scroll_x
        lsr     a
        lsr     a
        lsr     a
        lsr     a                 ; Now offset = strip #
        clc
        adc     #17               ; Get right edge slot
        sta     temp
        lda     scroll_p          ; If on second scroll page, then add
        ldy     #0                ;     another 16 slots
        cmp     #1
        bne     slotok1
        ldy     #16
slotok1:
        tya
        clc
        adc     temp
        and     #H'1F             ; Mod it by 32
        sta     draw_slot
        lda     world_x
        cmp     #255
        bne     npc_1
        lda     #1
        sta     world_p
        lda     #16
        sta     draw_x
        jmp     no_sc1
npc_1:  clc
        adc     #17               ; Get right edge tile offset
        sta     draw_x
        cmp     #17
        bcs     no_sc1
        lda     world_p
        pha
        lda     #1
        sta     world_p
        jsr     draw_strip
        pla
        sta     world_p
        jmp     cont
no_sc1: jsr     draw_strip
cont:   inc     world_x
st_ok1:
        lda     #-2
        sta     world_adj
        lda     scroll_x
        clc
        adc     #2
        sta     scroll_x
        bcc     no_ov1
        lda     #1
        eor     scroll_p
        sta     scroll_p
no_ov1:
        rts


;
; Called with X     = Shape Stage
;             Y     = Number of tiles in sprite
;             A     = First Tile of Stage 0
; NOTE: Y is preserved
set_tempc:
        sty     tempc
        jmp     chkstg
chklp:  pla
        clc
        adc     tempc
        dex
chkstg: pha
        txa
        cmp     #0
        bne     chklp
        pla
        sta     tempc
        rts

;
; Called with X     = First Sprite No. * 4
;             Y     = Number of tiles in sprite
;             tempx = Sprite X
;             tempy = Sprite Y
;             tempc = First Char of Sprite
set_sprite:
        lda     spP,x
        and     #F_LEFT
        beq     no_flip1
        lda     #8
        clc
        adc     tempx
        sta     tempx
no_flip1:
        lda     tempx
        sta     spX,x             ; set X
        lda     tempy
        sta     spY,x             ; set Y
        lda     tempc
        sta     spC,x             ; set char
        inx
        inx
        inx
        inx
        inc     tempc
        dey
        bne     y_not_odd
        rts
y_not_odd:
        lda     spP,x
        and     #F_LEFT
        beq     no_flip2
        lda     tempx
        sec
        sbc     #8
        sta     tempx
        jmp     did_flip
no_flip2:
        lda     tempx
        clc
        adc     #8
did_flip:
        sta     spX,x             ; set X
        lda     tempy
        sta     spY,x             ; set Y
        lda     tempc
        sta     spC,x             ; set char
        inx
        inx
        inx
        inx
        lda     tempy
        clc
        adc     #8
        sta     tempy
        inc     tempc
        dey
        bne     set_sprite
        rts

;
; Called with X = Sprite * 4, Y = Num Sprites, A = Pal Data
;
set_pal:
        sta     spP,x              ; set palet
        pha
        txa
        clc
        adc     #4
        tax
        pla
        dey
        bne     set_pal
        rts

read_joystick:
;
; Joystick Monitoring
;
	LDA	#1
	STA	H'4016
	LDA	#0
	STA	H'4016		;LATCH A VALUE TO SHIFT.  ALSO LATCHES 4017.
	LDA	#0
	LDX	#8
N320:   PHA
	LDA	H'4016
	ROR	A
	PLA
	ROL	A		;MOVE BIT UP INTO OUR BYTE
	DEX
	BNE	N320
	TAX			;SAVE NEW VALUE
	EOR	J1FLAGS		;GET CHANGES
	STA	J1CHANGE	;SAVE CHANGES
	TXA
        STA     J1FLAGS         ;Store Current State
        and     J1CHANGE
        sta     J1CHANGE

	LDA	#0		;NOW WE DO J2.  ALREADY LATCHED BY 4016.
	LDX	#8
N330:	PHA
	LDA	H'4017		;READ IN EACH BIT FROM 8 BIT SHIFT REG
	ROR	A
	PLA
	ROL	A		;MOVE BIT UP INTO OUR BYTE
	DEX
	BNE	N330
	TAX			;SAVE NEW VALUE
	EOR	J2FLAGS		;GET CHANGES
	STA	J2CHANGE	;SAVE CHANGES
	TXA
        STA     J2FLAGS         ;save current State
        and     J2CHANGE
        sta     J2CHANGE
        rts

.ORG    H'FB20
;
; BI-PAGE CODE
;
map_ptr:        .DRW     H'8000
                .DRW     H'9940   ; Forest map
                .DRW     H'B1E0   ; Lake Map
                .DRW     H'80A0   ; Moon Map
                .DRW     H'CA80   ; Base Map
                .DRW     H'E320   ; Cave Map
                .DRW     H'80A0   ; Shed Map
                .DRW     H'B1E0   ; Comp Map
                .DRW     H'9940   ; Castle Map
info_ptr:       .DRW     H'A000
                .DRW     H'98A0   ; Forest data
                .DRW     H'B140   ; Lake Data
                .DRW     H'8000   ; Moon Data
                .DRW     H'C9E0   ; Base Data
                .DRW     H'E280   ; Cave Data
                .DRW     H'8000   ; Shed Data
                .DRW     H'B140   ; Comp Data
                .DRW     H'98A0   ; Castle Data
foo_ptr:        .DB      8+0
                .DB      8+1
                .DB      8+2
                .DB      8+3
                .DB      8+4
                .DB      8+5
                .DB      0+5
                .DB      0+7
                .DB      0+6
foo_data:       .DB      H'00          +H'C
                .DB      H'10          +H'C
                .DB      H'20          +H'C
                .DB      H'30          +H'C
                .DB      H'40          +H'C
                .DB      H'50          +H'C
                .DB      H'60          +H'C
                .DB      H'70          +H'C
                .DB      H'01          +H'C
                .DB      H'11          +H'C
                .DB      H'21          +H'C
                .DB      H'31          +H'C
                .DB      H'41          +H'C
                .DB      H'51          +H'C

init_data:
        ldx     world_no
        lda     foo_ptr,x
        sta     page_val
        tax
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        lda     world_no
        asl     a
        tax
        lda     info_ptr,x
        sta     base_ptr
        lda     info_ptr+1,x
        sta     base_ptr+1

        ldx     #H'C0
        ldy     #0
copy_loop:
        lda     (base_ptr),y      ; Info byte
        sta     world_data,y
        iny
        dex
        bne     copy_loop

        lda     page_val
        and     #H'7
        tax
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        rts


; Called with X,Y = Tile to check
; Returns tile
fetch_map:
        tya
        bpl     ycip
rbv:    lda     #H'3F
        rts
ycip:   sec
        sbc     #12
        bcs     rbv

        txa
        pha                       ; Save X
        ldx     page_val
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        lda     world_no
        asl     a
        tax
        lda     map_ptr,x
        sta     base_ptr
        lda     map_ptr+1,x
        clc
        adc     world_p
        sta     base_ptr+1
        pla                       ; Restore X
        tax

        lda     world_x
        clc
        adc     base_ptr
        sta     base_ptr
        lda     base_ptr+1
        adc     #0
        sta     base_ptr+1
        tya
        asl     a
        clc
        adc     base_ptr+1
        sta     base_ptr+1
        txa
        tay
        lda     (base_ptr),y      ; Get tile no.
        and     #H'3F

        pha                       ; Save Tile
        lda     page_val
        and     #H'7
        tax
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        pla                       ; Restore Tile

        rts


draw_prep:
        lda     draw_busy
        cmp     #0
        bne     draw_prep

        lda     draw_slot
        asl     a                 ; Now we have draw col.
        cmp     #32               ; If on page 2
        bpl     page_2            ; Then jump
        tax
        clc
        adc     #128              ; Add our row offset
        sta     draw_tlow
        lda     #H'20
        sta     draw_thgh
        lda     #H'23
        sta     draw_phgh
        jmp     cont_draw
page_2: sec
        sbc     #32
        tax
        clc
        adc     #128              ; Add our row offset
        sta     draw_tlow
        lda     #H'24
        sta     draw_thgh
        lda     #H'27
        sta     draw_phgh
cont_draw:
        txa                       ; Get original offset
        lsr     a
        lsr     a                 ; offset /= 4
        clc
        adc     #H'C8
        sta     draw_plow

        txa
        pha                       ; Save X
        ldx     page_val
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        lda     world_no
        asl     a
        tax
        lda     map_ptr,x
        sta     base_ptr
        lda     map_ptr+1,x
        clc
        adc     world_p
        sta     base_ptr+1
        pla                       ; Restore X
        tax

        lda     #12
        sta     num_lines
        ldx     #0
main_draw_loop:
        ldy     draw_x            ; Y is our offset from the start of a row
        lda     (base_ptr),y      ; Get tile no.
        and     #H'3F
        asl     a
        asl     a
        sta     tiles,x
        inx
        lda     base_ptr+1
        clc
        adc     #2
        sta     base_ptr+1
        dec     num_lines
        bne     main_draw_loop
;
; Now Load Palet
;
        lda     #12
        sta     num_lines

        lda     world_no
        asl     a
        tax
        lda     map_ptr,x
        sta     base_ptr
        sta     next_ptr
        lda     map_ptr+1,x
        clc
        adc     world_p
        sta     base_ptr+1
        clc
        adc     #2
        sta     next_ptr+1

        ldy     draw_x            ; Y is our offset from the start of a row
        lda     draw_slot
        and     #1
        beq     slot_even
        dey
slot_even:
        ldx     #0
main_pal_loop:
        lda     (base_ptr),y      ; Get tile no.
        pha
        iny
        lda     (base_ptr),y      ; Get tile no.
        pha
        dey
        lda     (next_ptr),y      ; Get tile no.
        pha
        iny
        lda     (next_ptr),y      ; Get tile no.
        pha
        dey
        pla
        and     #H'C0
        sta     temp
        pla
        and     #H'C0
        lsr     a
        lsr     a
        ora     temp
        sta     temp
        pla
        and     #H'C0
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        ora     temp
        sta     temp
        pla
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        lsr     a
        ora     temp
        sta     pals,x
        inx

        lda     base_ptr+1
        clc
        adc     #4
        sta     base_ptr+1
        adc     #2
        sta     next_ptr+1

        dec     num_lines
        dec     num_lines
        bne     main_pal_loop

        lda     page_val
        and     #H'7
        tax
        lda     foo_data,x
        sta     foo_data,x
lda H'FFFF ; Debug Board Code
        rts

draw_strip:
        jsr     draw_prep
        lda     #1
        sta     draw_busy
        rts

nmi_draw:
        lda     #4
        sta     H'2000
        ldx     #0
        lda     draw_thgh
        sta     H'2006            ; Set page 0 high
        lda     draw_tlow
        STA     H'2006            ; Set page 0 low
nmi_t1:
        lda     tiles,x           ; Get tile no.
        inx
        sta     H'2007
        clc
        adc     #1
        sta     H'2007
        txa
        cmp     #12
        bne     nmi_t1
        ldx     #0
        lda     draw_thgh
        sta     H'2006            ; Set page 0 high
        lda     draw_tlow
        clc
        adc     #1
        STA     H'2006            ; Set page 0 low
nmi_t2:
        lda     tiles,x           ; Get tile no.
        inx
        clc
        adc     #2
        sta     H'2007
        adc     #1
        sta     H'2007
        txa
        cmp     #12
        bne     nmi_t2

        lda     #H'0
        sta     H'2000
;
; Now Draw Palet
;
        ldx     #0
nmi_pal_loop:
        lda     draw_phgh         ; Set up port to write to palet
        sta     H'2006
        lda     draw_plow
        sta     H'2006
        lda     pals,x            ; Get pal val
        inx
        sta     H'2007
        lda     draw_plow
        clc
        adc     #8
        sta     draw_plow
        txa
        cmp     #6
        bne     nmi_pal_loop
        rts

NMI:    pha
        txa
        pha
        tya
        pha
        lda     H'2002
        lda     #6                ; Disable Display
        sta     H'2001            ; Set 32 col. mode for sprites & tiles

; Transfer the sprite table
        lda     #0
        sta     H'2003
        lda     #7
        sta     H'4014

        lda     draw_busy
        cmp     #0
        beq     no_draw
        jsr     nmi_draw
        lda     #0
        sta     draw_busy
        ldx     lc2
        jmp     draw_done

no_draw:
        lda     title_val
        bne     skip_shit

        lda     #H'20
        sta     H'2006
        lda     #H'47
        sta     H'2006
        ldx     #7
dscl:   lda     score-1,x
        sta     H'2007
        dex
        bne     dscl

        lda     #H'20
        sta     H'2006
        lda     #H'58
        sta     H'2006
        ldx     #7
dhscl:  lda     hscore-1,x
        sta     H'2007
        dex
        bne     dhscl

        lda     #H'20
        sta     H'2006
        lda     #H'63
        sta     H'2006
        ldx     #8
dspl:   lda     spowerg-1,x
        sta     H'2007
        dex
        bne     dspl

        lda     #H'20
        sta     H'2006
        lda     #H'77
        sta     H'2006
        ldx     #8
dbpl:   lda     bpowerg-1,x
        sta     H'2007
        dex
        bne     dbpl

        lda     #H'20
        sta     H'2006
        lda     #H'72
        sta     H'2006
        ldx     life
        inx
        stx     H'2007

skip_shit:
	lda	#H'3F
	sta	H'2006
        lda     #H'1D
	sta	H'2006
        lda     aux_c1
        sta     H'2007          ;3F1D
        lda     aux_c2
        sta     H'2007          ;3F1E
        lda     aux_c3
        sta     H'2007          ;3F1F
        ldx     lc1

draw_done:
        inc     turn_count
        lda     turn_count
        cmp     #1
        bne     no_turn
        lda     #0
        sta     turn_count
        lda     #1
        sta     take_turn

no_turn:
        lda     #H'18
        sta     H'2000
        lda     #0
        sta     H'2005
        sta     H'2005
        lda     #H'1E
        sta     H'2001          ; Enable Display

        txa
        pha
        ldx     #H'A0
        jsr     line_count
        pla
        tax
        jsr     aux_count

        lda     #H'1E
        sta     H'2001          ; Enable Display
        lda     scroll_x
        sta     H'2005
        lda     #0
        sta     H'2005
        lda     scroll_p
        ora     scr_status
        sta     H'2000          ;set scroll page and enable next NMI

        pla
        tay
        pla
        tax
        pla
        rti

line_count:
lcd1:   ldy     #4
lcd2:   dey
        bne     lcd2
        dex
        bne     lcd1
        rts

aux_count:
lcd3:   adc     #0
        adc     #0
        dex
        bne     lcd3
        rts

IRQ:	JMP	BOOT
	RTI

BOOT:	SEI			;DISALLOW IRQ INTERRUPTS
	CLD
	LDX	#H'FF
	TXS			;SET UP THE STACK
        LDA     #H'00
        STA     H'2000
        JSR     VERT_WAIT
        JSR     VERT_WAIT
        lda     foo_data
        sta     foo_data
lda H'FFFF ; Debug Board Code
        jmp     dan_code


;THIS SUB WILL WAIT FOR VERTICAL RETRACE ACTIVE.
VERT_WAIT:
V20:	LDA	H'2002
	BPL	V20		;WAIT FOR VERTICAL RETRACE
	RTS

;HERE ARE THE INTERRUPT AND BOOT VECTORS.  
.ORG    H'FFFA
	.DRW	NMI
	.DRW	BOOT
	.DRW	IRQ


